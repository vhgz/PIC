

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Jan 02 23:21:43 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text22,local,class=CODE,merge=1,delta=2
    32                           	psect	text23,local,class=CODE,merge=1,delta=2
    33                           	psect	text24,local,class=CODE,merge=1,delta=2
    34                           	psect	text25,local,class=CODE,merge=1,delta=2
    35                           	psect	text26,local,class=CODE,merge=1,delta=2
    36                           	psect	text27,local,class=CODE,merge=1,delta=2
    37                           	psect	text28,local,class=CODE,merge=1,delta=2
    38                           	psect	text29,local,class=CODE,merge=1,delta=2
    39                           	psect	text30,local,class=CODE,merge=1,delta=2
    40                           	psect	text31,local,class=CODE,merge=1,delta=2
    41                           	dabs	1,0x7E,2
    42  0000                     
    43                           ; Version 1.45
    44                           ; Generated 16/11/2017 GMT
    45                           ; 
    46                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC16F877A Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     	;# 
    78  0001                     	;# 
    79  0002                     	;# 
    80  0003                     	;# 
    81  0004                     	;# 
    82  0005                     	;# 
    83  0006                     	;# 
    84  0007                     	;# 
    85  0008                     	;# 
    86  0009                     	;# 
    87  000A                     	;# 
    88  000B                     	;# 
    89  000C                     	;# 
    90  000D                     	;# 
    91  000E                     	;# 
    92  000E                     	;# 
    93  000F                     	;# 
    94  0010                     	;# 
    95  0011                     	;# 
    96  0012                     	;# 
    97  0013                     	;# 
    98  0014                     	;# 
    99  0015                     	;# 
   100  0015                     	;# 
   101  0016                     	;# 
   102  0017                     	;# 
   103  0018                     	;# 
   104  0019                     	;# 
   105  001A                     	;# 
   106  001B                     	;# 
   107  001B                     	;# 
   108  001C                     	;# 
   109  001D                     	;# 
   110  001E                     	;# 
   111  001F                     	;# 
   112  0081                     	;# 
   113  0085                     	;# 
   114  0086                     	;# 
   115  0087                     	;# 
   116  0088                     	;# 
   117  0089                     	;# 
   118  008C                     	;# 
   119  008D                     	;# 
   120  008E                     	;# 
   121  0091                     	;# 
   122  0092                     	;# 
   123  0093                     	;# 
   124  0094                     	;# 
   125  0098                     	;# 
   126  0099                     	;# 
   127  009C                     	;# 
   128  009D                     	;# 
   129  009E                     	;# 
   130  009F                     	;# 
   131  010C                     	;# 
   132  010D                     	;# 
   133  010E                     	;# 
   134  010F                     	;# 
   135  018C                     	;# 
   136  018D                     	;# 
   137                           
   138                           	psect	strings
   139  1000                     __pstrings:	
   140  1000                     stringtab:	
   141  1000                     __stringtab:	
   142                           
   143                           ;	String table - string pointers are 1 byte each
   144  1000  1BFF               	btfsc	btemp+1,7
   145  1001  280A               	ljmp	stringcode
   146  1002  1383               	bcf	3,7
   147  1003  187F               	btfsc	btemp+1,0
   148  1004  1783               	bsf	3,7
   149  1005  0800               	movf	0,w
   150  1006  0A84               	incf	4,f
   151  1007  1903               	skipnz
   152  1008  0AFF               	incf	btemp+1,f
   153  1009  0008               	return
   154  100A                     stringcode:	
   155  100A                     stringdir:	
   156  100A  3010               	movlw	high stringdir
   157  100B  008A               	movwf	10
   158  100C  0804               	movf	4,w
   159  100D  0A84               	incf	4,f
   160  100E  0782               	addwf	2,f
   161  100F                     __stringbase:	
   162  100F  3400               	retlw	0
   163  1010                     __end_of__stringtab:	
   164  1010                     _dpowers:	
   165  1010  3401               	retlw	1
   166  1011  3400               	retlw	0
   167  1012  3400               	retlw	0
   168  1013  3400               	retlw	0
   169  1014  340A               	retlw	10
   170  1015  3400               	retlw	0
   171  1016  3400               	retlw	0
   172  1017  3400               	retlw	0
   173  1018  3464               	retlw	100
   174  1019  3400               	retlw	0
   175  101A  3400               	retlw	0
   176  101B  3400               	retlw	0
   177  101C  34E8               	retlw	232
   178  101D  3403               	retlw	3
   179  101E  3400               	retlw	0
   180  101F  3400               	retlw	0
   181  1020  3410               	retlw	16
   182  1021  3427               	retlw	39
   183  1022  3400               	retlw	0
   184  1023  3400               	retlw	0
   185  1024  34A0               	retlw	160
   186  1025  3486               	retlw	134
   187  1026  3401               	retlw	1
   188  1027  3400               	retlw	0
   189  1028  3440               	retlw	64
   190  1029  3442               	retlw	66
   191  102A  340F               	retlw	15
   192  102B  3400               	retlw	0
   193  102C  3480               	retlw	128
   194  102D  3496               	retlw	150
   195  102E  3498               	retlw	152
   196  102F  3400               	retlw	0
   197  1030  3400               	retlw	0
   198  1031  34E1               	retlw	225
   199  1032  34F5               	retlw	245
   200  1033  3405               	retlw	5
   201  1034  3400               	retlw	0
   202  1035  34CA               	retlw	202
   203  1036  349A               	retlw	154
   204  1037  343B               	retlw	59
   205  1038                     __end_of_dpowers:	
   206  1038                     __powers_:	
   207  1038  3400               	retlw	0
   208  1039  3480               	retlw	128
   209  103A  343F               	retlw	63
   210  103B  3400               	retlw	0
   211  103C  3420               	retlw	32
   212  103D  3441               	retlw	65
   213  103E  3400               	retlw	0
   214  103F  34C8               	retlw	200
   215  1040  3442               	retlw	66
   216  1041  3400               	retlw	0
   217  1042  347A               	retlw	122
   218  1043  3444               	retlw	68
   219  1044  3440               	retlw	64
   220  1045  341C               	retlw	28
   221  1046  3446               	retlw	70
   222  1047  3450               	retlw	80
   223  1048  34C3               	retlw	195
   224  1049  3447               	retlw	71
   225  104A  3424               	retlw	36
   226  104B  3474               	retlw	116
   227  104C  3449               	retlw	73
   228  104D  3497               	retlw	151
   229  104E  3418               	retlw	24
   230  104F  344B               	retlw	75
   231  1050  34BC               	retlw	188
   232  1051  34BE               	retlw	190
   233  1052  344C               	retlw	76
   234  1053  346B               	retlw	107
   235  1054  346E               	retlw	110
   236  1055  344E               	retlw	78
   237  1056  3403               	retlw	3
   238  1057  3415               	retlw	21
   239  1058  3450               	retlw	80
   240  1059  3479               	retlw	121
   241  105A  34AD               	retlw	173
   242  105B  3460               	retlw	96
   243  105C  34F3               	retlw	243
   244  105D  3449               	retlw	73
   245  105E  3471               	retlw	113
   246  105F                     __end_of__powers_:	
   247  105F                     __npowers_:	
   248  105F  3400               	retlw	0
   249  1060  3480               	retlw	128
   250  1061  343F               	retlw	63
   251  1062  34CD               	retlw	205
   252  1063  34CC               	retlw	204
   253  1064  343D               	retlw	61
   254  1065  34D7               	retlw	215
   255  1066  3423               	retlw	35
   256  1067  343C               	retlw	60
   257  1068  3412               	retlw	18
   258  1069  3483               	retlw	131
   259  106A  343A               	retlw	58
   260  106B  34B7               	retlw	183
   261  106C  34D1               	retlw	209
   262  106D  3438               	retlw	56
   263  106E  34C6               	retlw	198
   264  106F  3427               	retlw	39
   265  1070  3437               	retlw	55
   266  1071  3438               	retlw	56
   267  1072  3486               	retlw	134
   268  1073  3435               	retlw	53
   269  1074  34C0               	retlw	192
   270  1075  34D6               	retlw	214
   271  1076  3433               	retlw	51
   272  1077  34CC               	retlw	204
   273  1078  342B               	retlw	43
   274  1079  3432               	retlw	50
   275  107A  3470               	retlw	112
   276  107B  3489               	retlw	137
   277  107C  3430               	retlw	48
   278  107D  34E7               	retlw	231
   279  107E  34DB               	retlw	219
   280  107F  342E               	retlw	46
   281  1080  34E5               	retlw	229
   282  1081  343C               	retlw	60
   283  1082  341E               	retlw	30
   284  1083  3442               	retlw	66
   285  1084  34A2               	retlw	162
   286  1085  340D               	retlw	13
   287  1086                     __end_of__npowers_:	
   288  0006                     _PORTB	set	6
   289  001E                     _ADRESH	set	30
   290  001F                     _ADCON0	set	31
   291  00FA                     _GO_nDONE	set	250
   292  0043                     _RD3	set	67
   293  0042                     _RD2	set	66
   294  0047                     _RD7	set	71
   295  0046                     _RD6	set	70
   296  0045                     _RD5	set	69
   297  0044                     _RD4	set	68
   298  0088                     _TRISD	set	136
   299  0087                     _TRISC	set	135
   300  0086                     _TRISB	set	134
   301  0085                     _TRISA	set	133
   302  009E                     _ADRESL	set	158
   303  009F                     _ADCON1	set	159
   304  1086                     STR_3:	
   305  1086  344C               	retlw	76	;'L'
   306  1087  3465               	retlw	101	;'e'
   307  1088  3469               	retlw	105	;'i'
   308  1089  3474               	retlw	116	;'t'
   309  108A  3475               	retlw	117	;'u'
   310  108B  3472               	retlw	114	;'r'
   311  108C  3461               	retlw	97	;'a'
   312  108D  3420               	retlw	32	;' '
   313  108E  3441               	retlw	65	;'A'
   314  108F  3444               	retlw	68	;'D'
   315  1090  3443               	retlw	67	;'C'
   316  1091  3400               	retlw	0
   317  1092                     STR_2:	
   318  1092  344D               	retlw	77	;'M'
   319  1093  3450               	retlw	80	;'P'
   320  1094  344C               	retlw	76	;'L'
   321  1095  3441               	retlw	65	;'A'
   322  1096  3442               	retlw	66	;'B'
   323  1097  3420               	retlw	32	;' '
   324  1098  3458               	retlw	88	;'X'
   325  1099  3443               	retlw	67	;'C'
   326  109A  3438               	retlw	56	;'8'
   327  109B  3400               	retlw	0
   328  109C                     STR_1:	
   329  109C  344C               	retlw	76	;'L'
   330  109D  3443               	retlw	67	;'C'
   331  109E  3444               	retlw	68	;'D'
   332  109F  3420               	retlw	32	;' '
   333  10A0  3465               	retlw	101	;'e'
   334  10A1  3420               	retlw	32	;' '
   335  10A2  3441               	retlw	65	;'A'
   336  10A3  3444               	retlw	68	;'D'
   337  10A4  3443               	retlw	67	;'C'
   338  10A5  3400               	retlw	0
   339  10A6                     STR_4:	
   340  10A6  3425               	retlw	37	;'%'
   341  10A7  342E               	retlw	46	;'.'
   342  10A8  3433               	retlw	51	;'3'
   343  10A9  3466               	retlw	102	;'f'
   344  10AA  3420               	retlw	32	;' '
   345  10AB  3456               	retlw	86	;'V'
   346  10AC  3400               	retlw	0
   347                           
   348                           ; #config settings
   349  0000                     
   350                           	psect	cinit
   351  07FC                     start_initialization:	
   352  07FC                     __initialization:	
   353  07FC                     end_of_initialization:	
   354                           ;End of C runtime variable initialization code
   355                           
   356  07FC                     __end_of__initialization:	
   357  07FC  0183               	clrf	3
   358  07FD  120A  158A  2B1A   	ljmp	_main	;jump to C main() function
   359                           
   360                           	psect	cstackBANK1
   361  00A0                     __pcstackBANK1:	
   362  00A0                     _sprintf$576:	
   363                           
   364                           ; 3 bytes @ 0x0
   365  00A0                     	ds	3
   366  00A3                     sprintf@ap:	
   367                           
   368                           ; 1 bytes @ 0x3
   369  00A3                     	ds	1
   370  00A4                     sprintf@flag:	
   371                           
   372                           ; 2 bytes @ 0x4
   373  00A4                     	ds	2
   374  00A6                     sprintf@val:	
   375                           
   376                           ; 4 bytes @ 0x6
   377  00A6                     	ds	4
   378  00AA                     sprintf@exp:	
   379                           
   380                           ; 2 bytes @ 0xA
   381  00AA                     	ds	2
   382  00AC                     sprintf@tmpval:	
   383                           
   384                           ; 4 bytes @ 0xC
   385  00AC                     	ds	4
   386  00B0                     sprintf@sp:	
   387                           
   388                           ; 1 bytes @ 0x10
   389  00B0                     	ds	1
   390  00B1                     sprintf@prec:	
   391                           
   392                           ; 2 bytes @ 0x11
   393  00B1                     	ds	2
   394  00B3                     sprintf@fval:	
   395                           
   396                           ; 3 bytes @ 0x13
   397  00B3                     	ds	3
   398  00B6                     sprintf@c:	
   399                           
   400                           ; 1 bytes @ 0x16
   401  00B6                     	ds	1
   402  00B7                     main@ad_tratado_lcd:	
   403                           
   404                           ; 16 bytes @ 0x17
   405  00B7                     	ds	16
   406  00C7                     main@AD_convertido:	
   407                           
   408                           ; 3 bytes @ 0x27
   409  00C7                     	ds	3
   410  00CA                     main@leitura:	
   411                           
   412                           ; 2 bytes @ 0x2A
   413  00CA                     	ds	2
   414  00CC                     main@a:	
   415                           
   416                           ; 2 bytes @ 0x2C
   417  00CC                     	ds	2
   418                           
   419                           	psect	cstackCOMMON
   420  0070                     __pcstackCOMMON:	
   421  0070                     ?_isdigit:	
   422  0070                     ?___ftge:	
   423                           ; 1 bit 
   424                           
   425  0070                     ??_isdigit:	
   426                           ; 1 bit 
   427                           
   428  0070                     ?_Lcd_Port:	
   429                           ; 1 bytes @ 0x0
   430                           
   431  0070                     ??_Lcd_Port:	
   432                           ; 1 bytes @ 0x0
   433                           
   434  0070                     ?_Lcd_Cmd:	
   435                           ; 1 bytes @ 0x0
   436                           
   437  0070                     ?_Lcd_Init:	
   438                           ; 1 bytes @ 0x0
   439                           
   440  0070                     ?_Lcd_Write_Char:	
   441                           ; 1 bytes @ 0x0
   442                           
   443  0070                     ?_Lcd_Shift_Left:	
   444                           ; 1 bytes @ 0x0
   445                           
   446  0070                     ?_ADC_Init:	
   447                           ; 1 bytes @ 0x0
   448                           
   449  0070                     ??_ADC_Init:	
   450                           ; 1 bytes @ 0x0
   451                           
   452  0070                     ?_Lcd_Clear:	
   453                           ; 1 bytes @ 0x0
   454                           
   455  0070                     ?_ADC_Read:	
   456                           ; 2 bytes @ 0x0
   457                           
   458  0070                     ?_main:	
   459                           ; 2 bytes @ 0x0
   460                           
   461  0070                     ?___wmul:	
   462                           ; 2 bytes @ 0x0
   463                           
   464  0070                     ?___awmod:	
   465                           ; 2 bytes @ 0x0
   466                           
   467  0070                     ?___ftpack:	
   468                           ; 2 bytes @ 0x0
   469                           
   470  0070                     ?___ftneg:	
   471                           ; 3 bytes @ 0x0
   472                           
   473  0070                     ?__tdiv_to_l_:	
   474                           ; 3 bytes @ 0x0
   475                           
   476  0070                     ?__div_to_l_:	
   477                           ; 4 bytes @ 0x0
   478                           
   479  0070                     ?___lldiv:	
   480                           ; 4 bytes @ 0x0
   481                           
   482  0070                     ?___llmod:	
   483                           ; 4 bytes @ 0x0
   484                           
   485  0070                     Lcd_Port@a:	
   486                           ; 4 bytes @ 0x0
   487                           
   488  0070                     _isdigit$346:	
   489                           ; 1 bytes @ 0x0
   490                           
   491  0070                     ___wmul@multiplier:	
   492                           ; 1 bytes @ 0x0
   493                           
   494  0070                     ___awmod@divisor:	
   495                           ; 2 bytes @ 0x0
   496                           
   497  0070                     __div_to_l_@f1:	
   498                           ; 2 bytes @ 0x0
   499                           
   500  0070                     ___ftpack@arg:	
   501                           ; 3 bytes @ 0x0
   502                           
   503  0070                     __tdiv_to_l_@f1:	
   504                           ; 3 bytes @ 0x0
   505                           
   506  0070                     ___ftge@ff1:	
   507                           ; 3 bytes @ 0x0
   508                           
   509  0070                     ___ftneg@f1:	
   510                           ; 3 bytes @ 0x0
   511                           
   512  0070                     ___lldiv@divisor:	
   513                           ; 3 bytes @ 0x0
   514                           
   515  0070                     ___llmod@divisor:	
   516                           ; 4 bytes @ 0x0
   517                           
   518                           
   519                           ; 4 bytes @ 0x0
   520  0070                     	ds	1
   521  0071                     ??_Lcd_Cmd:	
   522  0071                     ??_Lcd_Write_Char:	
   523                           ; 1 bytes @ 0x1
   524                           
   525  0071                     isdigit@c:	
   526                           ; 1 bytes @ 0x1
   527                           
   528                           
   529                           ; 1 bytes @ 0x1
   530  0071                     	ds	1
   531  0072                     ??_ADC_Read:	
   532  0072                     Lcd_Write_Char@temp:	
   533                           ; 1 bytes @ 0x2
   534                           
   535  0072                     ___wmul@multiplicand:	
   536                           ; 1 bytes @ 0x2
   537                           
   538  0072                     ___awmod@dividend:	
   539                           ; 2 bytes @ 0x2
   540                           
   541                           
   542                           ; 2 bytes @ 0x2
   543  0072                     	ds	1
   544  0073                     ??___ftneg:	
   545  0073                     Lcd_Cmd@a:	
   546                           ; 1 bytes @ 0x3
   547                           
   548  0073                     Lcd_Write_Char@y:	
   549                           ; 1 bytes @ 0x3
   550                           
   551  0073                     ___ftpack@exp:	
   552                           ; 1 bytes @ 0x3
   553                           
   554  0073                     __div_to_l_@f2:	
   555                           ; 1 bytes @ 0x3
   556                           
   557  0073                     __tdiv_to_l_@f2:	
   558                           ; 3 bytes @ 0x3
   559                           
   560  0073                     ___ftge@ff2:	
   561                           ; 3 bytes @ 0x3
   562                           
   563                           
   564                           ; 3 bytes @ 0x3
   565  0073                     	ds	1
   566  0074                     ??_Lcd_Clear:	
   567  0074                     ?_Lcd_Set_Cursor:	
   568                           ; 1 bytes @ 0x4
   569                           
   570  0074                     ??_Lcd_Init:	
   571                           ; 1 bytes @ 0x4
   572                           
   573  0074                     ??_Lcd_Shift_Left:	
   574                           ; 1 bytes @ 0x4
   575                           
   576  0074                     ??___wmul:	
   577                           ; 1 bytes @ 0x4
   578                           
   579  0074                     ??___awmod:	
   580                           ; 1 bytes @ 0x4
   581                           
   582  0074                     Lcd_Set_Cursor@b:	
   583                           ; 1 bytes @ 0x4
   584                           
   585  0074                     Lcd_Write_Char@a:	
   586                           ; 1 bytes @ 0x4
   587                           
   588  0074                     ADC_Read@channel:	
   589                           ; 1 bytes @ 0x4
   590                           
   591  0074                     ___ftpack@sign:	
   592                           ; 1 bytes @ 0x4
   593                           
   594  0074                     ___wmul@product:	
   595                           ; 1 bytes @ 0x4
   596                           
   597  0074                     ___lldiv@dividend:	
   598                           ; 2 bytes @ 0x4
   599                           
   600  0074                     ___llmod@dividend:	
   601                           ; 4 bytes @ 0x4
   602                           
   603                           
   604                           ; 4 bytes @ 0x4
   605  0074                     	ds	1
   606  0075                     ??___ftpack:	
   607  0075                     ??_Lcd_Set_Cursor:	
   608                           ; 1 bytes @ 0x5
   609                           
   610  0075                     ?_Lcd_Write_String:	
   611                           ; 1 bytes @ 0x5
   612                           
   613  0075                     ___awmod@counter:	
   614                           ; 1 bytes @ 0x5
   615                           
   616  0075                     Lcd_Write_String@a:	
   617                           ; 1 bytes @ 0x5
   618                           
   619                           
   620                           ; 2 bytes @ 0x5
   621  0075                     	ds	1
   622  0076                     ??__tdiv_to_l_:	
   623  0076                     ??__div_to_l_:	
   624                           ; 1 bytes @ 0x6
   625                           
   626  0076                     ??___ftge:	
   627                           ; 1 bytes @ 0x6
   628                           
   629  0076                     ___awmod@sign:	
   630                           ; 1 bytes @ 0x6
   631                           
   632                           
   633                           ; 1 bytes @ 0x6
   634  0076                     	ds	1
   635  0077                     ??_Lcd_Write_String:	
   636  0077                     ?___awdiv:	
   637                           ; 1 bytes @ 0x7
   638                           
   639  0077                     Lcd_Set_Cursor@a:	
   640                           ; 2 bytes @ 0x7
   641                           
   642  0077                     ___awdiv@divisor:	
   643                           ; 1 bytes @ 0x7
   644                           
   645                           
   646                           ; 2 bytes @ 0x7
   647  0077                     	ds	1
   648  0078                     ??___lldiv:	
   649  0078                     ??___llmod:	
   650                           ; 1 bytes @ 0x8
   651                           
   652  0078                     ?___lltoft:	
   653                           ; 1 bytes @ 0x8
   654                           
   655  0078                     ?___lwtoft:	
   656                           ; 3 bytes @ 0x8
   657                           
   658  0078                     Lcd_Set_Cursor@z:	
   659                           ; 3 bytes @ 0x8
   660                           
   661  0078                     ___lwtoft@c:	
   662                           ; 1 bytes @ 0x8
   663                           
   664  0078                     ___lltoft@c:	
   665                           ; 2 bytes @ 0x8
   666                           
   667                           
   668                           ; 4 bytes @ 0x8
   669  0078                     	ds	1
   670  0079                     Lcd_Set_Cursor@y:	
   671  0079                     ___llmod@counter:	
   672                           ; 1 bytes @ 0x9
   673                           
   674  0079                     ___awdiv@dividend:	
   675                           ; 1 bytes @ 0x9
   676                           
   677  0079                     ___lldiv@quotient:	
   678                           ; 2 bytes @ 0x9
   679                           
   680                           
   681                           ; 4 bytes @ 0x9
   682  0079                     	ds	1
   683  007A                     Lcd_Set_Cursor@temp:	
   684  007A                     Lcd_Write_String@i:	
   685                           ; 1 bytes @ 0xA
   686                           
   687                           
   688                           ; 2 bytes @ 0xA
   689  007A                     	ds	1
   690  007B                     ??___awdiv:	
   691  007B                     ??___lwtoft:	
   692                           ; 1 bytes @ 0xB
   693                           
   694                           
   695                           ; 1 bytes @ 0xB
   696  007B                     	ds	1
   697  007C                     ??___bmul:	
   698  007C                     ??___lltoft:	
   699                           ; 1 bytes @ 0xC
   700                           
   701                           
   702                           ; 1 bytes @ 0xC
   703  007C                     	ds	1
   704  007D                     ___lldiv@counter:	
   705  007D                     ___lltoft@exp:	
   706                           ; 1 bytes @ 0xD
   707                           
   708                           
   709                           ; 1 bytes @ 0xD
   710  007D                     	ds	1
   711  007E                     ??___ftsub:	
   712                           
   713                           	psect	cstackBANK0
   714  0020                     __pcstackBANK0:	
   715                           ; 1 bytes @ 0xE
   716                           
   717  0020                     ___awdiv@counter:	
   718  0020                     __div_to_l_@quot:	
   719                           ; 1 bytes @ 0x0
   720                           
   721  0020                     __tdiv_to_l_@quot:	
   722                           ; 4 bytes @ 0x0
   723                           
   724                           
   725                           ; 4 bytes @ 0x0
   726  0020                     	ds	1
   727  0021                     ___awdiv@sign:	
   728                           
   729                           ; 1 bytes @ 0x1
   730  0021                     	ds	1
   731  0022                     ___awdiv@quotient:	
   732                           
   733                           ; 2 bytes @ 0x2
   734  0022                     	ds	2
   735  0024                     ?___bmul:	
   736  0024                     ___bmul@multiplicand:	
   737                           ; 1 bytes @ 0x4
   738                           
   739  0024                     __div_to_l_@cntr:	
   740                           ; 1 bytes @ 0x4
   741                           
   742  0024                     __tdiv_to_l_@cntr:	
   743                           ; 1 bytes @ 0x4
   744                           
   745                           
   746                           ; 1 bytes @ 0x4
   747  0024                     	ds	1
   748  0025                     ___bmul@product:	
   749  0025                     __div_to_l_@exp1:	
   750                           ; 1 bytes @ 0x5
   751                           
   752  0025                     __tdiv_to_l_@exp1:	
   753                           ; 1 bytes @ 0x5
   754                           
   755                           
   756                           ; 1 bytes @ 0x5
   757  0025                     	ds	1
   758  0026                     ___bmul@multiplier:	
   759                           
   760                           ; 1 bytes @ 0x6
   761  0026                     	ds	1
   762  0027                     ?___ftmul:	
   763  0027                     ___ftmul@f1:	
   764                           ; 3 bytes @ 0x7
   765                           
   766                           
   767                           ; 3 bytes @ 0x7
   768  0027                     	ds	3
   769  002A                     ___ftmul@f2:	
   770                           
   771                           ; 3 bytes @ 0xA
   772  002A                     	ds	3
   773  002D                     ??___ftmul:	
   774                           
   775                           ; 1 bytes @ 0xD
   776  002D                     	ds	4
   777  0031                     ___ftmul@exp:	
   778                           
   779                           ; 1 bytes @ 0x11
   780  0031                     	ds	1
   781  0032                     ___ftmul@f3_as_product:	
   782                           
   783                           ; 3 bytes @ 0x12
   784  0032                     	ds	3
   785  0035                     ___ftmul@cntr:	
   786                           
   787                           ; 1 bytes @ 0x15
   788  0035                     	ds	1
   789  0036                     ___ftmul@sign:	
   790                           
   791                           ; 1 bytes @ 0x16
   792  0036                     	ds	1
   793  0037                     ?_fround:	
   794  0037                     ?_scale:	
   795                           ; 3 bytes @ 0x17
   796                           
   797                           
   798                           ; 3 bytes @ 0x17
   799  0037                     	ds	3
   800  003A                     ??_fround:	
   801  003A                     ??_scale:	
   802                           ; 1 bytes @ 0x1A
   803                           
   804                           
   805                           ; 1 bytes @ 0x1A
   806  003A                     	ds	2
   807  003C                     _scale$575:	
   808                           
   809                           ; 3 bytes @ 0x1C
   810  003C                     	ds	3
   811  003F                     scale@scl:	
   812                           
   813                           ; 1 bytes @ 0x1F
   814  003F                     	ds	1
   815  0040                     ?___fttol:	
   816  0040                     ___fttol@f1:	
   817                           ; 4 bytes @ 0x20
   818                           
   819  0040                     _fround$574:	
   820                           ; 3 bytes @ 0x20
   821                           
   822                           
   823                           ; 3 bytes @ 0x20
   824  0040                     	ds	3
   825  0043                     _fround$573:	
   826                           
   827                           ; 3 bytes @ 0x23
   828  0043                     	ds	1
   829  0044                     ??___fttol:	
   830                           
   831                           ; 1 bytes @ 0x24
   832  0044                     	ds	2
   833  0046                     fround@prec:	
   834                           
   835                           ; 1 bytes @ 0x26
   836  0046                     	ds	1
   837  0047                     ?___ftadd:	
   838  0047                     ___ftadd@f1:	
   839                           ; 3 bytes @ 0x27
   840                           
   841                           
   842                           ; 3 bytes @ 0x27
   843  0047                     	ds	1
   844  0048                     ___fttol@sign1:	
   845                           
   846                           ; 1 bytes @ 0x28
   847  0048                     	ds	1
   848  0049                     ___fttol@lval:	
   849                           
   850                           ; 4 bytes @ 0x29
   851  0049                     	ds	1
   852  004A                     ___ftadd@f2:	
   853                           
   854                           ; 3 bytes @ 0x2A
   855  004A                     	ds	3
   856  004D                     ??___ftadd:	
   857  004D                     ___fttol@exp1:	
   858                           ; 1 bytes @ 0x2D
   859                           
   860                           
   861                           ; 1 bytes @ 0x2D
   862  004D                     	ds	4
   863  0051                     ___ftadd@sign:	
   864                           
   865                           ; 1 bytes @ 0x31
   866  0051                     	ds	1
   867  0052                     ___ftadd@exp2:	
   868                           
   869                           ; 1 bytes @ 0x32
   870  0052                     	ds	1
   871  0053                     ___ftadd@exp1:	
   872                           
   873                           ; 1 bytes @ 0x33
   874  0053                     	ds	1
   875  0054                     ?___ftsub:	
   876  0054                     ___ftsub@f2:	
   877                           ; 3 bytes @ 0x34
   878                           
   879                           
   880                           ; 3 bytes @ 0x34
   881  0054                     	ds	3
   882  0057                     ___ftsub@f1:	
   883                           
   884                           ; 3 bytes @ 0x37
   885  0057                     	ds	3
   886  005A                     ?_sprintf:	
   887  005A                     sprintf@f:	
   888                           ; 2 bytes @ 0x3A
   889                           
   890                           
   891                           ; 1 bytes @ 0x3A
   892  005A                     	ds	4
   893  005E                     ??_sprintf:	
   894                           
   895                           ; 1 bytes @ 0x3E
   896  005E                     	ds	6
   897  0064                     ??_main:	
   898                           
   899                           ; 1 bytes @ 0x44
   900  0064                     	ds	3
   901                           
   902                           	psect	maintext
   903  0B1A                     __pmaintext:	
   904 ;;
   905 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   906 ;;
   907 ;; *************** function _main *****************
   908 ;; Defined at:
   909 ;;		line 45 in file "main.c"
   910 ;; Parameters:    Size  Location     Type
   911 ;;		None
   912 ;; Auto vars:     Size  Location     Type
   913 ;;  ad_tratado_l   16   23[BANK1 ] unsigned char [16]
   914 ;;  AD_convertid    3   39[BANK1 ] float 
   915 ;;  a               2   44[BANK1 ] unsigned int 
   916 ;;  leitura         2   42[BANK1 ] unsigned int 
   917 ;; Return value:  Size  Location     Type
   918 ;;                  2   91[None  ] int 
   919 ;; Registers used:
   920 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   921 ;; Tracked objects:
   922 ;;		On entry : B00/0
   923 ;;		On exit  : 0/0
   924 ;;		Unchanged: 0/0
   925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   926 ;;      Params:         0       0       0       0       0
   927 ;;      Locals:         0       0      23       0       0
   928 ;;      Temps:          0       3       0       0       0
   929 ;;      Totals:         0       3      23       0       0
   930 ;;Total ram usage:       26 bytes
   931 ;; Hardware stack levels required when called:    4
   932 ;; This function calls:
   933 ;;		_ADC_Init
   934 ;;		_ADC_Read
   935 ;;		_Lcd_Clear
   936 ;;		_Lcd_Init
   937 ;;		_Lcd_Set_Cursor
   938 ;;		_Lcd_Shift_Left
   939 ;;		_Lcd_Write_String
   940 ;;		___ftmul
   941 ;;		___lwtoft
   942 ;;		_sprintf
   943 ;; This function is called by:
   944 ;;		Startup code after reset
   945 ;; This function uses a non-reentrant model
   946 ;;
   947                           
   948                           
   949                           ;psect for function _main
   950  0B1A                     _main:	
   951                           
   952                           ;main.c: 47: unsigned int a;
   953                           ;main.c: 48: unsigned int leitura;
   954                           ;main.c: 49: float AD_convertido;
   955                           ;main.c: 50: char ad_tratado_lcd[16];
   956                           ;main.c: 52: TRISA = 0xFF;
   957                           
   958                           ;incstack = 0
   959                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   960  0B1A  30FF               	movlw	255
   961  0B1B  1683               	bsf	3,5	;RP0=1, select bank1
   962  0B1C  1303               	bcf	3,6	;RP1=0, select bank1
   963  0B1D  0085               	movwf	5	;volatile
   964                           
   965                           ;main.c: 53: TRISB = 0x00;
   966  0B1E  0186               	clrf	6	;volatile
   967                           
   968                           ;main.c: 54: TRISC = 0x00;
   969  0B1F  0187               	clrf	7	;volatile
   970                           
   971                           ;main.c: 55: TRISD = 0x00;
   972  0B20  0188               	clrf	8	;volatile
   973                           
   974                           ;main.c: 56: ADC_Init();
   975  0B21  160A  118A  23AD  120A  158A  	fcall	_ADC_Init
   976                           
   977                           ;main.c: 57: Lcd_Init();
   978  0B26  160A  118A  2601  120A  158A  	fcall	_Lcd_Init
   979                           
   980                           ;main.c: 59: Lcd_Clear();
   981  0B2B  160A  118A  23B6  120A  158A  	fcall	_Lcd_Clear
   982                           
   983                           ;main.c: 60: Lcd_Set_Cursor(1,1);
   984  0B30  01F4               	clrf	Lcd_Set_Cursor@b
   985  0B31  0AF4               	incf	Lcd_Set_Cursor@b,f
   986  0B32  3001               	movlw	1
   987  0B33  160A  118A  2520  120A  158A  	fcall	_Lcd_Set_Cursor
   988                           
   989                           ;main.c: 61: Lcd_Write_String("LCD e ADC");
   990  0B38  308D               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   991  0B39  00F5               	movwf	Lcd_Write_String@a
   992  0B3A  3080               	movlw	128
   993  0B3B  00F6               	movwf	Lcd_Write_String@a+1
   994  0B3C  160A  118A  24E3  120A  158A  	fcall	_Lcd_Write_String
   995                           
   996                           ;main.c: 62: Lcd_Set_Cursor(2,1);
   997  0B41  01F4               	clrf	Lcd_Set_Cursor@b
   998  0B42  0AF4               	incf	Lcd_Set_Cursor@b,f
   999  0B43  3002               	movlw	2
  1000  0B44  160A  118A  2520  120A  158A  	fcall	_Lcd_Set_Cursor
  1001                           
  1002                           ;main.c: 63: Lcd_Write_String("MPLAB XC8");
  1003  0B49  3083               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1004  0B4A  00F5               	movwf	Lcd_Write_String@a
  1005  0B4B  3080               	movlw	128
  1006  0B4C  00F6               	movwf	Lcd_Write_String@a+1
  1007  0B4D  160A  118A  24E3  120A  158A  	fcall	_Lcd_Write_String
  1008                           
  1009                           ;main.c: 64: _delay((unsigned long)((2000)*(8000000/4000.0)));
  1010  0B52  3015               	movlw	21
  1011  0B53  1283               	bcf	3,5	;RP0=0, select bank0
  1012  0B54  1303               	bcf	3,6	;RP1=0, select bank0
  1013  0B55  00E6               	movwf	??_main+2
  1014  0B56  304B               	movlw	75
  1015  0B57  00E5               	movwf	??_main+1
  1016  0B58  30BD               	movlw	189
  1017  0B59  00E4               	movwf	??_main
  1018  0B5A                     u3917:	
  1019  0B5A  0BE4               	decfsz	??_main,f
  1020  0B5B  2B5A               	goto	u3917
  1021  0B5C  0BE5               	decfsz	??_main+1,f
  1022  0B5D  2B5A               	goto	u3917
  1023  0B5E  0BE6               	decfsz	??_main+2,f
  1024  0B5F  2B5A               	goto	u3917
  1025  0B60  2B61               	nop2
  1026                           
  1027                           ;main.c: 67: for(a=0;a<15;a++)
  1028  0B61  1683               	bsf	3,5	;RP0=1, select bank1
  1029  0B62  1303               	bcf	3,6	;RP1=0, select bank1
  1030  0B63  01CC               	clrf	main@a^(0+128)
  1031  0B64  01CD               	clrf	(main@a+1)^(0+128)
  1032  0B65  3000               	movlw	0
  1033  0B66  024D               	subwf	(main@a+1)^(0+128),w
  1034  0B67  300F               	movlw	15
  1035  0B68  1903               	skipnz
  1036  0B69  024C               	subwf	main@a^(0+128),w
  1037  0B6A  1803               	btfsc	3,0
  1038  0B6B  2B8E               	goto	l2545
  1039  0B6C                     l2537:	
  1040                           
  1041                           ;main.c: 68: {
  1042                           ;main.c: 69: _delay((unsigned long)((300)*(8000000/4000.0)));
  1043  0B6C  3004               	movlw	4
  1044  0B6D  1283               	bcf	3,5	;RP0=0, select bank0
  1045  0B6E  1303               	bcf	3,6	;RP1=0, select bank0
  1046  0B6F  00E6               	movwf	??_main+2
  1047  0B70  300C               	movlw	12
  1048  0B71  00E5               	movwf	??_main+1
  1049  0B72  3033               	movlw	51
  1050  0B73  00E4               	movwf	??_main
  1051  0B74                     u3927:	
  1052  0B74  0BE4               	decfsz	??_main,f
  1053  0B75  2B74               	goto	u3927
  1054  0B76  0BE5               	decfsz	??_main+1,f
  1055  0B77  2B74               	goto	u3927
  1056  0B78  0BE6               	decfsz	??_main+2,f
  1057  0B79  2B74               	goto	u3927
  1058                           
  1059                           ;main.c: 70: Lcd_Shift_Left();
  1060  0B7A  160A  118A  23C1  120A  158A  	fcall	_Lcd_Shift_Left
  1061  0B7F  3001               	movlw	1
  1062  0B80  1683               	bsf	3,5	;RP0=1, select bank1
  1063  0B81  1303               	bcf	3,6	;RP1=0, select bank1
  1064  0B82  07CC               	addwf	main@a^(0+128),f
  1065  0B83  1803               	skipnc
  1066  0B84  0ACD               	incf	(main@a+1)^(0+128),f
  1067  0B85  3000               	movlw	0
  1068  0B86  07CD               	addwf	(main@a+1)^(0+128),f
  1069  0B87  3000               	movlw	0
  1070  0B88  024D               	subwf	(main@a+1)^(0+128),w
  1071  0B89  300F               	movlw	15
  1072  0B8A  1903               	skipnz
  1073  0B8B  024C               	subwf	main@a^(0+128),w
  1074  0B8C  1C03               	skipc
  1075  0B8D  2B6C               	goto	l2537
  1076  0B8E                     l2545:	
  1077                           
  1078                           ;main.c: 71: }
  1079                           ;main.c: 73: Lcd_Clear();
  1080  0B8E  160A  118A  23B6  120A  158A  	fcall	_Lcd_Clear
  1081                           
  1082                           ;main.c: 74: Lcd_Set_Cursor(1,1);
  1083  0B93  01F4               	clrf	Lcd_Set_Cursor@b
  1084  0B94  0AF4               	incf	Lcd_Set_Cursor@b,f
  1085  0B95  3001               	movlw	1
  1086  0B96  160A  118A  2520  120A  158A  	fcall	_Lcd_Set_Cursor
  1087                           
  1088                           ;main.c: 75: Lcd_Write_String("Leitura ADC");
  1089  0B9B  3077               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1090  0B9C  00F5               	movwf	Lcd_Write_String@a
  1091  0B9D  3080               	movlw	128
  1092  0B9E  00F6               	movwf	Lcd_Write_String@a+1
  1093  0B9F  160A  118A  24E3  120A  158A  	fcall	_Lcd_Write_String
  1094  0BA4                     l2549:	
  1095                           ;main.c: 78: while(1)
  1096                           
  1097                           
  1098                           ;main.c: 79: {
  1099                           ;main.c: 83: leitura = ADC_Read(0);
  1100  0BA4  3000               	movlw	0
  1101  0BA5  160A  118A  247A  120A  158A  	fcall	_ADC_Read
  1102  0BAA  0871               	movf	?_ADC_Read+1,w
  1103  0BAB  1683               	bsf	3,5	;RP0=1, select bank1
  1104  0BAC  1303               	bcf	3,6	;RP1=0, select bank1
  1105  0BAD  00CB               	movwf	(main@leitura+1)^(0+128)
  1106  0BAE  0870               	movf	?_ADC_Read,w
  1107  0BAF  00CA               	movwf	main@leitura^(0+128)
  1108                           
  1109                           ;main.c: 84: PORTB = leitura;
  1110  0BB0  084A               	movf	main@leitura^(0+128),w
  1111  0BB1  1283               	bcf	3,5	;RP0=0, select bank0
  1112  0BB2  1303               	bcf	3,6	;RP1=0, select bank0
  1113  0BB3  0086               	movwf	6	;volatile
  1114                           
  1115                           ;main.c: 85: _delay((unsigned long)((100)*(8000000/4000.0)));
  1116  0BB4  3002               	movlw	2
  1117  0BB5  1283               	bcf	3,5	;RP0=0, select bank0
  1118  0BB6  1303               	bcf	3,6	;RP1=0, select bank0
  1119  0BB7  00E6               	movwf	??_main+2
  1120  0BB8  3004               	movlw	4
  1121  0BB9  00E5               	movwf	??_main+1
  1122  0BBA  30B9               	movlw	185
  1123  0BBB  00E4               	movwf	??_main
  1124  0BBC                     u3937:	
  1125  0BBC  0BE4               	decfsz	??_main,f
  1126  0BBD  2BBC               	goto	u3937
  1127  0BBE  0BE5               	decfsz	??_main+1,f
  1128  0BBF  2BBC               	goto	u3937
  1129  0BC0  0BE6               	decfsz	??_main+2,f
  1130  0BC1  2BBC               	goto	u3937
  1131  0BC2  2BC3               	nop2
  1132                           
  1133                           ;main.c: 86: AD_convertido = leitura * 0.00488;
  1134  0BC3  30E8               	movlw	232
  1135  0BC4  1283               	bcf	3,5	;RP0=0, select bank0
  1136  0BC5  1303               	bcf	3,6	;RP1=0, select bank0
  1137  0BC6  00A7               	movwf	___ftmul@f1
  1138  0BC7  309F               	movlw	159
  1139  0BC8  00A8               	movwf	___ftmul@f1+1
  1140  0BC9  303B               	movlw	59
  1141  0BCA  00A9               	movwf	___ftmul@f1+2
  1142  0BCB  1683               	bsf	3,5	;RP0=1, select bank1
  1143  0BCC  1303               	bcf	3,6	;RP1=0, select bank1
  1144  0BCD  084B               	movf	(main@leitura+1)^(0+128),w
  1145  0BCE  00F9               	movwf	___lwtoft@c+1
  1146  0BCF  084A               	movf	main@leitura^(0+128),w
  1147  0BD0  00F8               	movwf	___lwtoft@c
  1148  0BD1  160A  118A  23DF  120A  158A  	fcall	___lwtoft
  1149  0BD6  0878               	movf	?___lwtoft,w
  1150  0BD7  1283               	bcf	3,5	;RP0=0, select bank0
  1151  0BD8  1303               	bcf	3,6	;RP1=0, select bank0
  1152  0BD9  00AA               	movwf	___ftmul@f2
  1153  0BDA  0879               	movf	?___lwtoft+1,w
  1154  0BDB  00AB               	movwf	___ftmul@f2+1
  1155  0BDC  087A               	movf	?___lwtoft+2,w
  1156  0BDD  00AC               	movwf	___ftmul@f2+2
  1157  0BDE  120A  158A  213E  120A  158A  	fcall	___ftmul
  1158  0BE3  1283               	bcf	3,5	;RP0=0, select bank0
  1159  0BE4  1303               	bcf	3,6	;RP1=0, select bank0
  1160  0BE5  0827               	movf	?___ftmul,w
  1161  0BE6  1683               	bsf	3,5	;RP0=1, select bank1
  1162  0BE7  1303               	bcf	3,6	;RP1=0, select bank1
  1163  0BE8  00C7               	movwf	main@AD_convertido^(0+128)
  1164  0BE9  1283               	bcf	3,5	;RP0=0, select bank0
  1165  0BEA  1303               	bcf	3,6	;RP1=0, select bank0
  1166  0BEB  0828               	movf	?___ftmul+1,w
  1167  0BEC  1683               	bsf	3,5	;RP0=1, select bank1
  1168  0BED  1303               	bcf	3,6	;RP1=0, select bank1
  1169  0BEE  00C8               	movwf	(main@AD_convertido+1)^(0+128)
  1170  0BEF  1283               	bcf	3,5	;RP0=0, select bank0
  1171  0BF0  1303               	bcf	3,6	;RP1=0, select bank0
  1172  0BF1  0829               	movf	?___ftmul+2,w
  1173  0BF2  1683               	bsf	3,5	;RP0=1, select bank1
  1174  0BF3  1303               	bcf	3,6	;RP1=0, select bank1
  1175  0BF4  00C9               	movwf	(main@AD_convertido+2)^(0+128)
  1176                           
  1177                           ;main.c: 90: Lcd_Set_Cursor(2,1);
  1178  0BF5  01F4               	clrf	Lcd_Set_Cursor@b
  1179  0BF6  0AF4               	incf	Lcd_Set_Cursor@b,f
  1180  0BF7  3002               	movlw	2
  1181  0BF8  160A  118A  2520  120A  158A  	fcall	_Lcd_Set_Cursor
  1182                           
  1183                           ;main.c: 91: sprintf(ad_tratado_lcd,"%.3f V",AD_convertido);
  1184  0BFD  3097               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1185  0BFE  1283               	bcf	3,5	;RP0=0, select bank0
  1186  0BFF  1303               	bcf	3,6	;RP1=0, select bank0
  1187  0C00  00E4               	movwf	??_main
  1188  0C01  0864               	movf	??_main,w
  1189  0C02  00DA               	movwf	sprintf@f
  1190  0C03  1683               	bsf	3,5	;RP0=1, select bank1
  1191  0C04  1303               	bcf	3,6	;RP1=0, select bank1
  1192  0C05  0847               	movf	main@AD_convertido^(0+128),w
  1193  0C06  1283               	bcf	3,5	;RP0=0, select bank0
  1194  0C07  1303               	bcf	3,6	;RP1=0, select bank0
  1195  0C08  00DB               	movwf	?_sprintf+1
  1196  0C09  1683               	bsf	3,5	;RP0=1, select bank1
  1197  0C0A  1303               	bcf	3,6	;RP1=0, select bank1
  1198  0C0B  0848               	movf	(main@AD_convertido+1)^(0+128),w
  1199  0C0C  1283               	bcf	3,5	;RP0=0, select bank0
  1200  0C0D  1303               	bcf	3,6	;RP1=0, select bank0
  1201  0C0E  00DC               	movwf	?_sprintf+2
  1202  0C0F  1683               	bsf	3,5	;RP0=1, select bank1
  1203  0C10  1303               	bcf	3,6	;RP1=0, select bank1
  1204  0C11  0849               	movf	(main@AD_convertido+2)^(0+128),w
  1205  0C12  1283               	bcf	3,5	;RP0=0, select bank0
  1206  0C13  1303               	bcf	3,6	;RP1=0, select bank0
  1207  0C14  00DD               	movwf	?_sprintf+3
  1208  0C15  30B7               	movlw	(low (main@ad_tratado_lcd| 0))& (0+255)
  1209  0C16  120A  118A  21B8  120A  158A  	fcall	_sprintf
  1210                           
  1211                           ;main.c: 92: Lcd_Write_String(ad_tratado_lcd);
  1212  0C1B  30B7               	movlw	(low (main@ad_tratado_lcd| 0))& (0+255)
  1213  0C1C  00F5               	movwf	Lcd_Write_String@a
  1214  0C1D  3000               	movlw	0
  1215  0C1E  00F6               	movwf	Lcd_Write_String@a+1
  1216  0C1F  160A  118A  24E3  120A  158A  	fcall	_Lcd_Write_String
  1217                           
  1218                           ;main.c: 93: _delay((unsigned long)((500)*(8000000/4000.0)));
  1219  0C24  3006               	movlw	6
  1220  0C25  1283               	bcf	3,5	;RP0=0, select bank0
  1221  0C26  1303               	bcf	3,6	;RP1=0, select bank0
  1222  0C27  00E6               	movwf	??_main+2
  1223  0C28  3013               	movlw	19
  1224  0C29  00E5               	movwf	??_main+1
  1225  0C2A  30AD               	movlw	173
  1226  0C2B  00E4               	movwf	??_main
  1227  0C2C                     u3947:	
  1228  0C2C  0BE4               	decfsz	??_main,f
  1229  0C2D  2C2C               	goto	u3947
  1230  0C2E  0BE5               	decfsz	??_main+1,f
  1231  0C2F  2C2C               	goto	u3947
  1232  0C30  0BE6               	decfsz	??_main+2,f
  1233  0C31  2C2C               	goto	u3947
  1234  0C32  2BA4               	goto	l2549
  1235  0C33                     __end_of_main:	
  1236                           ;main.c: 96: }
  1237                           ;main.c: 97: return 0;
  1238                           ;	Return value of _main is never used
  1239                           
  1240                           
  1241                           	psect	text1
  1242  01B8                     __ptext1:	
  1243 ;; *************** function _sprintf *****************
  1244 ;; Defined at:
  1245 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1246 ;; Parameters:    Size  Location     Type
  1247 ;;  sp              1    wreg     PTR unsigned char 
  1248 ;;		 -> main@ad_tratado_lcd(16), 
  1249 ;;  f               1   58[BANK0 ] PTR const unsigned char 
  1250 ;;		 -> STR_4(7), 
  1251 ;; Auto vars:     Size  Location     Type
  1252 ;;  sp              1   16[BANK1 ] PTR unsigned char 
  1253 ;;		 -> main@ad_tratado_lcd(16), 
  1254 ;;  tmpval          4   12[BANK1 ] struct .
  1255 ;;  val             4    6[BANK1 ] unsigned long 
  1256 ;;  fval            3   19[BANK1 ] unsigned long 
  1257 ;;  prec            2   17[BANK1 ] int 
  1258 ;;  exp             2   10[BANK1 ] int 
  1259 ;;  flag            2    4[BANK1 ] unsigned short 
  1260 ;;  cp              2    0        PTR const unsigned char 
  1261 ;;  len             2    0        unsigned int 
  1262 ;;  width           2    0        int 
  1263 ;;  c               1   22[BANK1 ] char 
  1264 ;;  ap              1    3[BANK1 ] PTR void [1]
  1265 ;;		 -> ?_sprintf(2), 
  1266 ;;  d               1    0        unsigned char 
  1267 ;; Return value:  Size  Location     Type
  1268 ;;                  2   58[BANK0 ] int 
  1269 ;; Registers used:
  1270 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1271 ;; Tracked objects:
  1272 ;;		On entry : 0/0
  1273 ;;		On exit  : 0/0
  1274 ;;		Unchanged: 0/0
  1275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1276 ;;      Params:         0       4       0       0       0
  1277 ;;      Locals:         0       0      23       0       0
  1278 ;;      Temps:          0       6       0       0       0
  1279 ;;      Totals:         0      10      23       0       0
  1280 ;;Total ram usage:       33 bytes
  1281 ;; Hardware stack levels used:    1
  1282 ;; Hardware stack levels required when called:    3
  1283 ;; This function calls:
  1284 ;;		___awdiv
  1285 ;;		___ftadd
  1286 ;;		___ftge
  1287 ;;		___ftmul
  1288 ;;		___ftneg
  1289 ;;		___ftsub
  1290 ;;		___fttol
  1291 ;;		___lldiv
  1292 ;;		___llmod
  1293 ;;		___lltoft
  1294 ;;		___wmul
  1295 ;;		__div_to_l_
  1296 ;;		__tdiv_to_l_
  1297 ;;		_fround
  1298 ;;		_isdigit
  1299 ;;		_scale
  1300 ;; This function is called by:
  1301 ;;		_main
  1302 ;; This function uses a non-reentrant model
  1303 ;;
  1304                           
  1305                           
  1306                           ;psect for function _sprintf
  1307  01B8                     _sprintf:	
  1308                           
  1309                           ;incstack = 0
  1310                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1311                           ;sprintf@sp stored from wreg
  1312  01B8  1683               	bsf	3,5	;RP0=1, select bank1
  1313  01B9  1303               	bcf	3,6	;RP1=0, select bank1
  1314  01BA  00B0               	movwf	sprintf@sp^(0+128)
  1315                           
  1316                           ;doprnt.c: 494: va_list ap;
  1317                           ;doprnt.c: 499: signed char c;
  1318                           ;doprnt.c: 501: int width;
  1319                           ;doprnt.c: 504: int prec;
  1320                           ;doprnt.c: 508: unsigned short flag;
  1321                           ;doprnt.c: 515: char d;
  1322                           ;doprnt.c: 516: double fval;
  1323                           ;doprnt.c: 517: int exp;
  1324                           ;doprnt.c: 523: union {
  1325                           ;doprnt.c: 524: unsigned long vd;
  1326                           ;doprnt.c: 525: double integ;
  1327                           ;doprnt.c: 526: } tmpval;
  1328                           ;doprnt.c: 528: unsigned long val;
  1329                           ;doprnt.c: 529: unsigned len;
  1330                           ;doprnt.c: 530: const char * cp;
  1331                           ;doprnt.c: 533: *ap = __va_start();
  1332  01BB  305B               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1333  01BC  1283               	bcf	3,5	;RP0=0, select bank0
  1334  01BD  1303               	bcf	3,6	;RP1=0, select bank0
  1335  01BE  00DE               	movwf	??_sprintf
  1336  01BF  085E               	movf	??_sprintf,w
  1337  01C0  1683               	bsf	3,5	;RP0=1, select bank1
  1338  01C1  1303               	bcf	3,6	;RP1=0, select bank1
  1339  01C2  00A3               	movwf	sprintf@ap^(0+128)
  1340  01C3                     l2495:	
  1341                           ;doprnt.c: 536: while(c = *f++) {
  1342                           
  1343  01C3  3001               	movlw	1
  1344  01C4  1283               	bcf	3,5	;RP0=0, select bank0
  1345  01C5  07DA               	addwf	sprintf@f,f
  1346  01C6  30FF               	movlw	-1
  1347  01C7  075A               	addwf	sprintf@f,w
  1348  01C8  0084               	movwf	4
  1349  01C9  160A  118A  200A  120A  118A  	fcall	stringdir
  1350  01CE  00DE               	movwf	??_sprintf
  1351  01CF  085E               	movf	??_sprintf,w
  1352  01D0  1683               	bsf	3,5	;RP0=1, select bank1
  1353  01D1  1303               	bcf	3,6	;RP1=0, select bank1
  1354  01D2  00B6               	movwf	sprintf@c^(0+128)
  1355  01D3  0836               	movf	sprintf@c^(0+128),w
  1356  01D4  1903               	btfsc	3,2
  1357  01D5  2FF7               	goto	l2497
  1358                           
  1359                           ;doprnt.c: 538: if(c != '%')
  1360  01D6  3025               	movlw	37
  1361  01D7  0636               	xorwf	sprintf@c^(0+128),w
  1362  01D8  1903               	btfsc	3,2
  1363  01D9  29DE               	goto	l2315
  1364                           
  1365                           ;doprnt.c: 540: {
  1366                           ;doprnt.c: 541: ((*sp++ = (c)));
  1367  01DA  0836               	movf	sprintf@c^(0+128),w
  1368  01DB  1283               	bcf	3,5	;RP0=0, select bank0
  1369  01DC  1303               	bcf	3,6	;RP1=0, select bank0
  1370  01DD  2FE6               	goto	L6
  1371  01DE                     l2315:	
  1372                           ;doprnt.c: 542: continue;
  1373                           
  1374                           
  1375                           ;doprnt.c: 543: }
  1376                           ;doprnt.c: 548: flag = 0;
  1377  01DE  01A4               	clrf	sprintf@flag^(0+128)
  1378  01DF  01A5               	clrf	(sprintf@flag+1)^(0+128)
  1379                           
  1380                           ;doprnt.c: 611: if(*f == '.') {
  1381  01E0  1283               	bcf	3,5	;RP0=0, select bank0
  1382  01E1  1303               	bcf	3,6	;RP1=0, select bank0
  1383  01E2  085A               	movf	sprintf@f,w
  1384  01E3  0084               	movwf	4
  1385  01E4  160A  118A  200A  120A  118A  	fcall	stringdir
  1386  01E9  3A2E               	xorlw	46
  1387  01EA  1D03               	skipz
  1388  01EB  2A3C               	goto	l2331
  1389                           
  1390                           ;doprnt.c: 612: flag |= 0x4000;
  1391  01EC  1683               	bsf	3,5	;RP0=1, select bank1
  1392  01ED  1303               	bcf	3,6	;RP1=0, select bank1
  1393  01EE  1725               	bsf	(sprintf@flag^(0+128)+1),6
  1394                           
  1395                           ;doprnt.c: 613: f++;
  1396  01EF  3001               	movlw	1
  1397  01F0  1283               	bcf	3,5	;RP0=0, select bank0
  1398  01F1  1303               	bcf	3,6	;RP1=0, select bank0
  1399  01F2  00DE               	movwf	??_sprintf
  1400  01F3  085E               	movf	??_sprintf,w
  1401  01F4  07DA               	addwf	sprintf@f,f
  1402                           
  1403                           ;doprnt.c: 620: {
  1404                           ;doprnt.c: 621: prec = 0;
  1405  01F5  1683               	bsf	3,5	;RP0=1, select bank1
  1406  01F6  1303               	bcf	3,6	;RP1=0, select bank1
  1407  01F7  01B1               	clrf	sprintf@prec^(0+128)
  1408  01F8  01B2               	clrf	(sprintf@prec+1)^(0+128)
  1409  01F9                     l2329:	
  1410                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1411                           
  1412  01F9  1283               	bcf	3,5	;RP0=0, select bank0
  1413  01FA  085A               	movf	sprintf@f,w
  1414  01FB  0084               	movwf	4
  1415  01FC  160A  118A  200A  120A  118A  	fcall	stringdir
  1416  0201  120A  158A  2001  120A  118A  	fcall	_isdigit
  1417  0206  1C03               	btfss	3,0
  1418  0207  2A44               	goto	l2337
  1419                           
  1420                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1421  0208  1683               	bsf	3,5	;RP0=1, select bank1
  1422  0209  1303               	bcf	3,6	;RP1=0, select bank1
  1423  020A  0832               	movf	(sprintf@prec+1)^(0+128),w
  1424  020B  00F1               	movwf	___wmul@multiplier+1
  1425  020C  0831               	movf	sprintf@prec^(0+128),w
  1426  020D  00F0               	movwf	___wmul@multiplier
  1427  020E  300A               	movlw	10
  1428  020F  00F2               	movwf	___wmul@multiplicand
  1429  0210  3000               	movlw	0
  1430  0211  00F3               	movwf	___wmul@multiplicand+1
  1431  0212  160A  118A  242E  120A  118A  	fcall	___wmul
  1432  0217  1283               	bcf	3,5	;RP0=0, select bank0
  1433  0218  1303               	bcf	3,6	;RP1=0, select bank0
  1434  0219  085A               	movf	sprintf@f,w
  1435  021A  0084               	movwf	4
  1436  021B  160A  118A  200A  120A  118A  	fcall	stringdir
  1437  0220  0770               	addwf	?___wmul,w
  1438  0221  00DE               	movwf	??_sprintf
  1439  0222  3000               	movlw	0
  1440  0223  1803               	skipnc
  1441  0224  3001               	movlw	1
  1442  0225  0771               	addwf	?___wmul+1,w
  1443  0226  00DF               	movwf	??_sprintf+1
  1444  0227  085E               	movf	??_sprintf,w
  1445  0228  3ED0               	addlw	208
  1446  0229  1683               	bsf	3,5	;RP0=1, select bank1
  1447  022A  1303               	bcf	3,6	;RP1=0, select bank1
  1448  022B  00B1               	movwf	sprintf@prec^(0+128)
  1449  022C  1283               	bcf	3,5	;RP0=0, select bank0
  1450  022D  1303               	bcf	3,6	;RP1=0, select bank0
  1451  022E  085F               	movf	??_sprintf+1,w
  1452  022F  1803               	skipnc
  1453  0230  3E01               	addlw	1
  1454  0231  3EFF               	addlw	255
  1455  0232  1683               	bsf	3,5	;RP0=1, select bank1
  1456  0233  1303               	bcf	3,6	;RP1=0, select bank1
  1457  0234  00B2               	movwf	(sprintf@prec+1)^(0+128)
  1458  0235  3001               	movlw	1
  1459  0236  1283               	bcf	3,5	;RP0=0, select bank0
  1460  0237  1303               	bcf	3,6	;RP1=0, select bank0
  1461  0238  00DE               	movwf	??_sprintf
  1462  0239  085E               	movf	??_sprintf,w
  1463  023A  07DA               	addwf	sprintf@f,f
  1464  023B  29F9               	goto	l2329
  1465  023C                     l2331:	
  1466                           ;doprnt.c: 624: }
  1467                           ;doprnt.c: 625: } else {
  1468                           
  1469                           
  1470                           ;doprnt.c: 626: prec = 0;
  1471  023C  1683               	bsf	3,5	;RP0=1, select bank1
  1472  023D  1303               	bcf	3,6	;RP1=0, select bank1
  1473  023E  01B1               	clrf	sprintf@prec^(0+128)
  1474  023F  01B2               	clrf	(sprintf@prec+1)^(0+128)
  1475                           
  1476                           ;doprnt.c: 628: flag |= 0x1000;
  1477  0240  1625               	bsf	(sprintf@flag^(0+128)+1),4
  1478                           
  1479                           ;doprnt.c: 630: }
  1480                           ;doprnt.c: 635: switch(c = *f++) {
  1481  0241  2A44               	goto	l2337
  1482  0242                     l143:	
  1483                           ;doprnt.c: 662: case 'f':
  1484                           
  1485                           ;doprnt.c: 638: goto alldone;
  1486                           
  1487                           ;doprnt.c: 637: case 0:
  1488                           
  1489                           
  1490                           ;doprnt.c: 663: flag |= 0x400;
  1491  0242  1525               	bsf	(sprintf@flag^(0+128)+1),2
  1492                           
  1493                           ;doprnt.c: 664: break;
  1494  0243  2A5A               	goto	l2339
  1495  0244                     l2337:	
  1496                           ;doprnt.c: 822: }
  1497                           
  1498                           ;doprnt.c: 813: continue;
  1499                           
  1500                           ;doprnt.c: 802: default:
  1501                           
  1502  0244  3001               	movlw	1
  1503  0245  1283               	bcf	3,5	;RP0=0, select bank0
  1504  0246  1303               	bcf	3,6	;RP1=0, select bank0
  1505  0247  07DA               	addwf	sprintf@f,f
  1506  0248  30FF               	movlw	-1
  1507  0249  075A               	addwf	sprintf@f,w
  1508  024A  0084               	movwf	4
  1509  024B  160A  118A  200A  120A  118A  	fcall	stringdir
  1510  0250  1683               	bsf	3,5	;RP0=1, select bank1
  1511  0251  1303               	bcf	3,6	;RP1=0, select bank1
  1512  0252  00B6               	movwf	sprintf@c^(0+128)
  1513                           
  1514                           ; Switch size 1, requested type "space"
  1515                           ; Number of cases is 2, Range of values is 0 to 102
  1516                           ; switch strategies available:
  1517                           ; Name         Instructions Cycles
  1518                           ; simple_byte            7     4 (average)
  1519                           ; jumptable            260     6 (fixed)
  1520                           ;	Chosen strategy is simple_byte
  1521  0253  3A00               	xorlw	0	; case 0
  1522  0254  1903               	skipnz
  1523  0255  2FF7               	goto	l2497
  1524  0256  3A66               	xorlw	102	; case 102
  1525  0257  1903               	skipnz
  1526  0258  2A42               	goto	l143
  1527  0259  29C3               	goto	l2495
  1528  025A                     l2339:	
  1529                           
  1530                           ;doprnt.c: 825: if(flag & (0x700)) {
  1531  025A  3000               	movlw	0
  1532  025B  0524               	andwf	sprintf@flag^(0+128),w
  1533  025C  1283               	bcf	3,5	;RP0=0, select bank0
  1534  025D  1303               	bcf	3,6	;RP1=0, select bank0
  1535  025E  00DE               	movwf	??_sprintf
  1536  025F  3007               	movlw	7
  1537  0260  1683               	bsf	3,5	;RP0=1, select bank1
  1538  0261  1303               	bcf	3,6	;RP1=0, select bank1
  1539  0262  0525               	andwf	(sprintf@flag+1)^(0+128),w
  1540  0263  1283               	bcf	3,5	;RP0=0, select bank0
  1541  0264  1303               	bcf	3,6	;RP1=0, select bank0
  1542  0265  00DF               	movwf	??_sprintf+1
  1543  0266  085E               	movf	??_sprintf,w
  1544  0267  045F               	iorwf	??_sprintf+1,w
  1545  0268  1903               	btfsc	3,2
  1546  0269  2F79               	goto	l2479
  1547                           
  1548                           ;doprnt.c: 827: if(flag & 0x1000)
  1549  026A  1683               	bsf	3,5	;RP0=1, select bank1
  1550  026B  1303               	bcf	3,6	;RP1=0, select bank1
  1551  026C  1E25               	btfss	(sprintf@flag+1)^(0+128),4
  1552  026D  2A72               	goto	l2345
  1553                           
  1554                           ;doprnt.c: 829: prec = 6;
  1555  026E  3006               	movlw	6
  1556  026F  00B1               	movwf	sprintf@prec^(0+128)
  1557  0270  3000               	movlw	0
  1558  0271  00B2               	movwf	(sprintf@prec^(0+128)+1)
  1559  0272                     l2345:	
  1560                           
  1561                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1562  0272  0823               	movf	sprintf@ap^(0+128),w
  1563  0273  0084               	movwf	4
  1564  0274  1383               	bcf	3,7	;select IRP bank0
  1565  0275  0800               	movf	0,w
  1566  0276  00B3               	movwf	sprintf@fval^(0+128)
  1567  0277  0A84               	incf	4,f
  1568  0278  0800               	movf	0,w
  1569  0279  00B4               	movwf	(sprintf@fval+1)^(0+128)
  1570  027A  0A84               	incf	4,f
  1571  027B  0800               	movf	0,w
  1572  027C  00B5               	movwf	(sprintf@fval+2)^(0+128)
  1573  027D  3003               	movlw	3
  1574  027E  1283               	bcf	3,5	;RP0=0, select bank0
  1575  027F  1303               	bcf	3,6	;RP1=0, select bank0
  1576  0280  00DE               	movwf	??_sprintf
  1577  0281  085E               	movf	??_sprintf,w
  1578  0282  1683               	bsf	3,5	;RP0=1, select bank1
  1579  0283  1303               	bcf	3,6	;RP1=0, select bank1
  1580  0284  07A3               	addwf	sprintf@ap^(0+128),f
  1581                           
  1582                           ;doprnt.c: 831: if(fval < 0.0) {
  1583  0285  0833               	movf	sprintf@fval^(0+128),w
  1584  0286  00F0               	movwf	___ftge@ff1
  1585  0287  0834               	movf	(sprintf@fval+1)^(0+128),w
  1586  0288  00F1               	movwf	___ftge@ff1+1
  1587  0289  0835               	movf	(sprintf@fval+2)^(0+128),w
  1588  028A  00F2               	movwf	___ftge@ff1+2
  1589  028B  3000               	movlw	0
  1590  028C  00F3               	movwf	___ftge@ff2
  1591  028D  3000               	movlw	0
  1592  028E  00F4               	movwf	___ftge@ff2+1
  1593  028F  3000               	movlw	0
  1594  0290  00F5               	movwf	___ftge@ff2+2
  1595  0291  160A  118A  26B7  120A  118A  	fcall	___ftge
  1596  0296  1803               	btfsc	3,0
  1597  0297  2AB1               	goto	l2355
  1598                           
  1599                           ;doprnt.c: 832: fval = -fval;
  1600  0298  1683               	bsf	3,5	;RP0=1, select bank1
  1601  0299  1303               	bcf	3,6	;RP1=0, select bank1
  1602  029A  0833               	movf	sprintf@fval^(0+128),w
  1603  029B  00F0               	movwf	___ftneg@f1
  1604  029C  0834               	movf	(sprintf@fval+1)^(0+128),w
  1605  029D  00F1               	movwf	___ftneg@f1+1
  1606  029E  0835               	movf	(sprintf@fval+2)^(0+128),w
  1607  029F  00F2               	movwf	___ftneg@f1+2
  1608  02A0  160A  118A  23A5  120A  118A  	fcall	___ftneg
  1609  02A5  0870               	movf	?___ftneg,w
  1610  02A6  1683               	bsf	3,5	;RP0=1, select bank1
  1611  02A7  1303               	bcf	3,6	;RP1=0, select bank1
  1612  02A8  00B3               	movwf	sprintf@fval^(0+128)
  1613  02A9  0871               	movf	?___ftneg+1,w
  1614  02AA  00B4               	movwf	(sprintf@fval+1)^(0+128)
  1615  02AB  0872               	movf	?___ftneg+2,w
  1616  02AC  00B5               	movwf	(sprintf@fval+2)^(0+128)
  1617                           
  1618                           ;doprnt.c: 833: flag |= 0x03;
  1619  02AD  3003               	movlw	3
  1620  02AE  04A4               	iorwf	sprintf@flag^(0+128),f
  1621  02AF  3000               	movlw	0
  1622  02B0  04A5               	iorwf	(sprintf@flag+1)^(0+128),f
  1623  02B1                     l2355:	
  1624                           
  1625                           ;doprnt.c: 834: }
  1626                           ;doprnt.c: 835: exp = 0;
  1627  02B1  1683               	bsf	3,5	;RP0=1, select bank1
  1628  02B2  1303               	bcf	3,6	;RP1=0, select bank1
  1629  02B3  01AA               	clrf	sprintf@exp^(0+128)
  1630  02B4  01AB               	clrf	(sprintf@exp+1)^(0+128)
  1631                           
  1632                           ;doprnt.c: 836: if( fval!=0) {
  1633  02B5  0835               	movf	(sprintf@fval+2)^(0+128),w
  1634  02B6  0434               	iorwf	(sprintf@fval+1)^(0+128),w
  1635  02B7  0433               	iorwf	sprintf@fval^(0+128),w
  1636  02B8  1903               	skipnz
  1637  02B9  2BA5               	goto	l2383
  1638                           
  1639                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1640  02BA  30B3               	movlw	low (sprintf@fval| 0)
  1641  02BB  0084               	movwf	4
  1642  02BC  1383               	bcf	3,7	;select IRP bank1
  1643  02BD  0800               	movf	0,w
  1644  02BE  1283               	bcf	3,5	;RP0=0, select bank0
  1645  02BF  1303               	bcf	3,6	;RP1=0, select bank0
  1646  02C0  00DE               	movwf	??_sprintf
  1647  02C1  0A84               	incf	4,f
  1648  02C2  0800               	movf	0,w
  1649  02C3  00DF               	movwf	??_sprintf+1
  1650  02C4  0A84               	incf	4,f
  1651  02C5  0800               	movf	0,w
  1652  02C6  00E0               	movwf	??_sprintf+2
  1653  02C7  0A84               	incf	4,f
  1654  02C8  0800               	movf	0,w
  1655  02C9  00E1               	movwf	??_sprintf+3
  1656  02CA  300F               	movlw	15
  1657  02CB                     u3595:	
  1658  02CB  1003               	clrc
  1659  02CC  0CE1               	rrf	??_sprintf+3,f
  1660  02CD  0CE0               	rrf	??_sprintf+2,f
  1661  02CE  0CDF               	rrf	??_sprintf+1,f
  1662  02CF  0CDE               	rrf	??_sprintf,f
  1663  02D0  3EFF               	addlw	-1
  1664  02D1  1D03               	skipz
  1665  02D2  2ACB               	goto	u3595
  1666  02D3  30FF               	movlw	255
  1667  02D4  055E               	andwf	??_sprintf,w
  1668  02D5  00E2               	movwf	??_sprintf+4
  1669  02D6  3000               	movlw	0
  1670  02D7  055F               	andwf	??_sprintf+1,w
  1671  02D8  00E3               	movwf	??_sprintf+5
  1672  02D9  0862               	movf	??_sprintf+4,w
  1673  02DA  3E82               	addlw	130
  1674  02DB  1683               	bsf	3,5	;RP0=1, select bank1
  1675  02DC  1303               	bcf	3,6	;RP1=0, select bank1
  1676  02DD  00AA               	movwf	sprintf@exp^(0+128)
  1677  02DE  1283               	bcf	3,5	;RP0=0, select bank0
  1678  02DF  1303               	bcf	3,6	;RP1=0, select bank0
  1679  02E0  0863               	movf	??_sprintf+5,w
  1680  02E1  1803               	skipnc
  1681  02E2  3E01               	addlw	1
  1682  02E3  3EFF               	addlw	255
  1683  02E4  1683               	bsf	3,5	;RP0=1, select bank1
  1684  02E5  1303               	bcf	3,6	;RP1=0, select bank1
  1685  02E6  00AB               	movwf	(sprintf@exp+1)^(0+128)
  1686                           
  1687                           ;doprnt.c: 838: exp--;
  1688  02E7  30FF               	movlw	255
  1689  02E8  07AA               	addwf	sprintf@exp^(0+128),f
  1690  02E9  1803               	skipnc
  1691  02EA  0AAB               	incf	(sprintf@exp+1)^(0+128),f
  1692  02EB  30FF               	movlw	255
  1693  02EC  07AB               	addwf	(sprintf@exp+1)^(0+128),f
  1694                           
  1695                           ;doprnt.c: 839: exp *= 3;
  1696  02ED  3003               	movlw	3
  1697  02EE  00F0               	movwf	___wmul@multiplier
  1698  02EF  3000               	movlw	0
  1699  02F0  00F1               	movwf	___wmul@multiplier+1
  1700  02F1  082B               	movf	(sprintf@exp+1)^(0+128),w
  1701  02F2  00F3               	movwf	___wmul@multiplicand+1
  1702  02F3  082A               	movf	sprintf@exp^(0+128),w
  1703  02F4  00F2               	movwf	___wmul@multiplicand
  1704  02F5  160A  118A  242E  120A  118A  	fcall	___wmul
  1705  02FA  0871               	movf	?___wmul+1,w
  1706  02FB  1683               	bsf	3,5	;RP0=1, select bank1
  1707  02FC  1303               	bcf	3,6	;RP1=0, select bank1
  1708  02FD  00AB               	movwf	(sprintf@exp+1)^(0+128)
  1709  02FE  0870               	movf	?___wmul,w
  1710  02FF  00AA               	movwf	sprintf@exp^(0+128)
  1711                           
  1712                           ;doprnt.c: 840: exp /= 10;
  1713  0300  300A               	movlw	10
  1714  0301  00F7               	movwf	___awdiv@divisor
  1715  0302  3000               	movlw	0
  1716  0303  00F8               	movwf	___awdiv@divisor+1
  1717  0304  082B               	movf	(sprintf@exp+1)^(0+128),w
  1718  0305  00FA               	movwf	___awdiv@dividend+1
  1719  0306  082A               	movf	sprintf@exp^(0+128),w
  1720  0307  00F9               	movwf	___awdiv@dividend
  1721  0308  160A  118A  265C  120A  118A  	fcall	___awdiv
  1722  030D  0878               	movf	?___awdiv+1,w
  1723  030E  1683               	bsf	3,5	;RP0=1, select bank1
  1724  030F  1303               	bcf	3,6	;RP1=0, select bank1
  1725  0310  00AB               	movwf	(sprintf@exp+1)^(0+128)
  1726  0311  0877               	movf	?___awdiv,w
  1727  0312  00AA               	movwf	sprintf@exp^(0+128)
  1728                           
  1729                           ;doprnt.c: 841: if(exp < 0)
  1730  0313  1FAB               	btfss	(sprintf@exp+1)^(0+128),7
  1731  0314  2B1B               	goto	l2371
  1732                           
  1733                           ;doprnt.c: 842: exp--;
  1734  0315  30FF               	movlw	255
  1735  0316  07AA               	addwf	sprintf@exp^(0+128),f
  1736  0317  1803               	skipnc
  1737  0318  0AAB               	incf	(sprintf@exp+1)^(0+128),f
  1738  0319  30FF               	movlw	255
  1739  031A  07AB               	addwf	(sprintf@exp+1)^(0+128),f
  1740  031B                     l2371:	
  1741                           
  1742                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1743  031B  032A               	decf	sprintf@exp^(0+128),w
  1744  031C  3AFF               	xorlw	255
  1745  031D  120A  158A  2565  120A  118A  	fcall	_scale
  1746  0322  1283               	bcf	3,5	;RP0=0, select bank0
  1747  0323  1303               	bcf	3,6	;RP1=0, select bank0
  1748  0324  0837               	movf	?_scale,w
  1749  0325  1683               	bsf	3,5	;RP0=1, select bank1
  1750  0326  1303               	bcf	3,6	;RP1=0, select bank1
  1751  0327  00AC               	movwf	sprintf@tmpval^(0+128)
  1752  0328  1283               	bcf	3,5	;RP0=0, select bank0
  1753  0329  1303               	bcf	3,6	;RP1=0, select bank0
  1754  032A  0838               	movf	?_scale+1,w
  1755  032B  1683               	bsf	3,5	;RP0=1, select bank1
  1756  032C  1303               	bcf	3,6	;RP1=0, select bank1
  1757  032D  00AD               	movwf	(sprintf@tmpval+1)^(0+128)
  1758  032E  1283               	bcf	3,5	;RP0=0, select bank0
  1759  032F  1303               	bcf	3,6	;RP1=0, select bank0
  1760  0330  0839               	movf	?_scale+2,w
  1761  0331  1683               	bsf	3,5	;RP0=1, select bank1
  1762  0332  1303               	bcf	3,6	;RP1=0, select bank1
  1763  0333  00AE               	movwf	(sprintf@tmpval+2)^(0+128)
  1764                           
  1765                           ;doprnt.c: 847: tmpval.integ *= fval;
  1766  0334  0833               	movf	sprintf@fval^(0+128),w
  1767  0335  1283               	bcf	3,5	;RP0=0, select bank0
  1768  0336  1303               	bcf	3,6	;RP1=0, select bank0
  1769  0337  00A7               	movwf	___ftmul@f1
  1770  0338  1683               	bsf	3,5	;RP0=1, select bank1
  1771  0339  1303               	bcf	3,6	;RP1=0, select bank1
  1772  033A  0834               	movf	(sprintf@fval+1)^(0+128),w
  1773  033B  1283               	bcf	3,5	;RP0=0, select bank0
  1774  033C  1303               	bcf	3,6	;RP1=0, select bank0
  1775  033D  00A8               	movwf	___ftmul@f1+1
  1776  033E  1683               	bsf	3,5	;RP0=1, select bank1
  1777  033F  1303               	bcf	3,6	;RP1=0, select bank1
  1778  0340  0835               	movf	(sprintf@fval+2)^(0+128),w
  1779  0341  1283               	bcf	3,5	;RP0=0, select bank0
  1780  0342  1303               	bcf	3,6	;RP1=0, select bank0
  1781  0343  00A9               	movwf	___ftmul@f1+2
  1782  0344  1683               	bsf	3,5	;RP0=1, select bank1
  1783  0345  1303               	bcf	3,6	;RP1=0, select bank1
  1784  0346  082C               	movf	sprintf@tmpval^(0+128),w
  1785  0347  1283               	bcf	3,5	;RP0=0, select bank0
  1786  0348  1303               	bcf	3,6	;RP1=0, select bank0
  1787  0349  00AA               	movwf	___ftmul@f2
  1788  034A  1683               	bsf	3,5	;RP0=1, select bank1
  1789  034B  1303               	bcf	3,6	;RP1=0, select bank1
  1790  034C  082D               	movf	(sprintf@tmpval+1)^(0+128),w
  1791  034D  1283               	bcf	3,5	;RP0=0, select bank0
  1792  034E  1303               	bcf	3,6	;RP1=0, select bank0
  1793  034F  00AB               	movwf	___ftmul@f2+1
  1794  0350  1683               	bsf	3,5	;RP0=1, select bank1
  1795  0351  1303               	bcf	3,6	;RP1=0, select bank1
  1796  0352  082E               	movf	(sprintf@tmpval+2)^(0+128),w
  1797  0353  1283               	bcf	3,5	;RP0=0, select bank0
  1798  0354  1303               	bcf	3,6	;RP1=0, select bank0
  1799  0355  00AC               	movwf	___ftmul@f2+2
  1800  0356  120A  158A  213E  120A  118A  	fcall	___ftmul
  1801  035B  1283               	bcf	3,5	;RP0=0, select bank0
  1802  035C  1303               	bcf	3,6	;RP1=0, select bank0
  1803  035D  0827               	movf	?___ftmul,w
  1804  035E  1683               	bsf	3,5	;RP0=1, select bank1
  1805  035F  1303               	bcf	3,6	;RP1=0, select bank1
  1806  0360  00AC               	movwf	sprintf@tmpval^(0+128)
  1807  0361  1283               	bcf	3,5	;RP0=0, select bank0
  1808  0362  1303               	bcf	3,6	;RP1=0, select bank0
  1809  0363  0828               	movf	?___ftmul+1,w
  1810  0364  1683               	bsf	3,5	;RP0=1, select bank1
  1811  0365  1303               	bcf	3,6	;RP1=0, select bank1
  1812  0366  00AD               	movwf	(sprintf@tmpval+1)^(0+128)
  1813  0367  1283               	bcf	3,5	;RP0=0, select bank0
  1814  0368  1303               	bcf	3,6	;RP1=0, select bank0
  1815  0369  0829               	movf	?___ftmul+2,w
  1816  036A  1683               	bsf	3,5	;RP0=1, select bank1
  1817  036B  1303               	bcf	3,6	;RP1=0, select bank1
  1818  036C  00AE               	movwf	(sprintf@tmpval+2)^(0+128)
  1819                           
  1820                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1821  036D  082C               	movf	sprintf@tmpval^(0+128),w
  1822  036E  00F0               	movwf	___ftge@ff1
  1823  036F  082D               	movf	(sprintf@tmpval+1)^(0+128),w
  1824  0370  00F1               	movwf	___ftge@ff1+1
  1825  0371  082E               	movf	(sprintf@tmpval+2)^(0+128),w
  1826  0372  00F2               	movwf	___ftge@ff1+2
  1827  0373  3000               	movlw	0
  1828  0374  00F3               	movwf	___ftge@ff2
  1829  0375  3080               	movlw	128
  1830  0376  00F4               	movwf	___ftge@ff2+1
  1831  0377  303F               	movlw	63
  1832  0378  00F5               	movwf	___ftge@ff2+2
  1833  0379  160A  118A  26B7  120A  118A  	fcall	___ftge
  1834  037E  1803               	btfsc	3,0
  1835  037F  2B88               	goto	l2379
  1836                           
  1837                           ;doprnt.c: 849: exp--;
  1838  0380  30FF               	movlw	255
  1839  0381  1683               	bsf	3,5	;RP0=1, select bank1
  1840  0382  1303               	bcf	3,6	;RP1=0, select bank1
  1841  0383  07AA               	addwf	sprintf@exp^(0+128),f
  1842  0384  1803               	skipnc
  1843  0385  0AAB               	incf	(sprintf@exp+1)^(0+128),f
  1844  0386  30FF               	movlw	255
  1845  0387  2BA4               	goto	L1
  1846  0388                     l2379:	
  1847                           
  1848                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1849  0388  1683               	bsf	3,5	;RP0=1, select bank1
  1850  0389  1303               	bcf	3,6	;RP1=0, select bank1
  1851  038A  082C               	movf	sprintf@tmpval^(0+128),w
  1852  038B  00F0               	movwf	___ftge@ff1
  1853  038C  082D               	movf	(sprintf@tmpval+1)^(0+128),w
  1854  038D  00F1               	movwf	___ftge@ff1+1
  1855  038E  082E               	movf	(sprintf@tmpval+2)^(0+128),w
  1856  038F  00F2               	movwf	___ftge@ff1+2
  1857  0390  3000               	movlw	0
  1858  0391  00F3               	movwf	___ftge@ff2
  1859  0392  3020               	movlw	32
  1860  0393  00F4               	movwf	___ftge@ff2+1
  1861  0394  3041               	movlw	65
  1862  0395  00F5               	movwf	___ftge@ff2+2
  1863  0396  160A  118A  26B7  120A  118A  	fcall	___ftge
  1864  039B  1C03               	btfss	3,0
  1865  039C  2BA5               	goto	l2383
  1866                           
  1867                           ;doprnt.c: 851: exp++;
  1868  039D  3001               	movlw	1
  1869  039E  1683               	bsf	3,5	;RP0=1, select bank1
  1870  039F  1303               	bcf	3,6	;RP1=0, select bank1
  1871  03A0  07AA               	addwf	sprintf@exp^(0+128),f
  1872  03A1  1803               	skipnc
  1873  03A2  0AAB               	incf	(sprintf@exp+1)^(0+128),f
  1874  03A3  3000               	movlw	0
  1875  03A4                     L1:	
  1876  03A4  07AB               	addwf	(sprintf@exp+1)^(0+128),f
  1877  03A5                     l2383:	
  1878                           
  1879                           ;doprnt.c: 852: }
  1880                           ;doprnt.c: 1112: if(prec <= 12)
  1881  03A5  1683               	bsf	3,5	;RP0=1, select bank1
  1882  03A6  1303               	bcf	3,6	;RP1=0, select bank1
  1883  03A7  0832               	movf	(sprintf@prec+1)^(0+128),w
  1884  03A8  3A80               	xorlw	128
  1885  03A9  00FF               	movwf	127
  1886  03AA  3080               	movlw	128
  1887  03AB  027F               	subwf	127,w
  1888  03AC  1D03               	skipz
  1889  03AD  2BB0               	goto	u3635
  1890  03AE  300D               	movlw	13
  1891  03AF  0231               	subwf	sprintf@prec^(0+128),w
  1892  03B0                     u3635:	
  1893  03B0  1803               	skipnc
  1894  03B1  2BEB               	goto	l2387
  1895                           
  1896                           ;doprnt.c: 1113: fval += fround(prec);
  1897  03B2  1683               	bsf	3,5	;RP0=1, select bank1
  1898  03B3  1303               	bcf	3,6	;RP1=0, select bank1
  1899  03B4  0831               	movf	sprintf@prec^(0+128),w
  1900  03B5  120A  118A  201E  120A  118A  	fcall	_fround
  1901  03BA  1283               	bcf	3,5	;RP0=0, select bank0
  1902  03BB  1303               	bcf	3,6	;RP1=0, select bank0
  1903  03BC  0837               	movf	?_fround,w
  1904  03BD  00C7               	movwf	___ftadd@f1
  1905  03BE  0838               	movf	?_fround+1,w
  1906  03BF  00C8               	movwf	___ftadd@f1+1
  1907  03C0  0839               	movf	?_fround+2,w
  1908  03C1  00C9               	movwf	___ftadd@f1+2
  1909  03C2  1683               	bsf	3,5	;RP0=1, select bank1
  1910  03C3  1303               	bcf	3,6	;RP1=0, select bank1
  1911  03C4  0833               	movf	sprintf@fval^(0+128),w
  1912  03C5  1283               	bcf	3,5	;RP0=0, select bank0
  1913  03C6  1303               	bcf	3,6	;RP1=0, select bank0
  1914  03C7  00CA               	movwf	___ftadd@f2
  1915  03C8  1683               	bsf	3,5	;RP0=1, select bank1
  1916  03C9  1303               	bcf	3,6	;RP1=0, select bank1
  1917  03CA  0834               	movf	(sprintf@fval+1)^(0+128),w
  1918  03CB  1283               	bcf	3,5	;RP0=0, select bank0
  1919  03CC  1303               	bcf	3,6	;RP1=0, select bank0
  1920  03CD  00CB               	movwf	___ftadd@f2+1
  1921  03CE  1683               	bsf	3,5	;RP0=1, select bank1
  1922  03CF  1303               	bcf	3,6	;RP1=0, select bank1
  1923  03D0  0835               	movf	(sprintf@fval+2)^(0+128),w
  1924  03D1  1283               	bcf	3,5	;RP0=0, select bank0
  1925  03D2  1303               	bcf	3,6	;RP1=0, select bank0
  1926  03D3  00CC               	movwf	___ftadd@f2+2
  1927  03D4  120A  158A  2211  120A  118A  	fcall	___ftadd
  1928  03D9  1283               	bcf	3,5	;RP0=0, select bank0
  1929  03DA  1303               	bcf	3,6	;RP1=0, select bank0
  1930  03DB  0847               	movf	?___ftadd,w
  1931  03DC  1683               	bsf	3,5	;RP0=1, select bank1
  1932  03DD  1303               	bcf	3,6	;RP1=0, select bank1
  1933  03DE  00B3               	movwf	sprintf@fval^(0+128)
  1934  03DF  1283               	bcf	3,5	;RP0=0, select bank0
  1935  03E0  1303               	bcf	3,6	;RP1=0, select bank0
  1936  03E1  0848               	movf	?___ftadd+1,w
  1937  03E2  1683               	bsf	3,5	;RP0=1, select bank1
  1938  03E3  1303               	bcf	3,6	;RP1=0, select bank1
  1939  03E4  00B4               	movwf	(sprintf@fval+1)^(0+128)
  1940  03E5  1283               	bcf	3,5	;RP0=0, select bank0
  1941  03E6  1303               	bcf	3,6	;RP1=0, select bank0
  1942  03E7  0849               	movf	?___ftadd+2,w
  1943  03E8  1683               	bsf	3,5	;RP0=1, select bank1
  1944  03E9  1303               	bcf	3,6	;RP1=0, select bank1
  1945  03EA  00B5               	movwf	(sprintf@fval+2)^(0+128)
  1946  03EB                     l2387:	
  1947                           
  1948                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1949  03EB  1683               	bsf	3,5	;RP0=1, select bank1
  1950  03EC  1303               	bcf	3,6	;RP1=0, select bank1
  1951  03ED  082B               	movf	(sprintf@exp+1)^(0+128),w
  1952  03EE  3A80               	xorlw	128
  1953  03EF  00FF               	movwf	127
  1954  03F0  3080               	movlw	128
  1955  03F1  027F               	subwf	127,w
  1956  03F2  1D03               	skipz
  1957  03F3  2BF6               	goto	u3645
  1958  03F4  300A               	movlw	10
  1959  03F5  022A               	subwf	sprintf@exp^(0+128),w
  1960  03F6                     u3645:	
  1961  03F6  1803               	skipnc
  1962  03F7  2C29               	goto	l2395
  1963  03F8  1683               	bsf	3,5	;RP0=1, select bank1
  1964  03F9  1303               	bcf	3,6	;RP1=0, select bank1
  1965  03FA  0835               	movf	(sprintf@fval+2)^(0+128),w
  1966  03FB  0434               	iorwf	(sprintf@fval+1)^(0+128),w
  1967  03FC  0433               	iorwf	sprintf@fval^(0+128),w
  1968  03FD  1903               	skipnz
  1969  03FE  2C82               	goto	l2409
  1970  03FF  0833               	movf	sprintf@fval^(0+128),w
  1971  0400  1283               	bcf	3,5	;RP0=0, select bank0
  1972  0401  1303               	bcf	3,6	;RP1=0, select bank0
  1973  0402  00C0               	movwf	___fttol@f1
  1974  0403  1683               	bsf	3,5	;RP0=1, select bank1
  1975  0404  1303               	bcf	3,6	;RP1=0, select bank1
  1976  0405  0834               	movf	(sprintf@fval+1)^(0+128),w
  1977  0406  1283               	bcf	3,5	;RP0=0, select bank0
  1978  0407  1303               	bcf	3,6	;RP1=0, select bank0
  1979  0408  00C1               	movwf	___fttol@f1+1
  1980  0409  1683               	bsf	3,5	;RP0=1, select bank1
  1981  040A  1303               	bcf	3,6	;RP1=0, select bank1
  1982  040B  0835               	movf	(sprintf@fval+2)^(0+128),w
  1983  040C  1283               	bcf	3,5	;RP0=0, select bank0
  1984  040D  1303               	bcf	3,6	;RP1=0, select bank0
  1985  040E  00C2               	movwf	___fttol@f1+2
  1986  040F  160A  118A  2772  120A  118A  	fcall	___fttol
  1987  0414  1283               	bcf	3,5	;RP0=0, select bank0
  1988  0415  1303               	bcf	3,6	;RP1=0, select bank0
  1989  0416  0843               	movf	?___fttol+3,w
  1990  0417  0442               	iorwf	?___fttol+2,w
  1991  0418  0441               	iorwf	?___fttol+1,w
  1992  0419  0440               	iorwf	?___fttol,w
  1993  041A  1D03               	skipz
  1994  041B  2C82               	goto	l2409
  1995  041C  1683               	bsf	3,5	;RP0=1, select bank1
  1996  041D  1303               	bcf	3,6	;RP1=0, select bank1
  1997  041E  082B               	movf	(sprintf@exp+1)^(0+128),w
  1998  041F  3A80               	xorlw	128
  1999  0420  00FF               	movwf	127
  2000  0421  3080               	movlw	128
  2001  0422  027F               	subwf	127,w
  2002  0423  1D03               	skipz
  2003  0424  2C27               	goto	u3675
  2004  0425  3002               	movlw	2
  2005  0426  022A               	subwf	sprintf@exp^(0+128),w
  2006  0427                     u3675:	
  2007  0427  1C03               	skipc
  2008  0428  2C82               	goto	l2409
  2009  0429                     l2395:	
  2010                           
  2011                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2012  0429  1683               	bsf	3,5	;RP0=1, select bank1
  2013  042A  1303               	bcf	3,6	;RP1=0, select bank1
  2014  042B  082C               	movf	sprintf@tmpval^(0+128),w
  2015  042C  00F0               	movwf	___ftge@ff1
  2016  042D  082D               	movf	(sprintf@tmpval+1)^(0+128),w
  2017  042E  00F1               	movwf	___ftge@ff1+1
  2018  042F  082E               	movf	(sprintf@tmpval+2)^(0+128),w
  2019  0430  00F2               	movwf	___ftge@ff1+2
  2020  0431  3070               	movlw	112
  2021  0432  00F3               	movwf	___ftge@ff2
  2022  0433  3089               	movlw	137
  2023  0434  00F4               	movwf	___ftge@ff2+1
  2024  0435  3040               	movlw	64
  2025  0436  00F5               	movwf	___ftge@ff2+2
  2026  0437  160A  118A  26B7  120A  118A  	fcall	___ftge
  2027  043C  1803               	btfsc	3,0
  2028  043D  2C40               	goto	l2399
  2029                           
  2030                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2031  043E  30F7               	movlw	247
  2032  043F  2C41               	goto	L2
  2033  0440                     l2399:	
  2034                           ;doprnt.c: 1122: }else{
  2035                           
  2036                           
  2037                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2038  0440  30F8               	movlw	248
  2039  0441                     L2:	
  2040  0441  1683               	bsf	3,5	;RP0=1, select bank1
  2041  0442  1303               	bcf	3,6	;RP1=0, select bank1
  2042  0443  07AA               	addwf	sprintf@exp^(0+128),f
  2043  0444  1803               	skipnc
  2044  0445  0AAB               	incf	(sprintf@exp+1)^(0+128),f
  2045  0446  30FF               	movlw	255
  2046  0447  07AB               	addwf	(sprintf@exp+1)^(0+128),f
  2047                           
  2048                           ;doprnt.c: 1124: }
  2049                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2050  0448  082A               	movf	sprintf@exp^(0+128),w
  2051  0449  120A  158A  2565  120A  118A  	fcall	_scale
  2052  044E  1283               	bcf	3,5	;RP0=0, select bank0
  2053  044F  1303               	bcf	3,6	;RP1=0, select bank0
  2054  0450  0837               	movf	?_scale,w
  2055  0451  1683               	bsf	3,5	;RP0=1, select bank1
  2056  0452  1303               	bcf	3,6	;RP1=0, select bank1
  2057  0453  00AC               	movwf	sprintf@tmpval^(0+128)
  2058  0454  1283               	bcf	3,5	;RP0=0, select bank0
  2059  0455  1303               	bcf	3,6	;RP1=0, select bank0
  2060  0456  0838               	movf	?_scale+1,w
  2061  0457  1683               	bsf	3,5	;RP0=1, select bank1
  2062  0458  1303               	bcf	3,6	;RP1=0, select bank1
  2063  0459  00AD               	movwf	(sprintf@tmpval+1)^(0+128)
  2064  045A  1283               	bcf	3,5	;RP0=0, select bank0
  2065  045B  1303               	bcf	3,6	;RP1=0, select bank0
  2066  045C  0839               	movf	?_scale+2,w
  2067  045D  1683               	bsf	3,5	;RP0=1, select bank1
  2068  045E  1303               	bcf	3,6	;RP1=0, select bank1
  2069  045F  00AE               	movwf	(sprintf@tmpval+2)^(0+128)
  2070                           
  2071                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2072  0460  0833               	movf	sprintf@fval^(0+128),w
  2073  0461  00F0               	movwf	__tdiv_to_l_@f1
  2074  0462  0834               	movf	(sprintf@fval+1)^(0+128),w
  2075  0463  00F1               	movwf	__tdiv_to_l_@f1+1
  2076  0464  0835               	movf	(sprintf@fval+2)^(0+128),w
  2077  0465  00F2               	movwf	__tdiv_to_l_@f1+2
  2078  0466  082C               	movf	sprintf@tmpval^(0+128),w
  2079  0467  00F3               	movwf	__tdiv_to_l_@f2
  2080  0468  082D               	movf	(sprintf@tmpval+1)^(0+128),w
  2081  0469  00F4               	movwf	__tdiv_to_l_@f2+1
  2082  046A  082E               	movf	(sprintf@tmpval+2)^(0+128),w
  2083  046B  00F5               	movwf	__tdiv_to_l_@f2+2
  2084  046C  120A  158A  207B  120A  118A  	fcall	__tdiv_to_l_
  2085  0471  0873               	movf	?__tdiv_to_l_+3,w
  2086  0472  1683               	bsf	3,5	;RP0=1, select bank1
  2087  0473  1303               	bcf	3,6	;RP1=0, select bank1
  2088  0474  00A9               	movwf	(sprintf@val+3)^(0+128)
  2089  0475  0872               	movf	?__tdiv_to_l_+2,w
  2090  0476  00A8               	movwf	(sprintf@val+2)^(0+128)
  2091  0477  0871               	movf	?__tdiv_to_l_+1,w
  2092  0478  00A7               	movwf	(sprintf@val+1)^(0+128)
  2093  0479  0870               	movf	?__tdiv_to_l_,w
  2094  047A  00A6               	movwf	sprintf@val^(0+128)
  2095                           
  2096                           ;doprnt.c: 1129: fval = 0.0;
  2097  047B  3000               	movlw	0
  2098  047C  00B3               	movwf	sprintf@fval^(0+128)
  2099  047D  3000               	movlw	0
  2100  047E  00B4               	movwf	(sprintf@fval+1)^(0+128)
  2101  047F  3000               	movlw	0
  2102  0480  00B5               	movwf	(sprintf@fval+2)^(0+128)
  2103                           
  2104                           ;doprnt.c: 1130: } else {
  2105  0481  2CF1               	goto	l2413
  2106  0482                     l2409:	
  2107                           
  2108                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2109  0482  1683               	bsf	3,5	;RP0=1, select bank1
  2110  0483  1303               	bcf	3,6	;RP1=0, select bank1
  2111  0484  0833               	movf	sprintf@fval^(0+128),w
  2112  0485  1283               	bcf	3,5	;RP0=0, select bank0
  2113  0486  1303               	bcf	3,6	;RP1=0, select bank0
  2114  0487  00C0               	movwf	___fttol@f1
  2115  0488  1683               	bsf	3,5	;RP0=1, select bank1
  2116  0489  1303               	bcf	3,6	;RP1=0, select bank1
  2117  048A  0834               	movf	(sprintf@fval+1)^(0+128),w
  2118  048B  1283               	bcf	3,5	;RP0=0, select bank0
  2119  048C  1303               	bcf	3,6	;RP1=0, select bank0
  2120  048D  00C1               	movwf	___fttol@f1+1
  2121  048E  1683               	bsf	3,5	;RP0=1, select bank1
  2122  048F  1303               	bcf	3,6	;RP1=0, select bank1
  2123  0490  0835               	movf	(sprintf@fval+2)^(0+128),w
  2124  0491  1283               	bcf	3,5	;RP0=0, select bank0
  2125  0492  1303               	bcf	3,6	;RP1=0, select bank0
  2126  0493  00C2               	movwf	___fttol@f1+2
  2127  0494  160A  118A  2772  120A  118A  	fcall	___fttol
  2128  0499  1283               	bcf	3,5	;RP0=0, select bank0
  2129  049A  1303               	bcf	3,6	;RP1=0, select bank0
  2130  049B  0843               	movf	?___fttol+3,w
  2131  049C  1683               	bsf	3,5	;RP0=1, select bank1
  2132  049D  1303               	bcf	3,6	;RP1=0, select bank1
  2133  049E  00A9               	movwf	(sprintf@val+3)^(0+128)
  2134  049F  1283               	bcf	3,5	;RP0=0, select bank0
  2135  04A0  1303               	bcf	3,6	;RP1=0, select bank0
  2136  04A1  0842               	movf	?___fttol+2,w
  2137  04A2  1683               	bsf	3,5	;RP0=1, select bank1
  2138  04A3  1303               	bcf	3,6	;RP1=0, select bank1
  2139  04A4  00A8               	movwf	(sprintf@val+2)^(0+128)
  2140  04A5  1283               	bcf	3,5	;RP0=0, select bank0
  2141  04A6  1303               	bcf	3,6	;RP1=0, select bank0
  2142  04A7  0841               	movf	?___fttol+1,w
  2143  04A8  1683               	bsf	3,5	;RP0=1, select bank1
  2144  04A9  1303               	bcf	3,6	;RP1=0, select bank1
  2145  04AA  00A7               	movwf	(sprintf@val+1)^(0+128)
  2146  04AB  1283               	bcf	3,5	;RP0=0, select bank0
  2147  04AC  1303               	bcf	3,6	;RP1=0, select bank0
  2148  04AD  0840               	movf	?___fttol,w
  2149  04AE  1683               	bsf	3,5	;RP0=1, select bank1
  2150  04AF  1303               	bcf	3,6	;RP1=0, select bank1
  2151  04B0  00A6               	movwf	sprintf@val^(0+128)
  2152                           
  2153                           ;doprnt.c: 1132: fval -= (double)val;
  2154  04B1  0829               	movf	(sprintf@val+3)^(0+128),w
  2155  04B2  00FB               	movwf	___lltoft@c+3
  2156  04B3  0828               	movf	(sprintf@val+2)^(0+128),w
  2157  04B4  00FA               	movwf	___lltoft@c+2
  2158  04B5  0827               	movf	(sprintf@val+1)^(0+128),w
  2159  04B6  00F9               	movwf	___lltoft@c+1
  2160  04B7  0826               	movf	sprintf@val^(0+128),w
  2161  04B8  00F8               	movwf	___lltoft@c
  2162  04B9  160A  118A  244F  120A  118A  	fcall	___lltoft
  2163  04BE  0878               	movf	?___lltoft,w
  2164  04BF  1283               	bcf	3,5	;RP0=0, select bank0
  2165  04C0  1303               	bcf	3,6	;RP1=0, select bank0
  2166  04C1  00D4               	movwf	___ftsub@f2
  2167  04C2  0879               	movf	?___lltoft+1,w
  2168  04C3  00D5               	movwf	___ftsub@f2+1
  2169  04C4  087A               	movf	?___lltoft+2,w
  2170  04C5  00D6               	movwf	___ftsub@f2+2
  2171  04C6  1683               	bsf	3,5	;RP0=1, select bank1
  2172  04C7  1303               	bcf	3,6	;RP1=0, select bank1
  2173  04C8  0833               	movf	sprintf@fval^(0+128),w
  2174  04C9  1283               	bcf	3,5	;RP0=0, select bank0
  2175  04CA  1303               	bcf	3,6	;RP1=0, select bank0
  2176  04CB  00D7               	movwf	___ftsub@f1
  2177  04CC  1683               	bsf	3,5	;RP0=1, select bank1
  2178  04CD  1303               	bcf	3,6	;RP1=0, select bank1
  2179  04CE  0834               	movf	(sprintf@fval+1)^(0+128),w
  2180  04CF  1283               	bcf	3,5	;RP0=0, select bank0
  2181  04D0  1303               	bcf	3,6	;RP1=0, select bank0
  2182  04D1  00D8               	movwf	___ftsub@f1+1
  2183  04D2  1683               	bsf	3,5	;RP0=1, select bank1
  2184  04D3  1303               	bcf	3,6	;RP1=0, select bank1
  2185  04D4  0835               	movf	(sprintf@fval+2)^(0+128),w
  2186  04D5  1283               	bcf	3,5	;RP0=0, select bank0
  2187  04D6  1303               	bcf	3,6	;RP1=0, select bank0
  2188  04D7  00D9               	movwf	___ftsub@f1+2
  2189  04D8  160A  118A  240D  120A  118A  	fcall	___ftsub
  2190  04DD  1283               	bcf	3,5	;RP0=0, select bank0
  2191  04DE  1303               	bcf	3,6	;RP1=0, select bank0
  2192  04DF  0854               	movf	?___ftsub,w
  2193  04E0  1683               	bsf	3,5	;RP0=1, select bank1
  2194  04E1  1303               	bcf	3,6	;RP1=0, select bank1
  2195  04E2  00B3               	movwf	sprintf@fval^(0+128)
  2196  04E3  1283               	bcf	3,5	;RP0=0, select bank0
  2197  04E4  1303               	bcf	3,6	;RP1=0, select bank0
  2198  04E5  0855               	movf	?___ftsub+1,w
  2199  04E6  1683               	bsf	3,5	;RP0=1, select bank1
  2200  04E7  1303               	bcf	3,6	;RP1=0, select bank1
  2201  04E8  00B4               	movwf	(sprintf@fval+1)^(0+128)
  2202  04E9  1283               	bcf	3,5	;RP0=0, select bank0
  2203  04EA  1303               	bcf	3,6	;RP1=0, select bank0
  2204  04EB  0856               	movf	?___ftsub+2,w
  2205  04EC  1683               	bsf	3,5	;RP0=1, select bank1
  2206  04ED  1303               	bcf	3,6	;RP1=0, select bank1
  2207  04EE  00B5               	movwf	(sprintf@fval+2)^(0+128)
  2208                           
  2209                           ;doprnt.c: 1133: exp = 0;
  2210  04EF  01AA               	clrf	sprintf@exp^(0+128)
  2211  04F0  01AB               	clrf	(sprintf@exp+1)^(0+128)
  2212  04F1                     l2413:	
  2213                           
  2214                           ;doprnt.c: 1134: }
  2215                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2216  04F1  01B6               	clrf	sprintf@c^(0+128)
  2217  04F2  0AB6               	incf	sprintf@c^(0+128),f
  2218  04F3  300A               	movlw	10
  2219  04F4  0636               	xorwf	sprintf@c^(0+128),w
  2220  04F5  1903               	btfsc	3,2
  2221  04F6  2D47               	goto	l2425
  2222  04F7                     l2419:	
  2223                           
  2224                           ;doprnt.c: 1137: if(val < dpowers[c])
  2225  04F7  0836               	movf	sprintf@c^(0+128),w
  2226  04F8  1283               	bcf	3,5	;RP0=0, select bank0
  2227  04F9  1303               	bcf	3,6	;RP1=0, select bank0
  2228  04FA  00DE               	movwf	??_sprintf
  2229  04FB  3001               	movlw	1
  2230  04FC                     u3705:	
  2231  04FC  1003               	clrc
  2232  04FD  0DDE               	rlf	??_sprintf,f
  2233  04FE  3EFF               	addlw	-1
  2234  04FF  1D03               	skipz
  2235  0500  2CFC               	goto	u3705
  2236  0501  1003               	clrc
  2237  0502  0D5E               	rlf	??_sprintf,w
  2238  0503  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2239  0504  0084               	movwf	4
  2240  0505  160A  118A  200A  120A  118A  	fcall	stringdir
  2241  050A  00DF               	movwf	??_sprintf+1
  2242  050B  160A  118A  200A  120A  118A  	fcall	stringdir
  2243  0510  00E0               	movwf	??_sprintf+2
  2244  0511  160A  118A  200A  120A  118A  	fcall	stringdir
  2245  0516  00E1               	movwf	??_sprintf+3
  2246  0517  160A  118A  200A  120A  118A  	fcall	stringdir
  2247  051C  00E2               	movwf	??_sprintf+4
  2248  051D  0862               	movf	??_sprintf+4,w
  2249  051E  1683               	bsf	3,5	;RP0=1, select bank1
  2250  051F  1303               	bcf	3,6	;RP1=0, select bank1
  2251  0520  0229               	subwf	(sprintf@val+3)^(0+128),w
  2252  0521  1D03               	skipz
  2253  0522  2D39               	goto	u3715
  2254  0523  1283               	bcf	3,5	;RP0=0, select bank0
  2255  0524  1303               	bcf	3,6	;RP1=0, select bank0
  2256  0525  0861               	movf	??_sprintf+3,w
  2257  0526  1683               	bsf	3,5	;RP0=1, select bank1
  2258  0527  1303               	bcf	3,6	;RP1=0, select bank1
  2259  0528  0228               	subwf	(sprintf@val+2)^(0+128),w
  2260  0529  1D03               	skipz
  2261  052A  2D39               	goto	u3715
  2262  052B  1283               	bcf	3,5	;RP0=0, select bank0
  2263  052C  1303               	bcf	3,6	;RP1=0, select bank0
  2264  052D  0860               	movf	??_sprintf+2,w
  2265  052E  1683               	bsf	3,5	;RP0=1, select bank1
  2266  052F  1303               	bcf	3,6	;RP1=0, select bank1
  2267  0530  0227               	subwf	(sprintf@val+1)^(0+128),w
  2268  0531  1D03               	skipz
  2269  0532  2D39               	goto	u3715
  2270  0533  1283               	bcf	3,5	;RP0=0, select bank0
  2271  0534  1303               	bcf	3,6	;RP1=0, select bank0
  2272  0535  085F               	movf	??_sprintf+1,w
  2273  0536  1683               	bsf	3,5	;RP0=1, select bank1
  2274  0537  1303               	bcf	3,6	;RP1=0, select bank1
  2275  0538  0226               	subwf	sprintf@val^(0+128),w
  2276  0539                     u3715:	
  2277  0539  1C03               	btfss	3,0
  2278  053A  2D47               	goto	l2425
  2279                           
  2280                           ;doprnt.c: 1138: break;
  2281  053B  3001               	movlw	1
  2282  053C  1283               	bcf	3,5	;RP0=0, select bank0
  2283  053D  1303               	bcf	3,6	;RP1=0, select bank0
  2284  053E  00DE               	movwf	??_sprintf
  2285  053F  085E               	movf	??_sprintf,w
  2286  0540  1683               	bsf	3,5	;RP0=1, select bank1
  2287  0541  1303               	bcf	3,6	;RP1=0, select bank1
  2288  0542  07B6               	addwf	sprintf@c^(0+128),f
  2289  0543  300A               	movlw	10
  2290  0544  0636               	xorwf	sprintf@c^(0+128),w
  2291  0545  1D03               	btfss	3,2
  2292  0546  2CF7               	goto	l2419
  2293  0547                     l2425:	
  2294                           
  2295                           ;doprnt.c: 1175: {
  2296                           ;doprnt.c: 1188: if(flag & 0x03)
  2297  0547  3003               	movlw	3
  2298  0548  0524               	andwf	sprintf@flag^(0+128),w
  2299  0549  1283               	bcf	3,5	;RP0=0, select bank0
  2300  054A  1303               	bcf	3,6	;RP1=0, select bank0
  2301  054B  00DE               	movwf	??_sprintf
  2302  054C  3000               	movlw	0
  2303  054D  1683               	bsf	3,5	;RP0=1, select bank1
  2304  054E  1303               	bcf	3,6	;RP1=0, select bank1
  2305  054F  0525               	andwf	(sprintf@flag+1)^(0+128),w
  2306  0550  1283               	bcf	3,5	;RP0=0, select bank0
  2307  0551  1303               	bcf	3,6	;RP1=0, select bank0
  2308  0552  00DF               	movwf	??_sprintf+1
  2309  0553  085E               	movf	??_sprintf,w
  2310  0554  045F               	iorwf	??_sprintf+1,w
  2311  0555  1903               	btfsc	3,2
  2312  0556  2D68               	goto	l169
  2313                           
  2314                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2315  0557  302D               	movlw	45
  2316  0558                     L3:	
  2317  0558  00DE               	movwf	??_sprintf
  2318  0559  1683               	bsf	3,5	;RP0=1, select bank1
  2319  055A  1303               	bcf	3,6	;RP1=0, select bank1
  2320  055B  0830               	movf	sprintf@sp^(0+128),w
  2321  055C  0084               	movwf	4
  2322  055D  1283               	bcf	3,5	;RP0=0, select bank0
  2323  055E  1303               	bcf	3,6	;RP1=0, select bank0
  2324  055F  085E               	movf	??_sprintf,w
  2325  0560  1383               	bcf	3,7	;select IRP bank0
  2326  0561  0080               	movwf	0
  2327  0562  3001               	movlw	1
  2328  0563  00DE               	movwf	??_sprintf
  2329  0564  085E               	movf	??_sprintf,w
  2330  0565  1683               	bsf	3,5	;RP0=1, select bank1
  2331  0566  1303               	bcf	3,6	;RP1=0, select bank1
  2332  0567  07B0               	addwf	sprintf@sp^(0+128),f
  2333  0568                     l169:	
  2334  0568  30FF               	movlw	255
  2335  0569  1283               	bcf	3,5	;RP0=0, select bank0
  2336  056A  00DE               	movwf	??_sprintf
  2337  056B  085E               	movf	??_sprintf,w
  2338  056C  1683               	bsf	3,5	;RP0=1, select bank1
  2339  056D  1303               	bcf	3,6	;RP1=0, select bank1
  2340  056E  07B6               	addwf	sprintf@c^(0+128),f
  2341  056F  0A36               	incf	sprintf@c^(0+128),w
  2342  0570  1903               	btfsc	3,2
  2343  0571  2DEE               	goto	l2443
  2344                           
  2345                           ;doprnt.c: 1200: {
  2346                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2347                           
  2348                           ;doprnt.c: 1195: }
  2349                           ;doprnt.c: 1196: while(c--) {
  2350  0572  0836               	movf	sprintf@c^(0+128),w
  2351  0573  1283               	bcf	3,5	;RP0=0, select bank0
  2352  0574  1303               	bcf	3,6	;RP1=0, select bank0
  2353  0575  00DE               	movwf	??_sprintf
  2354  0576  3001               	movlw	1
  2355  0577                     u3745:	
  2356  0577  1003               	clrc
  2357  0578  0DDE               	rlf	??_sprintf,f
  2358  0579  3EFF               	addlw	-1
  2359  057A  1D03               	skipz
  2360  057B  2D77               	goto	u3745
  2361  057C  1003               	clrc
  2362  057D  0D5E               	rlf	??_sprintf,w
  2363  057E  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2364  057F  0084               	movwf	4
  2365  0580  160A  118A  200A  120A  118A  	fcall	stringdir
  2366  0585  00F0               	movwf	___lldiv@divisor
  2367  0586  160A  118A  200A  120A  118A  	fcall	stringdir
  2368  058B  00F1               	movwf	___lldiv@divisor+1
  2369  058C  160A  118A  200A  120A  118A  	fcall	stringdir
  2370  0591  00F2               	movwf	___lldiv@divisor+2
  2371  0592  160A  118A  200A  120A  118A  	fcall	stringdir
  2372  0597  00F3               	movwf	___lldiv@divisor+3
  2373  0598  1683               	bsf	3,5	;RP0=1, select bank1
  2374  0599  1303               	bcf	3,6	;RP1=0, select bank1
  2375  059A  0829               	movf	(sprintf@val+3)^(0+128),w
  2376  059B  00F7               	movwf	___lldiv@dividend+3
  2377  059C  0828               	movf	(sprintf@val+2)^(0+128),w
  2378  059D  00F6               	movwf	___lldiv@dividend+2
  2379  059E  0827               	movf	(sprintf@val+1)^(0+128),w
  2380  059F  00F5               	movwf	___lldiv@dividend+1
  2381  05A0  0826               	movf	sprintf@val^(0+128),w
  2382  05A1  00F4               	movwf	___lldiv@dividend
  2383  05A2  160A  118A  2714  120A  118A  	fcall	___lldiv
  2384  05A7  0873               	movf	?___lldiv+3,w
  2385  05A8  1683               	bsf	3,5	;RP0=1, select bank1
  2386  05A9  1303               	bcf	3,6	;RP1=0, select bank1
  2387  05AA  00AF               	movwf	(sprintf@tmpval+3)^(0+128)
  2388  05AB  0872               	movf	?___lldiv+2,w
  2389  05AC  00AE               	movwf	(sprintf@tmpval+2)^(0+128)
  2390  05AD  0871               	movf	?___lldiv+1,w
  2391  05AE  00AD               	movwf	(sprintf@tmpval+1)^(0+128)
  2392  05AF  0870               	movf	?___lldiv,w
  2393  05B0  00AC               	movwf	sprintf@tmpval^(0+128)
  2394                           
  2395                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2396  05B1  3000               	movlw	0
  2397  05B2  00F3               	movwf	___llmod@divisor+3
  2398  05B3  3000               	movlw	0
  2399  05B4  00F2               	movwf	___llmod@divisor+2
  2400  05B5  3000               	movlw	0
  2401  05B6  00F1               	movwf	___llmod@divisor+1
  2402  05B7  300A               	movlw	10
  2403  05B8  00F0               	movwf	___llmod@divisor
  2404  05B9  082F               	movf	(sprintf@tmpval+3)^(0+128),w
  2405  05BA  00F7               	movwf	___llmod@dividend+3
  2406  05BB  082E               	movf	(sprintf@tmpval+2)^(0+128),w
  2407  05BC  00F6               	movwf	___llmod@dividend+2
  2408  05BD  082D               	movf	(sprintf@tmpval+1)^(0+128),w
  2409  05BE  00F5               	movwf	___llmod@dividend+1
  2410  05BF  082C               	movf	sprintf@tmpval^(0+128),w
  2411  05C0  00F4               	movwf	___llmod@dividend
  2412  05C1  160A  118A  25B5  120A  118A  	fcall	___llmod
  2413  05C6  0873               	movf	?___llmod+3,w
  2414  05C7  1683               	bsf	3,5	;RP0=1, select bank1
  2415  05C8  1303               	bcf	3,6	;RP1=0, select bank1
  2416  05C9  00AF               	movwf	(sprintf@tmpval+3)^(0+128)
  2417  05CA  0872               	movf	?___llmod+2,w
  2418  05CB  00AE               	movwf	(sprintf@tmpval+2)^(0+128)
  2419  05CC  0871               	movf	?___llmod+1,w
  2420  05CD  00AD               	movwf	(sprintf@tmpval+1)^(0+128)
  2421  05CE  0870               	movf	?___llmod,w
  2422  05CF  00AC               	movwf	sprintf@tmpval^(0+128)
  2423                           
  2424                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2425  05D0  082C               	movf	sprintf@tmpval^(0+128),w
  2426  05D1  3E30               	addlw	48
  2427  05D2  1283               	bcf	3,5	;RP0=0, select bank0
  2428  05D3  1303               	bcf	3,6	;RP1=0, select bank0
  2429  05D4  2D58               	goto	L3
  2430  05D5                     l2437:	
  2431                           ;doprnt.c: 1204: }
  2432                           ;doprnt.c: 1206: }
  2433                           ;doprnt.c: 1207: while(exp > 0) {
  2434                           
  2435                           
  2436                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2437  05D5  3030               	movlw	48
  2438  05D6  1283               	bcf	3,5	;RP0=0, select bank0
  2439  05D7  1303               	bcf	3,6	;RP1=0, select bank0
  2440  05D8  00DE               	movwf	??_sprintf
  2441  05D9  1683               	bsf	3,5	;RP0=1, select bank1
  2442  05DA  1303               	bcf	3,6	;RP1=0, select bank1
  2443  05DB  0830               	movf	sprintf@sp^(0+128),w
  2444  05DC  0084               	movwf	4
  2445  05DD  1283               	bcf	3,5	;RP0=0, select bank0
  2446  05DE  1303               	bcf	3,6	;RP1=0, select bank0
  2447  05DF  085E               	movf	??_sprintf,w
  2448  05E0  1383               	bcf	3,7	;select IRP bank0
  2449  05E1  0080               	movwf	0
  2450  05E2  3001               	movlw	1
  2451  05E3  00DE               	movwf	??_sprintf
  2452  05E4  085E               	movf	??_sprintf,w
  2453  05E5  1683               	bsf	3,5	;RP0=1, select bank1
  2454  05E6  1303               	bcf	3,6	;RP1=0, select bank1
  2455  05E7  07B0               	addwf	sprintf@sp^(0+128),f
  2456                           
  2457                           ;doprnt.c: 1209: exp--;
  2458  05E8  30FF               	movlw	255
  2459  05E9  07AA               	addwf	sprintf@exp^(0+128),f
  2460  05EA  1803               	skipnc
  2461  05EB  0AAB               	incf	(sprintf@exp+1)^(0+128),f
  2462  05EC  30FF               	movlw	255
  2463  05ED  07AB               	addwf	(sprintf@exp+1)^(0+128),f
  2464  05EE                     l2443:	
  2465  05EE  082B               	movf	(sprintf@exp+1)^(0+128),w
  2466  05EF  3A80               	xorlw	128
  2467  05F0  00FF               	movwf	127
  2468  05F1  3080               	movlw	128
  2469  05F2  027F               	subwf	127,w
  2470  05F3  1D03               	skipz
  2471  05F4  2DF7               	goto	u3765
  2472  05F5  3001               	movlw	1
  2473  05F6  022A               	subwf	sprintf@exp^(0+128),w
  2474  05F7                     u3765:	
  2475  05F7  1803               	skipnc
  2476  05F8  2DD5               	goto	l2437
  2477                           
  2478                           ;doprnt.c: 1210: }
  2479                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2480  05F9  1683               	bsf	3,5	;RP0=1, select bank1
  2481  05FA  1303               	bcf	3,6	;RP1=0, select bank1
  2482  05FB  0832               	movf	(sprintf@prec+1)^(0+128),w
  2483  05FC  3A80               	xorlw	128
  2484  05FD  00FF               	movwf	127
  2485  05FE  3080               	movlw	128
  2486  05FF  027F               	subwf	127,w
  2487  0600  1D03               	skipz
  2488  0601  2E04               	goto	u3775
  2489  0602  3009               	movlw	9
  2490  0603  0231               	subwf	sprintf@prec^(0+128),w
  2491  0604                     u3775:	
  2492  0604  1C03               	skipc
  2493  0605  2E08               	goto	l2449
  2494                           
  2495                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2496  0606  3008               	movlw	8
  2497  0607  2E0B               	goto	L4
  2498  0608                     l2449:	
  2499                           
  2500                           ;doprnt.c: 1213: else
  2501                           ;doprnt.c: 1214: c = prec;
  2502  0608  1683               	bsf	3,5	;RP0=1, select bank1
  2503  0609  1303               	bcf	3,6	;RP1=0, select bank1
  2504  060A  0831               	movf	sprintf@prec^(0+128),w
  2505  060B                     L4:	
  2506  060B  1283               	bcf	3,5	;RP0=0, select bank0
  2507  060C  1303               	bcf	3,6	;RP1=0, select bank0
  2508  060D  00DE               	movwf	??_sprintf
  2509  060E  085E               	movf	??_sprintf,w
  2510  060F  1683               	bsf	3,5	;RP0=1, select bank1
  2511  0610  1303               	bcf	3,6	;RP1=0, select bank1
  2512  0611  00B6               	movwf	sprintf@c^(0+128)
  2513                           
  2514                           ;doprnt.c: 1215: prec -= c;
  2515  0612  0836               	movf	sprintf@c^(0+128),w
  2516  0613  1283               	bcf	3,5	;RP0=0, select bank0
  2517  0614  1303               	bcf	3,6	;RP1=0, select bank0
  2518  0615  00DE               	movwf	??_sprintf
  2519  0616  01DF               	clrf	??_sprintf+1
  2520  0617  1BDE               	btfsc	??_sprintf,7
  2521  0618  03DF               	decf	??_sprintf+1,f
  2522  0619  085E               	movf	??_sprintf,w
  2523  061A  1683               	bsf	3,5	;RP0=1, select bank1
  2524  061B  1303               	bcf	3,6	;RP1=0, select bank1
  2525  061C  02B1               	subwf	sprintf@prec^(0+128),f
  2526  061D  1283               	bcf	3,5	;RP0=0, select bank0
  2527  061E  1303               	bcf	3,6	;RP1=0, select bank0
  2528  061F  085F               	movf	??_sprintf+1,w
  2529  0620  1683               	bsf	3,5	;RP0=1, select bank1
  2530  0621  1303               	bcf	3,6	;RP1=0, select bank1
  2531  0622  1C03               	skipc
  2532  0623  03B2               	decf	(sprintf@prec+1)^(0+128),f
  2533  0624  02B2               	subwf	(sprintf@prec+1)^(0+128),f
  2534                           
  2535                           ;doprnt.c: 1219: if(c)
  2536  0625  0836               	movf	sprintf@c^(0+128),w
  2537  0626  1903               	btfsc	3,2
  2538  0627  2E3B               	goto	l2457
  2539                           
  2540                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2541  0628  302E               	movlw	46
  2542  0629  1283               	bcf	3,5	;RP0=0, select bank0
  2543  062A  1303               	bcf	3,6	;RP1=0, select bank0
  2544  062B  00DE               	movwf	??_sprintf
  2545  062C  1683               	bsf	3,5	;RP0=1, select bank1
  2546  062D  1303               	bcf	3,6	;RP1=0, select bank1
  2547  062E  0830               	movf	sprintf@sp^(0+128),w
  2548  062F  0084               	movwf	4
  2549  0630  1283               	bcf	3,5	;RP0=0, select bank0
  2550  0631  1303               	bcf	3,6	;RP1=0, select bank0
  2551  0632  085E               	movf	??_sprintf,w
  2552  0633  1383               	bcf	3,7	;select IRP bank0
  2553  0634  0080               	movwf	0
  2554  0635  3001               	movlw	1
  2555  0636  00DE               	movwf	??_sprintf
  2556  0637  085E               	movf	??_sprintf,w
  2557  0638  1683               	bsf	3,5	;RP0=1, select bank1
  2558  0639  1303               	bcf	3,6	;RP1=0, select bank1
  2559  063A  07B0               	addwf	sprintf@sp^(0+128),f
  2560  063B                     l2457:	
  2561                           
  2562                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2563  063B  0836               	movf	sprintf@c^(0+128),w
  2564  063C  120A  158A  2565  120A  118A  	fcall	_scale
  2565  0641  1283               	bcf	3,5	;RP0=0, select bank0
  2566  0642  1303               	bcf	3,6	;RP1=0, select bank0
  2567  0643  0837               	movf	?_scale,w
  2568  0644  1683               	bsf	3,5	;RP0=1, select bank1
  2569  0645  1303               	bcf	3,6	;RP1=0, select bank1
  2570  0646  00A0               	movwf	_sprintf$576^(0+128)
  2571  0647  1283               	bcf	3,5	;RP0=0, select bank0
  2572  0648  1303               	bcf	3,6	;RP1=0, select bank0
  2573  0649  0838               	movf	?_scale+1,w
  2574  064A  1683               	bsf	3,5	;RP0=1, select bank1
  2575  064B  1303               	bcf	3,6	;RP1=0, select bank1
  2576  064C  00A1               	movwf	(_sprintf$576+1)^(0+128)
  2577  064D  1283               	bcf	3,5	;RP0=0, select bank0
  2578  064E  1303               	bcf	3,6	;RP1=0, select bank0
  2579  064F  0839               	movf	?_scale+2,w
  2580  0650  1683               	bsf	3,5	;RP0=1, select bank1
  2581  0651  1303               	bcf	3,6	;RP1=0, select bank1
  2582  0652  00A2               	movwf	(_sprintf$576+2)^(0+128)
  2583                           
  2584                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2585  0653  0820               	movf	_sprintf$576^(0+128),w
  2586  0654  1283               	bcf	3,5	;RP0=0, select bank0
  2587  0655  1303               	bcf	3,6	;RP1=0, select bank0
  2588  0656  00AA               	movwf	___ftmul@f2
  2589  0657  1683               	bsf	3,5	;RP0=1, select bank1
  2590  0658  1303               	bcf	3,6	;RP1=0, select bank1
  2591  0659  0821               	movf	(_sprintf$576+1)^(0+128),w
  2592  065A  1283               	bcf	3,5	;RP0=0, select bank0
  2593  065B  1303               	bcf	3,6	;RP1=0, select bank0
  2594  065C  00AB               	movwf	___ftmul@f2+1
  2595  065D  1683               	bsf	3,5	;RP0=1, select bank1
  2596  065E  1303               	bcf	3,6	;RP1=0, select bank1
  2597  065F  0822               	movf	(_sprintf$576+2)^(0+128),w
  2598  0660  1283               	bcf	3,5	;RP0=0, select bank0
  2599  0661  1303               	bcf	3,6	;RP1=0, select bank0
  2600  0662  00AC               	movwf	___ftmul@f2+2
  2601  0663  1683               	bsf	3,5	;RP0=1, select bank1
  2602  0664  1303               	bcf	3,6	;RP1=0, select bank1
  2603  0665  0833               	movf	sprintf@fval^(0+128),w
  2604  0666  1283               	bcf	3,5	;RP0=0, select bank0
  2605  0667  1303               	bcf	3,6	;RP1=0, select bank0
  2606  0668  00A7               	movwf	___ftmul@f1
  2607  0669  1683               	bsf	3,5	;RP0=1, select bank1
  2608  066A  1303               	bcf	3,6	;RP1=0, select bank1
  2609  066B  0834               	movf	(sprintf@fval+1)^(0+128),w
  2610  066C  1283               	bcf	3,5	;RP0=0, select bank0
  2611  066D  1303               	bcf	3,6	;RP1=0, select bank0
  2612  066E  00A8               	movwf	___ftmul@f1+1
  2613  066F  1683               	bsf	3,5	;RP0=1, select bank1
  2614  0670  1303               	bcf	3,6	;RP1=0, select bank1
  2615  0671  0835               	movf	(sprintf@fval+2)^(0+128),w
  2616  0672  1283               	bcf	3,5	;RP0=0, select bank0
  2617  0673  1303               	bcf	3,6	;RP1=0, select bank0
  2618  0674  00A9               	movwf	___ftmul@f1+2
  2619  0675  120A  158A  213E  120A  118A  	fcall	___ftmul
  2620  067A  1283               	bcf	3,5	;RP0=0, select bank0
  2621  067B  1303               	bcf	3,6	;RP1=0, select bank0
  2622  067C  0827               	movf	?___ftmul,w
  2623  067D  00C0               	movwf	___fttol@f1
  2624  067E  0828               	movf	?___ftmul+1,w
  2625  067F  00C1               	movwf	___fttol@f1+1
  2626  0680  0829               	movf	?___ftmul+2,w
  2627  0681  00C2               	movwf	___fttol@f1+2
  2628  0682  160A  118A  2772  120A  118A  	fcall	___fttol
  2629  0687  1283               	bcf	3,5	;RP0=0, select bank0
  2630  0688  1303               	bcf	3,6	;RP1=0, select bank0
  2631  0689  0843               	movf	?___fttol+3,w
  2632  068A  1683               	bsf	3,5	;RP0=1, select bank1
  2633  068B  1303               	bcf	3,6	;RP1=0, select bank1
  2634  068C  00A9               	movwf	(sprintf@val+3)^(0+128)
  2635  068D  1283               	bcf	3,5	;RP0=0, select bank0
  2636  068E  1303               	bcf	3,6	;RP1=0, select bank0
  2637  068F  0842               	movf	?___fttol+2,w
  2638  0690  1683               	bsf	3,5	;RP0=1, select bank1
  2639  0691  1303               	bcf	3,6	;RP1=0, select bank1
  2640  0692  00A8               	movwf	(sprintf@val+2)^(0+128)
  2641  0693  1283               	bcf	3,5	;RP0=0, select bank0
  2642  0694  1303               	bcf	3,6	;RP1=0, select bank0
  2643  0695  0841               	movf	?___fttol+1,w
  2644  0696  1683               	bsf	3,5	;RP0=1, select bank1
  2645  0697  1303               	bcf	3,6	;RP1=0, select bank1
  2646  0698  00A7               	movwf	(sprintf@val+1)^(0+128)
  2647  0699  1283               	bcf	3,5	;RP0=0, select bank0
  2648  069A  1303               	bcf	3,6	;RP1=0, select bank0
  2649  069B  0840               	movf	?___fttol,w
  2650  069C  1683               	bsf	3,5	;RP0=1, select bank1
  2651  069D  1303               	bcf	3,6	;RP1=0, select bank1
  2652  069E                     L5:	
  2653  069E  00A6               	movwf	sprintf@val^(0+128)
  2654  069F  30FF               	movlw	255
  2655  06A0  1283               	bcf	3,5	;RP0=0, select bank0
  2656  06A1  1303               	bcf	3,6	;RP1=0, select bank0
  2657  06A2  00DE               	movwf	??_sprintf
  2658  06A3  085E               	movf	??_sprintf,w
  2659  06A4  1683               	bsf	3,5	;RP0=1, select bank1
  2660  06A5  1303               	bcf	3,6	;RP1=0, select bank1
  2661  06A6  07B6               	addwf	sprintf@c^(0+128),f
  2662  06A7  0A36               	incf	sprintf@c^(0+128),w
  2663  06A8  1903               	btfsc	3,2
  2664  06A9  2F74               	goto	l2477
  2665                           
  2666                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2667                           
  2668                           ;doprnt.c: 1228: while(c--) {
  2669  06AA  0836               	movf	sprintf@c^(0+128),w
  2670  06AB  1283               	bcf	3,5	;RP0=0, select bank0
  2671  06AC  1303               	bcf	3,6	;RP1=0, select bank0
  2672  06AD  00DE               	movwf	??_sprintf
  2673  06AE  3001               	movlw	1
  2674  06AF                     u3795:	
  2675  06AF  1003               	clrc
  2676  06B0  0DDE               	rlf	??_sprintf,f
  2677  06B1  3EFF               	addlw	-1
  2678  06B2  1D03               	skipz
  2679  06B3  2EAF               	goto	u3795
  2680  06B4  1003               	clrc
  2681  06B5  0D5E               	rlf	??_sprintf,w
  2682  06B6  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2683  06B7  0084               	movwf	4
  2684  06B8  160A  118A  200A  120A  118A  	fcall	stringdir
  2685  06BD  00F0               	movwf	___lldiv@divisor
  2686  06BE  160A  118A  200A  120A  118A  	fcall	stringdir
  2687  06C3  00F1               	movwf	___lldiv@divisor+1
  2688  06C4  160A  118A  200A  120A  118A  	fcall	stringdir
  2689  06C9  00F2               	movwf	___lldiv@divisor+2
  2690  06CA  160A  118A  200A  120A  118A  	fcall	stringdir
  2691  06CF  00F3               	movwf	___lldiv@divisor+3
  2692  06D0  1683               	bsf	3,5	;RP0=1, select bank1
  2693  06D1  1303               	bcf	3,6	;RP1=0, select bank1
  2694  06D2  0829               	movf	(sprintf@val+3)^(0+128),w
  2695  06D3  00F7               	movwf	___lldiv@dividend+3
  2696  06D4  0828               	movf	(sprintf@val+2)^(0+128),w
  2697  06D5  00F6               	movwf	___lldiv@dividend+2
  2698  06D6  0827               	movf	(sprintf@val+1)^(0+128),w
  2699  06D7  00F5               	movwf	___lldiv@dividend+1
  2700  06D8  0826               	movf	sprintf@val^(0+128),w
  2701  06D9  00F4               	movwf	___lldiv@dividend
  2702  06DA  160A  118A  2714  120A  118A  	fcall	___lldiv
  2703  06DF  0873               	movf	?___lldiv+3,w
  2704  06E0  1683               	bsf	3,5	;RP0=1, select bank1
  2705  06E1  1303               	bcf	3,6	;RP1=0, select bank1
  2706  06E2  00AF               	movwf	(sprintf@tmpval+3)^(0+128)
  2707  06E3  0872               	movf	?___lldiv+2,w
  2708  06E4  00AE               	movwf	(sprintf@tmpval+2)^(0+128)
  2709  06E5  0871               	movf	?___lldiv+1,w
  2710  06E6  00AD               	movwf	(sprintf@tmpval+1)^(0+128)
  2711  06E7  0870               	movf	?___lldiv,w
  2712  06E8  00AC               	movwf	sprintf@tmpval^(0+128)
  2713                           
  2714                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2715  06E9  3000               	movlw	0
  2716  06EA  00F3               	movwf	___llmod@divisor+3
  2717  06EB  3000               	movlw	0
  2718  06EC  00F2               	movwf	___llmod@divisor+2
  2719  06ED  3000               	movlw	0
  2720  06EE  00F1               	movwf	___llmod@divisor+1
  2721  06EF  300A               	movlw	10
  2722  06F0  00F0               	movwf	___llmod@divisor
  2723  06F1  082F               	movf	(sprintf@tmpval+3)^(0+128),w
  2724  06F2  00F7               	movwf	___llmod@dividend+3
  2725  06F3  082E               	movf	(sprintf@tmpval+2)^(0+128),w
  2726  06F4  00F6               	movwf	___llmod@dividend+2
  2727  06F5  082D               	movf	(sprintf@tmpval+1)^(0+128),w
  2728  06F6  00F5               	movwf	___llmod@dividend+1
  2729  06F7  082C               	movf	sprintf@tmpval^(0+128),w
  2730  06F8  00F4               	movwf	___llmod@dividend
  2731  06F9  160A  118A  25B5  120A  118A  	fcall	___llmod
  2732  06FE  0873               	movf	?___llmod+3,w
  2733  06FF  1683               	bsf	3,5	;RP0=1, select bank1
  2734  0700  1303               	bcf	3,6	;RP1=0, select bank1
  2735  0701  00AF               	movwf	(sprintf@tmpval+3)^(0+128)
  2736  0702  0872               	movf	?___llmod+2,w
  2737  0703  00AE               	movwf	(sprintf@tmpval+2)^(0+128)
  2738  0704  0871               	movf	?___llmod+1,w
  2739  0705  00AD               	movwf	(sprintf@tmpval+1)^(0+128)
  2740  0706  0870               	movf	?___llmod,w
  2741  0707  00AC               	movwf	sprintf@tmpval^(0+128)
  2742                           
  2743                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2744  0708  082C               	movf	sprintf@tmpval^(0+128),w
  2745  0709  3E30               	addlw	48
  2746  070A  1283               	bcf	3,5	;RP0=0, select bank0
  2747  070B  1303               	bcf	3,6	;RP1=0, select bank0
  2748  070C  00DE               	movwf	??_sprintf
  2749  070D  1683               	bsf	3,5	;RP0=1, select bank1
  2750  070E  1303               	bcf	3,6	;RP1=0, select bank1
  2751  070F  0830               	movf	sprintf@sp^(0+128),w
  2752  0710  0084               	movwf	4
  2753  0711  1283               	bcf	3,5	;RP0=0, select bank0
  2754  0712  1303               	bcf	3,6	;RP1=0, select bank0
  2755  0713  085E               	movf	??_sprintf,w
  2756  0714  1383               	bcf	3,7	;select IRP bank0
  2757  0715  0080               	movwf	0
  2758  0716  3001               	movlw	1
  2759  0717  00DE               	movwf	??_sprintf
  2760  0718  085E               	movf	??_sprintf,w
  2761  0719  1683               	bsf	3,5	;RP0=1, select bank1
  2762  071A  1303               	bcf	3,6	;RP1=0, select bank1
  2763  071B  07B0               	addwf	sprintf@sp^(0+128),f
  2764                           
  2765                           ;doprnt.c: 1232: val %= dpowers[c];
  2766  071C  0836               	movf	sprintf@c^(0+128),w
  2767  071D  1283               	bcf	3,5	;RP0=0, select bank0
  2768  071E  1303               	bcf	3,6	;RP1=0, select bank0
  2769  071F  00DE               	movwf	??_sprintf
  2770  0720  3001               	movlw	1
  2771  0721                     u3805:	
  2772  0721  1003               	clrc
  2773  0722  0DDE               	rlf	??_sprintf,f
  2774  0723  3EFF               	addlw	-1
  2775  0724  1D03               	skipz
  2776  0725  2F21               	goto	u3805
  2777  0726  1003               	clrc
  2778  0727  0D5E               	rlf	??_sprintf,w
  2779  0728  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2780  0729  0084               	movwf	4
  2781  072A  160A  118A  200A  120A  118A  	fcall	stringdir
  2782  072F  00F0               	movwf	___llmod@divisor
  2783  0730  160A  118A  200A  120A  118A  	fcall	stringdir
  2784  0735  00F1               	movwf	___llmod@divisor+1
  2785  0736  160A  118A  200A  120A  118A  	fcall	stringdir
  2786  073B  00F2               	movwf	___llmod@divisor+2
  2787  073C  160A  118A  200A  120A  118A  	fcall	stringdir
  2788  0741  00F3               	movwf	___llmod@divisor+3
  2789  0742  1683               	bsf	3,5	;RP0=1, select bank1
  2790  0743  1303               	bcf	3,6	;RP1=0, select bank1
  2791  0744  0829               	movf	(sprintf@val+3)^(0+128),w
  2792  0745  00F7               	movwf	___llmod@dividend+3
  2793  0746  0828               	movf	(sprintf@val+2)^(0+128),w
  2794  0747  00F6               	movwf	___llmod@dividend+2
  2795  0748  0827               	movf	(sprintf@val+1)^(0+128),w
  2796  0749  00F5               	movwf	___llmod@dividend+1
  2797  074A  0826               	movf	sprintf@val^(0+128),w
  2798  074B  00F4               	movwf	___llmod@dividend
  2799  074C  160A  118A  25B5  120A  118A  	fcall	___llmod
  2800  0751  0873               	movf	?___llmod+3,w
  2801  0752  1683               	bsf	3,5	;RP0=1, select bank1
  2802  0753  1303               	bcf	3,6	;RP1=0, select bank1
  2803  0754  00A9               	movwf	(sprintf@val+3)^(0+128)
  2804  0755  0872               	movf	?___llmod+2,w
  2805  0756  00A8               	movwf	(sprintf@val+2)^(0+128)
  2806  0757  0871               	movf	?___llmod+1,w
  2807  0758  00A7               	movwf	(sprintf@val+1)^(0+128)
  2808  0759  0870               	movf	?___llmod,w
  2809  075A  2E9E               	goto	L5
  2810  075B                     l2471:	
  2811                           ;doprnt.c: 1233: }
  2812                           ;doprnt.c: 1235: while(prec) {
  2813                           
  2814                           
  2815                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2816  075B  3030               	movlw	48
  2817  075C  1283               	bcf	3,5	;RP0=0, select bank0
  2818  075D  1303               	bcf	3,6	;RP1=0, select bank0
  2819  075E  00DE               	movwf	??_sprintf
  2820  075F  1683               	bsf	3,5	;RP0=1, select bank1
  2821  0760  1303               	bcf	3,6	;RP1=0, select bank1
  2822  0761  0830               	movf	sprintf@sp^(0+128),w
  2823  0762  0084               	movwf	4
  2824  0763  1283               	bcf	3,5	;RP0=0, select bank0
  2825  0764  1303               	bcf	3,6	;RP1=0, select bank0
  2826  0765  085E               	movf	??_sprintf,w
  2827  0766  1383               	bcf	3,7	;select IRP bank0
  2828  0767  0080               	movwf	0
  2829  0768  3001               	movlw	1
  2830  0769  00DE               	movwf	??_sprintf
  2831  076A  085E               	movf	??_sprintf,w
  2832  076B  1683               	bsf	3,5	;RP0=1, select bank1
  2833  076C  1303               	bcf	3,6	;RP1=0, select bank1
  2834  076D  07B0               	addwf	sprintf@sp^(0+128),f
  2835                           
  2836                           ;doprnt.c: 1237: prec--;
  2837  076E  30FF               	movlw	255
  2838  076F  07B1               	addwf	sprintf@prec^(0+128),f
  2839  0770  1803               	skipnc
  2840  0771  0AB2               	incf	(sprintf@prec+1)^(0+128),f
  2841  0772  30FF               	movlw	255
  2842  0773  07B2               	addwf	(sprintf@prec+1)^(0+128),f
  2843  0774                     l2477:	
  2844  0774  0831               	movf	sprintf@prec^(0+128),w
  2845  0775  0432               	iorwf	(sprintf@prec+1)^(0+128),w
  2846  0776  1903               	btfsc	3,2
  2847  0777  29C3               	goto	l2495
  2848  0778  2F5B               	goto	l2471
  2849  0779                     l2479:	
  2850                           ;doprnt.c: 1238: }
  2851                           ;doprnt.c: 1245: continue;
  2852                           
  2853                           
  2854                           ;doprnt.c: 1246: }
  2855                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2856  0779  1683               	bsf	3,5	;RP0=1, select bank1
  2857  077A  1303               	bcf	3,6	;RP1=0, select bank1
  2858  077B  0831               	movf	sprintf@prec^(0+128),w
  2859  077C  0432               	iorwf	(sprintf@prec+1)^(0+128),w
  2860  077D  1D03               	btfss	3,2
  2861  077E  2F8B               	goto	l184
  2862  077F  0829               	movf	(sprintf@val+3)^(0+128),w
  2863  0780  0428               	iorwf	(sprintf@val+2)^(0+128),w
  2864  0781  0427               	iorwf	(sprintf@val+1)^(0+128),w
  2865  0782  0426               	iorwf	sprintf@val^(0+128),w
  2866  0783  1D03               	skipz
  2867  0784  2F8B               	goto	l184
  2868                           
  2869                           ;doprnt.c: 1291: prec++;
  2870  0785  3001               	movlw	1
  2871  0786  07B1               	addwf	sprintf@prec^(0+128),f
  2872  0787  1803               	skipnc
  2873  0788  0AB2               	incf	(sprintf@prec+1)^(0+128),f
  2874  0789  3000               	movlw	0
  2875  078A  07B2               	addwf	(sprintf@prec+1)^(0+128),f
  2876  078B                     l184:	
  2877                           
  2878                           ;doprnt.c: 1339: if(c < prec)
  2879  078B  0836               	movf	sprintf@c^(0+128),w
  2880  078C  1283               	bcf	3,5	;RP0=0, select bank0
  2881  078D  1303               	bcf	3,6	;RP1=0, select bank0
  2882  078E  00DE               	movwf	??_sprintf
  2883  078F  01DF               	clrf	??_sprintf+1
  2884  0790  1BDE               	btfsc	??_sprintf,7
  2885  0791  03DF               	decf	??_sprintf+1,f
  2886  0792  085F               	movf	??_sprintf+1,w
  2887  0793  3A80               	xorlw	128
  2888  0794  00E0               	movwf	??_sprintf+2
  2889  0795  1683               	bsf	3,5	;RP0=1, select bank1
  2890  0796  1303               	bcf	3,6	;RP1=0, select bank1
  2891  0797  0832               	movf	(sprintf@prec+1)^(0+128),w
  2892  0798  3A80               	xorlw	128
  2893  0799  1283               	bcf	3,5	;RP0=0, select bank0
  2894  079A  1303               	bcf	3,6	;RP1=0, select bank0
  2895  079B  0260               	subwf	??_sprintf+2,w
  2896  079C  1D03               	skipz
  2897  079D  2FA4               	goto	u3855
  2898  079E  1683               	bsf	3,5	;RP0=1, select bank1
  2899  079F  1303               	bcf	3,6	;RP1=0, select bank1
  2900  07A0  0831               	movf	sprintf@prec^(0+128),w
  2901  07A1  1283               	bcf	3,5	;RP0=0, select bank0
  2902  07A2  1303               	bcf	3,6	;RP1=0, select bank0
  2903  07A3  025E               	subwf	??_sprintf,w
  2904  07A4                     u3855:	
  2905  07A4  1803               	skipnc
  2906  07A5  2FB1               	goto	l2487
  2907                           
  2908                           ;doprnt.c: 1340: c = prec;
  2909  07A6  1683               	bsf	3,5	;RP0=1, select bank1
  2910  07A7  1303               	bcf	3,6	;RP1=0, select bank1
  2911  07A8  0831               	movf	sprintf@prec^(0+128),w
  2912  07A9  1283               	bcf	3,5	;RP0=0, select bank0
  2913  07AA  1303               	bcf	3,6	;RP1=0, select bank0
  2914  07AB  00DE               	movwf	??_sprintf
  2915  07AC  085E               	movf	??_sprintf,w
  2916  07AD  1683               	bsf	3,5	;RP0=1, select bank1
  2917  07AE  1303               	bcf	3,6	;RP1=0, select bank1
  2918  07AF  00B6               	movwf	sprintf@c^(0+128)
  2919  07B0  2FD3               	goto	l186
  2920  07B1                     l2487:	
  2921                           
  2922                           ;doprnt.c: 1341: else if(prec < c)
  2923  07B1  1683               	bsf	3,5	;RP0=1, select bank1
  2924  07B2  1303               	bcf	3,6	;RP1=0, select bank1
  2925  07B3  0836               	movf	sprintf@c^(0+128),w
  2926  07B4  1283               	bcf	3,5	;RP0=0, select bank0
  2927  07B5  1303               	bcf	3,6	;RP1=0, select bank0
  2928  07B6  00DE               	movwf	??_sprintf
  2929  07B7  01DF               	clrf	??_sprintf+1
  2930  07B8  1BDE               	btfsc	??_sprintf,7
  2931  07B9  03DF               	decf	??_sprintf+1,f
  2932  07BA  1683               	bsf	3,5	;RP0=1, select bank1
  2933  07BB  1303               	bcf	3,6	;RP1=0, select bank1
  2934  07BC  0832               	movf	(sprintf@prec+1)^(0+128),w
  2935  07BD  3A80               	xorlw	128
  2936  07BE  1283               	bcf	3,5	;RP0=0, select bank0
  2937  07BF  1303               	bcf	3,6	;RP1=0, select bank0
  2938  07C0  00E0               	movwf	??_sprintf+2
  2939  07C1  085F               	movf	??_sprintf+1,w
  2940  07C2  3A80               	xorlw	128
  2941  07C3  0260               	subwf	??_sprintf+2,w
  2942  07C4  1D03               	skipz
  2943  07C5  2FCA               	goto	u3865
  2944  07C6  085E               	movf	??_sprintf,w
  2945  07C7  1683               	bsf	3,5	;RP0=1, select bank1
  2946  07C8  1303               	bcf	3,6	;RP1=0, select bank1
  2947  07C9  0231               	subwf	sprintf@prec^(0+128),w
  2948  07CA                     u3865:	
  2949  07CA  1803               	skipnc
  2950  07CB  2FD3               	goto	l186
  2951                           
  2952                           ;doprnt.c: 1342: prec = c;
  2953  07CC  1683               	bsf	3,5	;RP0=1, select bank1
  2954  07CD  1303               	bcf	3,6	;RP1=0, select bank1
  2955  07CE  0836               	movf	sprintf@c^(0+128),w
  2956  07CF  00B1               	movwf	sprintf@prec^(0+128)
  2957  07D0  01B2               	clrf	(sprintf@prec+1)^(0+128)
  2958  07D1  1BB1               	btfsc	sprintf@prec^(0+128),7
  2959  07D2  03B2               	decf	(sprintf@prec+1)^(0+128),f
  2960  07D3                     l186:	
  2961                           
  2962                           ;doprnt.c: 1422: {
  2963                           ;doprnt.c: 1438: if(flag & 0x03)
  2964  07D3  3003               	movlw	3
  2965  07D4  1683               	bsf	3,5	;RP0=1, select bank1
  2966  07D5  1303               	bcf	3,6	;RP1=0, select bank1
  2967  07D6  0524               	andwf	sprintf@flag^(0+128),w
  2968  07D7  1283               	bcf	3,5	;RP0=0, select bank0
  2969  07D8  1303               	bcf	3,6	;RP1=0, select bank0
  2970  07D9  00DE               	movwf	??_sprintf
  2971  07DA  3000               	movlw	0
  2972  07DB  1683               	bsf	3,5	;RP0=1, select bank1
  2973  07DC  1303               	bcf	3,6	;RP1=0, select bank1
  2974  07DD  0525               	andwf	(sprintf@flag+1)^(0+128),w
  2975  07DE  1283               	bcf	3,5	;RP0=0, select bank0
  2976  07DF  1303               	bcf	3,6	;RP1=0, select bank0
  2977  07E0  00DF               	movwf	??_sprintf+1
  2978  07E1  085E               	movf	??_sprintf,w
  2979  07E2  045F               	iorwf	??_sprintf+1,w
  2980  07E3  1903               	btfsc	3,2
  2981  07E4  29C3               	goto	l2495
  2982                           
  2983                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2984  07E5  302D               	movlw	45
  2985  07E6                     L6:	
  2986  07E6  00DE               	movwf	??_sprintf
  2987  07E7  1683               	bsf	3,5	;RP0=1, select bank1
  2988  07E8  1303               	bcf	3,6	;RP1=0, select bank1
  2989  07E9  0830               	movf	sprintf@sp^(0+128),w
  2990  07EA  0084               	movwf	4
  2991  07EB  1283               	bcf	3,5	;RP0=0, select bank0
  2992  07EC  1303               	bcf	3,6	;RP1=0, select bank0
  2993  07ED  085E               	movf	??_sprintf,w
  2994  07EE  1383               	bcf	3,7	;select IRP bank0
  2995  07EF  0080               	movwf	0
  2996  07F0  3001               	movlw	1
  2997  07F1  00DE               	movwf	??_sprintf
  2998  07F2  085E               	movf	??_sprintf,w
  2999  07F3  1683               	bsf	3,5	;RP0=1, select bank1
  3000  07F4  1303               	bcf	3,6	;RP1=0, select bank1
  3001  07F5  07B0               	addwf	sprintf@sp^(0+128),f
  3002  07F6  29C3               	goto	l2495
  3003  07F7                     l2497:	
  3004                           ;doprnt.c: 1469: }
  3005                           ;doprnt.c: 1533: }
  3006                           ;doprnt.c: 1535: alldone:
  3007                           
  3008                           
  3009                           ;doprnt.c: 1538: *sp = 0;
  3010  07F7  0830               	movf	sprintf@sp^(0+128),w
  3011  07F8  0084               	movwf	4
  3012  07F9  1383               	bcf	3,7	;select IRP bank0
  3013  07FA  0180               	clrf	0
  3014  07FB  0008               	return
  3015  07FC                     __end_of_sprintf:	
  3016                           ;doprnt.c: 1540: return 0;
  3017                           ;	Return value of _sprintf is never used
  3018                           
  3019                           
  3020                           	psect	text2
  3021  0D65                     __ptext2:	
  3022 ;; *************** function _scale *****************
  3023 ;; Defined at:
  3024 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3025 ;; Parameters:    Size  Location     Type
  3026 ;;  scl             1    wreg     char 
  3027 ;; Auto vars:     Size  Location     Type
  3028 ;;  scl             1   31[BANK0 ] char 
  3029 ;; Return value:  Size  Location     Type
  3030 ;;                  3   23[BANK0 ] char 
  3031 ;; Registers used:
  3032 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3033 ;; Tracked objects:
  3034 ;;		On entry : 0/0
  3035 ;;		On exit  : 0/0
  3036 ;;		Unchanged: 0/0
  3037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3038 ;;      Params:         0       3       0       0       0
  3039 ;;      Locals:         0       4       0       0       0
  3040 ;;      Temps:          0       2       0       0       0
  3041 ;;      Totals:         0       9       0       0       0
  3042 ;;Total ram usage:        9 bytes
  3043 ;; Hardware stack levels used:    1
  3044 ;; Hardware stack levels required when called:    2
  3045 ;; This function calls:
  3046 ;;		___awdiv
  3047 ;;		___awmod
  3048 ;;		___bmul
  3049 ;;		___ftmul
  3050 ;; This function is called by:
  3051 ;;		_sprintf
  3052 ;; This function uses a non-reentrant model
  3053 ;;
  3054                           
  3055                           
  3056                           ;psect for function _scale
  3057  0D65                     _scale:	
  3058                           
  3059                           ;incstack = 0
  3060                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3061                           ;scale@scl stored from wreg
  3062  0D65  1283               	bcf	3,5	;RP0=0, select bank0
  3063  0D66  1303               	bcf	3,6	;RP1=0, select bank0
  3064  0D67  00BF               	movwf	scale@scl
  3065                           
  3066                           ;doprnt.c: 428: if(scl < 0) {
  3067  0D68  1FBF               	btfss	scale@scl,7
  3068  0D69  2EB6               	goto	l1967
  3069                           
  3070                           ;doprnt.c: 429: scl = -scl;
  3071  0D6A  09BF               	comf	scale@scl,f
  3072  0D6B  0ABF               	incf	scale@scl,f
  3073                           
  3074                           ;doprnt.c: 430: if(scl>=110)
  3075  0D6C  083F               	movf	scale@scl,w
  3076  0D6D  3A80               	xorlw	128
  3077  0D6E  3E12               	addlw	-238
  3078  0D6F  1C03               	skipc
  3079  0D70  2E29               	goto	l1957
  3080                           
  3081                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3082  0D71  3003               	movlw	3
  3083  0D72  00BA               	movwf	??_scale
  3084  0D73  083A               	movf	??_scale,w
  3085  0D74  00A4               	movwf	___bmul@multiplicand
  3086  0D75  300A               	movlw	10
  3087  0D76  00F7               	movwf	___awdiv@divisor
  3088  0D77  3000               	movlw	0
  3089  0D78  00F8               	movwf	___awdiv@divisor+1
  3090  0D79  083F               	movf	scale@scl,w
  3091  0D7A  00F2               	movwf	___awmod@dividend
  3092  0D7B  01F3               	clrf	___awmod@dividend+1
  3093  0D7C  1BF2               	btfsc	___awmod@dividend,7
  3094  0D7D  03F3               	decf	___awmod@dividend+1,f
  3095  0D7E  3064               	movlw	100
  3096  0D7F  00F0               	movwf	___awmod@divisor
  3097  0D80  3000               	movlw	0
  3098  0D81  00F1               	movwf	___awmod@divisor+1
  3099  0D82  160A  118A  256A  120A  158A  	fcall	___awmod
  3100  0D87  0871               	movf	?___awmod+1,w
  3101  0D88  00FA               	movwf	___awdiv@dividend+1
  3102  0D89  0870               	movf	?___awmod,w
  3103  0D8A  00F9               	movwf	___awdiv@dividend
  3104  0D8B  160A  118A  265C  120A  158A  	fcall	___awdiv
  3105  0D90  0877               	movf	?___awdiv,w
  3106  0D91  3E09               	addlw	9
  3107  0D92  160A  118A  23CC  120A  158A  	fcall	___bmul
  3108  0D97  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3109  0D98  0084               	movwf	4
  3110  0D99  160A  118A  200A  120A  158A  	fcall	stringdir
  3111  0D9E  1283               	bcf	3,5	;RP0=0, select bank0
  3112  0D9F  1303               	bcf	3,6	;RP1=0, select bank0
  3113  0DA0  00A7               	movwf	___ftmul@f1
  3114  0DA1  160A  118A  200A  120A  158A  	fcall	stringdir
  3115  0DA6  00A8               	movwf	___ftmul@f1+1
  3116  0DA7  160A  118A  200A  120A  158A  	fcall	stringdir
  3117  0DAC  00A9               	movwf	___ftmul@f1+2
  3118  0DAD  3003               	movlw	3
  3119  0DAE  00BB               	movwf	??_scale+1
  3120  0DAF  083B               	movf	??_scale+1,w
  3121  0DB0  00A4               	movwf	___bmul@multiplicand
  3122  0DB1  3064               	movlw	100
  3123  0DB2  00F7               	movwf	___awdiv@divisor
  3124  0DB3  3000               	movlw	0
  3125  0DB4  00F8               	movwf	___awdiv@divisor+1
  3126  0DB5  083F               	movf	scale@scl,w
  3127  0DB6  00F9               	movwf	___awdiv@dividend
  3128  0DB7  01FA               	clrf	___awdiv@dividend+1
  3129  0DB8  1BF9               	btfsc	___awdiv@dividend,7
  3130  0DB9  03FA               	decf	___awdiv@dividend+1,f
  3131  0DBA  160A  118A  265C  120A  158A  	fcall	___awdiv
  3132  0DBF  0877               	movf	?___awdiv,w
  3133  0DC0  3E12               	addlw	18
  3134  0DC1  160A  118A  23CC  120A  158A  	fcall	___bmul
  3135  0DC6  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3136  0DC7  0084               	movwf	4
  3137  0DC8  160A  118A  200A  120A  158A  	fcall	stringdir
  3138  0DCD  1283               	bcf	3,5	;RP0=0, select bank0
  3139  0DCE  1303               	bcf	3,6	;RP1=0, select bank0
  3140  0DCF  00AA               	movwf	___ftmul@f2
  3141  0DD0  160A  118A  200A  120A  158A  	fcall	stringdir
  3142  0DD5  00AB               	movwf	___ftmul@f2+1
  3143  0DD6  160A  118A  200A  120A  158A  	fcall	stringdir
  3144  0DDB  00AC               	movwf	___ftmul@f2+2
  3145  0DDC  120A  158A  213E  120A  158A  	fcall	___ftmul
  3146  0DE1  1283               	bcf	3,5	;RP0=0, select bank0
  3147  0DE2  1303               	bcf	3,6	;RP1=0, select bank0
  3148  0DE3  0827               	movf	?___ftmul,w
  3149  0DE4  00BC               	movwf	_scale$575
  3150  0DE5  0828               	movf	?___ftmul+1,w
  3151  0DE6  00BD               	movwf	_scale$575+1
  3152  0DE7  0829               	movf	?___ftmul+2,w
  3153  0DE8  00BE               	movwf	_scale$575+2
  3154                           
  3155                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3156  0DE9  3003               	movlw	3
  3157  0DEA  00BA               	movwf	??_scale
  3158  0DEB  083A               	movf	??_scale,w
  3159  0DEC  00A4               	movwf	___bmul@multiplicand
  3160  0DED  083F               	movf	scale@scl,w
  3161  0DEE  00F2               	movwf	___awmod@dividend
  3162  0DEF  01F3               	clrf	___awmod@dividend+1
  3163  0DF0  1BF2               	btfsc	___awmod@dividend,7
  3164  0DF1  03F3               	decf	___awmod@dividend+1,f
  3165  0DF2  300A               	movlw	10
  3166  0DF3  00F0               	movwf	___awmod@divisor
  3167  0DF4  3000               	movlw	0
  3168  0DF5  00F1               	movwf	___awmod@divisor+1
  3169  0DF6  160A  118A  256A  120A  158A  	fcall	___awmod
  3170  0DFB  0870               	movf	?___awmod,w
  3171  0DFC  160A  118A  23CC  120A  158A  	fcall	___bmul
  3172  0E01  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3173  0E02  0084               	movwf	4
  3174  0E03  160A  118A  200A  120A  158A  	fcall	stringdir
  3175  0E08  1283               	bcf	3,5	;RP0=0, select bank0
  3176  0E09  1303               	bcf	3,6	;RP1=0, select bank0
  3177  0E0A  00A7               	movwf	___ftmul@f1
  3178  0E0B  160A  118A  200A  120A  158A  	fcall	stringdir
  3179  0E10  00A8               	movwf	___ftmul@f1+1
  3180  0E11  160A  118A  200A  120A  158A  	fcall	stringdir
  3181  0E16  00A9               	movwf	___ftmul@f1+2
  3182  0E17  083C               	movf	_scale$575,w
  3183  0E18  00AA               	movwf	___ftmul@f2
  3184  0E19  083D               	movf	_scale$575+1,w
  3185  0E1A  00AB               	movwf	___ftmul@f2+1
  3186  0E1B  083E               	movf	_scale$575+2,w
  3187  0E1C  00AC               	movwf	___ftmul@f2+2
  3188  0E1D  120A  158A  213E   	fcall	___ftmul
  3189  0E20  1283               	bcf	3,5	;RP0=0, select bank0
  3190  0E21  1303               	bcf	3,6	;RP1=0, select bank0
  3191  0E22  0827               	movf	?___ftmul,w
  3192  0E23  00B7               	movwf	?_scale
  3193  0E24  0828               	movf	?___ftmul+1,w
  3194  0E25  00B8               	movwf	?_scale+1
  3195  0E26  0829               	movf	?___ftmul+2,w
  3196  0E27  00B9               	movwf	?_scale+2
  3197  0E28  0008               	return
  3198  0E29                     l1957:	
  3199                           
  3200                           ;doprnt.c: 432: else if(scl > 10)
  3201  0E29  083F               	movf	scale@scl,w
  3202  0E2A  3A80               	xorlw	128
  3203  0E2B  3E75               	addlw	-139
  3204  0E2C  1C03               	skipc
  3205  0E2D  2E97               	goto	l1963
  3206                           
  3207                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3208  0E2E  3003               	movlw	3
  3209  0E2F  00BA               	movwf	??_scale
  3210  0E30  083A               	movf	??_scale,w
  3211  0E31  00A4               	movwf	___bmul@multiplicand
  3212  0E32  083F               	movf	scale@scl,w
  3213  0E33  00F2               	movwf	___awmod@dividend
  3214  0E34  01F3               	clrf	___awmod@dividend+1
  3215  0E35  1BF2               	btfsc	___awmod@dividend,7
  3216  0E36  03F3               	decf	___awmod@dividend+1,f
  3217  0E37  300A               	movlw	10
  3218  0E38  00F0               	movwf	___awmod@divisor
  3219  0E39  3000               	movlw	0
  3220  0E3A  00F1               	movwf	___awmod@divisor+1
  3221  0E3B  160A  118A  256A  120A  158A  	fcall	___awmod
  3222  0E40  0870               	movf	?___awmod,w
  3223  0E41  160A  118A  23CC  120A  158A  	fcall	___bmul
  3224  0E46  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3225  0E47  0084               	movwf	4
  3226  0E48  160A  118A  200A  120A  158A  	fcall	stringdir
  3227  0E4D  1283               	bcf	3,5	;RP0=0, select bank0
  3228  0E4E  1303               	bcf	3,6	;RP1=0, select bank0
  3229  0E4F  00A7               	movwf	___ftmul@f1
  3230  0E50  160A  118A  200A  120A  158A  	fcall	stringdir
  3231  0E55  00A8               	movwf	___ftmul@f1+1
  3232  0E56  160A  118A  200A  120A  158A  	fcall	stringdir
  3233  0E5B  00A9               	movwf	___ftmul@f1+2
  3234  0E5C  3003               	movlw	3
  3235  0E5D  00BB               	movwf	??_scale+1
  3236  0E5E  083B               	movf	??_scale+1,w
  3237  0E5F  00A4               	movwf	___bmul@multiplicand
  3238  0E60  300A               	movlw	10
  3239  0E61  00F7               	movwf	___awdiv@divisor
  3240  0E62  3000               	movlw	0
  3241  0E63  00F8               	movwf	___awdiv@divisor+1
  3242  0E64  083F               	movf	scale@scl,w
  3243  0E65  00F9               	movwf	___awdiv@dividend
  3244  0E66  01FA               	clrf	___awdiv@dividend+1
  3245  0E67  1BF9               	btfsc	___awdiv@dividend,7
  3246  0E68  03FA               	decf	___awdiv@dividend+1,f
  3247  0E69  160A  118A  265C  120A  158A  	fcall	___awdiv
  3248  0E6E  0877               	movf	?___awdiv,w
  3249  0E6F  3E09               	addlw	9
  3250  0E70  160A  118A  23CC  120A  158A  	fcall	___bmul
  3251  0E75  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3252  0E76  0084               	movwf	4
  3253  0E77  160A  118A  200A  120A  158A  	fcall	stringdir
  3254  0E7C  1283               	bcf	3,5	;RP0=0, select bank0
  3255  0E7D  1303               	bcf	3,6	;RP1=0, select bank0
  3256  0E7E  00AA               	movwf	___ftmul@f2
  3257  0E7F  160A  118A  200A  120A  158A  	fcall	stringdir
  3258  0E84  00AB               	movwf	___ftmul@f2+1
  3259  0E85  160A  118A  200A  120A  158A  	fcall	stringdir
  3260  0E8A  00AC               	movwf	___ftmul@f2+2
  3261  0E8B  120A  158A  213E   	fcall	___ftmul
  3262  0E8E  1283               	bcf	3,5	;RP0=0, select bank0
  3263  0E8F  1303               	bcf	3,6	;RP1=0, select bank0
  3264  0E90  0827               	movf	?___ftmul,w
  3265  0E91  00B7               	movwf	?_scale
  3266  0E92  0828               	movf	?___ftmul+1,w
  3267  0E93  00B8               	movwf	?_scale+1
  3268  0E94  0829               	movf	?___ftmul+2,w
  3269  0E95  00B9               	movwf	?_scale+2
  3270  0E96  0008               	return
  3271  0E97                     l1963:	
  3272                           
  3273                           ;doprnt.c: 434: return _npowers_[scl];
  3274  0E97  3003               	movlw	3
  3275  0E98  00BA               	movwf	??_scale
  3276  0E99  083A               	movf	??_scale,w
  3277  0E9A  00A4               	movwf	___bmul@multiplicand
  3278  0E9B  083F               	movf	scale@scl,w
  3279  0E9C  160A  118A  23CC  120A  158A  	fcall	___bmul
  3280  0EA1  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3281  0EA2  0084               	movwf	4
  3282  0EA3  160A  118A  200A  120A  158A  	fcall	stringdir
  3283  0EA8  1283               	bcf	3,5	;RP0=0, select bank0
  3284  0EA9  1303               	bcf	3,6	;RP1=0, select bank0
  3285  0EAA  00B7               	movwf	?_scale
  3286  0EAB  160A  118A  200A  120A  158A  	fcall	stringdir
  3287  0EB0  00B8               	movwf	?_scale+1
  3288  0EB1  160A  118A  200A   	fcall	stringdir
  3289  0EB4  00B9               	movwf	?_scale+2
  3290  0EB5  0008               	return
  3291  0EB6                     l1967:	
  3292                           
  3293                           ;doprnt.c: 435: }
  3294                           ;doprnt.c: 436: if(scl>=110)
  3295  0EB6  083F               	movf	scale@scl,w
  3296  0EB7  3A80               	xorlw	128
  3297  0EB8  3E12               	addlw	-238
  3298  0EB9  1C03               	skipc
  3299  0EBA  2F73               	goto	l1975
  3300                           
  3301                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3302  0EBB  3003               	movlw	3
  3303  0EBC  00BA               	movwf	??_scale
  3304  0EBD  083A               	movf	??_scale,w
  3305  0EBE  00A4               	movwf	___bmul@multiplicand
  3306  0EBF  300A               	movlw	10
  3307  0EC0  00F7               	movwf	___awdiv@divisor
  3308  0EC1  3000               	movlw	0
  3309  0EC2  00F8               	movwf	___awdiv@divisor+1
  3310  0EC3  083F               	movf	scale@scl,w
  3311  0EC4  00F2               	movwf	___awmod@dividend
  3312  0EC5  01F3               	clrf	___awmod@dividend+1
  3313  0EC6  1BF2               	btfsc	___awmod@dividend,7
  3314  0EC7  03F3               	decf	___awmod@dividend+1,f
  3315  0EC8  3064               	movlw	100
  3316  0EC9  00F0               	movwf	___awmod@divisor
  3317  0ECA  3000               	movlw	0
  3318  0ECB  00F1               	movwf	___awmod@divisor+1
  3319  0ECC  160A  118A  256A  120A  158A  	fcall	___awmod
  3320  0ED1  0871               	movf	?___awmod+1,w
  3321  0ED2  00FA               	movwf	___awdiv@dividend+1
  3322  0ED3  0870               	movf	?___awmod,w
  3323  0ED4  00F9               	movwf	___awdiv@dividend
  3324  0ED5  160A  118A  265C  120A  158A  	fcall	___awdiv
  3325  0EDA  0877               	movf	?___awdiv,w
  3326  0EDB  3E09               	addlw	9
  3327  0EDC  160A  118A  23CC  120A  158A  	fcall	___bmul
  3328  0EE1  3E29               	addlw	low ((__powers_-__stringbase)| (0+32768))
  3329  0EE2  0084               	movwf	4
  3330  0EE3  160A  118A  200A  120A  158A  	fcall	stringdir
  3331  0EE8  1283               	bcf	3,5	;RP0=0, select bank0
  3332  0EE9  1303               	bcf	3,6	;RP1=0, select bank0
  3333  0EEA  00A7               	movwf	___ftmul@f1
  3334  0EEB  160A  118A  200A  120A  158A  	fcall	stringdir
  3335  0EF0  00A8               	movwf	___ftmul@f1+1
  3336  0EF1  160A  118A  200A  120A  158A  	fcall	stringdir
  3337  0EF6  00A9               	movwf	___ftmul@f1+2
  3338  0EF7  3003               	movlw	3
  3339  0EF8  00BB               	movwf	??_scale+1
  3340  0EF9  083B               	movf	??_scale+1,w
  3341  0EFA  00A4               	movwf	___bmul@multiplicand
  3342  0EFB  3064               	movlw	100
  3343  0EFC  00F7               	movwf	___awdiv@divisor
  3344  0EFD  3000               	movlw	0
  3345  0EFE  00F8               	movwf	___awdiv@divisor+1
  3346  0EFF  083F               	movf	scale@scl,w
  3347  0F00  00F9               	movwf	___awdiv@dividend
  3348  0F01  01FA               	clrf	___awdiv@dividend+1
  3349  0F02  1BF9               	btfsc	___awdiv@dividend,7
  3350  0F03  03FA               	decf	___awdiv@dividend+1,f
  3351  0F04  160A  118A  265C  120A  158A  	fcall	___awdiv
  3352  0F09  0877               	movf	?___awdiv,w
  3353  0F0A  3E12               	addlw	18
  3354  0F0B  160A  118A  23CC  120A  158A  	fcall	___bmul
  3355  0F10  3E29               	addlw	low ((__powers_-__stringbase)| (0+32768))
  3356  0F11  0084               	movwf	4
  3357  0F12  160A  118A  200A  120A  158A  	fcall	stringdir
  3358  0F17  1283               	bcf	3,5	;RP0=0, select bank0
  3359  0F18  1303               	bcf	3,6	;RP1=0, select bank0
  3360  0F19  00AA               	movwf	___ftmul@f2
  3361  0F1A  160A  118A  200A  120A  158A  	fcall	stringdir
  3362  0F1F  00AB               	movwf	___ftmul@f2+1
  3363  0F20  160A  118A  200A  120A  158A  	fcall	stringdir
  3364  0F25  00AC               	movwf	___ftmul@f2+2
  3365  0F26  120A  158A  213E  120A  158A  	fcall	___ftmul
  3366  0F2B  1283               	bcf	3,5	;RP0=0, select bank0
  3367  0F2C  1303               	bcf	3,6	;RP1=0, select bank0
  3368  0F2D  0827               	movf	?___ftmul,w
  3369  0F2E  00BC               	movwf	_scale$575
  3370  0F2F  0828               	movf	?___ftmul+1,w
  3371  0F30  00BD               	movwf	_scale$575+1
  3372  0F31  0829               	movf	?___ftmul+2,w
  3373  0F32  00BE               	movwf	_scale$575+2
  3374                           
  3375                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3376  0F33  3003               	movlw	3
  3377  0F34  00BA               	movwf	??_scale
  3378  0F35  083A               	movf	??_scale,w
  3379  0F36  00A4               	movwf	___bmul@multiplicand
  3380  0F37  083F               	movf	scale@scl,w
  3381  0F38  00F2               	movwf	___awmod@dividend
  3382  0F39  01F3               	clrf	___awmod@dividend+1
  3383  0F3A  1BF2               	btfsc	___awmod@dividend,7
  3384  0F3B  03F3               	decf	___awmod@dividend+1,f
  3385  0F3C  300A               	movlw	10
  3386  0F3D  00F0               	movwf	___awmod@divisor
  3387  0F3E  3000               	movlw	0
  3388  0F3F  00F1               	movwf	___awmod@divisor+1
  3389  0F40  160A  118A  256A  120A  158A  	fcall	___awmod
  3390  0F45  0870               	movf	?___awmod,w
  3391  0F46  160A  118A  23CC  120A  158A  	fcall	___bmul
  3392  0F4B  3E29               	addlw	low ((__powers_-__stringbase)| (0+32768))
  3393  0F4C  0084               	movwf	4
  3394  0F4D  160A  118A  200A  120A  158A  	fcall	stringdir
  3395  0F52  1283               	bcf	3,5	;RP0=0, select bank0
  3396  0F53  1303               	bcf	3,6	;RP1=0, select bank0
  3397  0F54  00A7               	movwf	___ftmul@f1
  3398  0F55  160A  118A  200A  120A  158A  	fcall	stringdir
  3399  0F5A  00A8               	movwf	___ftmul@f1+1
  3400  0F5B  160A  118A  200A  120A  158A  	fcall	stringdir
  3401  0F60  00A9               	movwf	___ftmul@f1+2
  3402  0F61  083C               	movf	_scale$575,w
  3403  0F62  00AA               	movwf	___ftmul@f2
  3404  0F63  083D               	movf	_scale$575+1,w
  3405  0F64  00AB               	movwf	___ftmul@f2+1
  3406  0F65  083E               	movf	_scale$575+2,w
  3407  0F66  00AC               	movwf	___ftmul@f2+2
  3408  0F67  120A  158A  213E   	fcall	___ftmul
  3409  0F6A  1283               	bcf	3,5	;RP0=0, select bank0
  3410  0F6B  1303               	bcf	3,6	;RP1=0, select bank0
  3411  0F6C  0827               	movf	?___ftmul,w
  3412  0F6D  00B7               	movwf	?_scale
  3413  0F6E  0828               	movf	?___ftmul+1,w
  3414  0F6F  00B8               	movwf	?_scale+1
  3415  0F70  0829               	movf	?___ftmul+2,w
  3416  0F71  00B9               	movwf	?_scale+2
  3417  0F72  0008               	return
  3418  0F73                     l1975:	
  3419                           
  3420                           ;doprnt.c: 438: else if(scl > 10)
  3421  0F73  083F               	movf	scale@scl,w
  3422  0F74  3A80               	xorlw	128
  3423  0F75  3E75               	addlw	-139
  3424  0F76  1C03               	skipc
  3425  0F77  2FE1               	goto	l1981
  3426                           
  3427                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3428  0F78  3003               	movlw	3
  3429  0F79  00BA               	movwf	??_scale
  3430  0F7A  083A               	movf	??_scale,w
  3431  0F7B  00A4               	movwf	___bmul@multiplicand
  3432  0F7C  083F               	movf	scale@scl,w
  3433  0F7D  00F2               	movwf	___awmod@dividend
  3434  0F7E  01F3               	clrf	___awmod@dividend+1
  3435  0F7F  1BF2               	btfsc	___awmod@dividend,7
  3436  0F80  03F3               	decf	___awmod@dividend+1,f
  3437  0F81  300A               	movlw	10
  3438  0F82  00F0               	movwf	___awmod@divisor
  3439  0F83  3000               	movlw	0
  3440  0F84  00F1               	movwf	___awmod@divisor+1
  3441  0F85  160A  118A  256A  120A  158A  	fcall	___awmod
  3442  0F8A  0870               	movf	?___awmod,w
  3443  0F8B  160A  118A  23CC  120A  158A  	fcall	___bmul
  3444  0F90  3E29               	addlw	low ((__powers_-__stringbase)| (0+32768))
  3445  0F91  0084               	movwf	4
  3446  0F92  160A  118A  200A  120A  158A  	fcall	stringdir
  3447  0F97  1283               	bcf	3,5	;RP0=0, select bank0
  3448  0F98  1303               	bcf	3,6	;RP1=0, select bank0
  3449  0F99  00A7               	movwf	___ftmul@f1
  3450  0F9A  160A  118A  200A  120A  158A  	fcall	stringdir
  3451  0F9F  00A8               	movwf	___ftmul@f1+1
  3452  0FA0  160A  118A  200A  120A  158A  	fcall	stringdir
  3453  0FA5  00A9               	movwf	___ftmul@f1+2
  3454  0FA6  3003               	movlw	3
  3455  0FA7  00BB               	movwf	??_scale+1
  3456  0FA8  083B               	movf	??_scale+1,w
  3457  0FA9  00A4               	movwf	___bmul@multiplicand
  3458  0FAA  300A               	movlw	10
  3459  0FAB  00F7               	movwf	___awdiv@divisor
  3460  0FAC  3000               	movlw	0
  3461  0FAD  00F8               	movwf	___awdiv@divisor+1
  3462  0FAE  083F               	movf	scale@scl,w
  3463  0FAF  00F9               	movwf	___awdiv@dividend
  3464  0FB0  01FA               	clrf	___awdiv@dividend+1
  3465  0FB1  1BF9               	btfsc	___awdiv@dividend,7
  3466  0FB2  03FA               	decf	___awdiv@dividend+1,f
  3467  0FB3  160A  118A  265C  120A  158A  	fcall	___awdiv
  3468  0FB8  0877               	movf	?___awdiv,w
  3469  0FB9  3E09               	addlw	9
  3470  0FBA  160A  118A  23CC  120A  158A  	fcall	___bmul
  3471  0FBF  3E29               	addlw	low ((__powers_-__stringbase)| (0+32768))
  3472  0FC0  0084               	movwf	4
  3473  0FC1  160A  118A  200A  120A  158A  	fcall	stringdir
  3474  0FC6  1283               	bcf	3,5	;RP0=0, select bank0
  3475  0FC7  1303               	bcf	3,6	;RP1=0, select bank0
  3476  0FC8  00AA               	movwf	___ftmul@f2
  3477  0FC9  160A  118A  200A  120A  158A  	fcall	stringdir
  3478  0FCE  00AB               	movwf	___ftmul@f2+1
  3479  0FCF  160A  118A  200A  120A  158A  	fcall	stringdir
  3480  0FD4  00AC               	movwf	___ftmul@f2+2
  3481  0FD5  120A  158A  213E   	fcall	___ftmul
  3482  0FD8  1283               	bcf	3,5	;RP0=0, select bank0
  3483  0FD9  1303               	bcf	3,6	;RP1=0, select bank0
  3484  0FDA  0827               	movf	?___ftmul,w
  3485  0FDB  00B7               	movwf	?_scale
  3486  0FDC  0828               	movf	?___ftmul+1,w
  3487  0FDD  00B8               	movwf	?_scale+1
  3488  0FDE  0829               	movf	?___ftmul+2,w
  3489  0FDF  00B9               	movwf	?_scale+2
  3490  0FE0  0008               	return
  3491  0FE1                     l1981:	
  3492                           
  3493                           ;doprnt.c: 440: return _powers_[scl];
  3494  0FE1  3003               	movlw	3
  3495  0FE2  00BA               	movwf	??_scale
  3496  0FE3  083A               	movf	??_scale,w
  3497  0FE4  00A4               	movwf	___bmul@multiplicand
  3498  0FE5  083F               	movf	scale@scl,w
  3499  0FE6  160A  118A  23CC  120A  158A  	fcall	___bmul
  3500  0FEB  3E29               	addlw	low ((__powers_-__stringbase)| (0+32768))
  3501  0FEC  0084               	movwf	4
  3502  0FED  160A  118A  200A  120A  158A  	fcall	stringdir
  3503  0FF2  1283               	bcf	3,5	;RP0=0, select bank0
  3504  0FF3  1303               	bcf	3,6	;RP1=0, select bank0
  3505  0FF4  00B7               	movwf	?_scale
  3506  0FF5  160A  118A  200A  120A  158A  	fcall	stringdir
  3507  0FFA  00B8               	movwf	?_scale+1
  3508  0FFB  160A  118A  200A   	fcall	stringdir
  3509  0FFE  00B9               	movwf	?_scale+2
  3510  0FFF  0008               	return
  3511  1000                     __end_of_scale:	
  3512                           
  3513                           	psect	text3
  3514  0801                     __ptext3:	
  3515 ;; *************** function _isdigit *****************
  3516 ;; Defined at:
  3517 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  3518 ;; Parameters:    Size  Location     Type
  3519 ;;  c               1    wreg     unsigned char 
  3520 ;; Auto vars:     Size  Location     Type
  3521 ;;  c               1    1[COMMON] unsigned char 
  3522 ;; Return value:  Size  Location     Type
  3523 ;;		None               void
  3524 ;; Registers used:
  3525 ;;		wreg, status,2, status,0
  3526 ;; Tracked objects:
  3527 ;;		On entry : 0/0
  3528 ;;		On exit  : 0/0
  3529 ;;		Unchanged: 0/0
  3530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3531 ;;      Params:         0       0       0       0       0
  3532 ;;      Locals:         2       0       0       0       0
  3533 ;;      Temps:          0       0       0       0       0
  3534 ;;      Totals:         2       0       0       0       0
  3535 ;;Total ram usage:        2 bytes
  3536 ;; Hardware stack levels used:    1
  3537 ;; This function calls:
  3538 ;;		Nothing
  3539 ;; This function is called by:
  3540 ;;		_sprintf
  3541 ;; This function uses a non-reentrant model
  3542 ;;
  3543                           
  3544                           
  3545                           ;psect for function _isdigit
  3546  0801                     _isdigit:	
  3547                           
  3548                           ;incstack = 0
  3549                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  3550                           ;isdigit@c stored from wreg
  3551  0801  00F1               	movwf	isdigit@c
  3552  0802  01F0               	clrf	_isdigit$346
  3553  0803  303A               	movlw	58
  3554  0804  0271               	subwf	isdigit@c,w
  3555  0805  1803               	skipnc
  3556  0806  280D               	goto	l1993
  3557  0807  3030               	movlw	48
  3558  0808  0271               	subwf	isdigit@c,w
  3559  0809  1C03               	skipc
  3560  080A  280D               	goto	l1993
  3561  080B  01F0               	clrf	_isdigit$346
  3562  080C  0AF0               	incf	_isdigit$346,f
  3563  080D                     l1993:	
  3564  080D  0C70               	rrf	_isdigit$346,w
  3565  080E  0008               	return
  3566  080F                     __end_of_isdigit:	
  3567                           
  3568                           	psect	text4
  3569  001E                     __ptext4:	
  3570 ;; *************** function _fround *****************
  3571 ;; Defined at:
  3572 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3573 ;; Parameters:    Size  Location     Type
  3574 ;;  prec            1    wreg     unsigned char 
  3575 ;; Auto vars:     Size  Location     Type
  3576 ;;  prec            1   38[BANK0 ] unsigned char 
  3577 ;; Return value:  Size  Location     Type
  3578 ;;                  3   23[BANK0 ] unsigned char 
  3579 ;; Registers used:
  3580 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3581 ;; Tracked objects:
  3582 ;;		On entry : 0/0
  3583 ;;		On exit  : 0/0
  3584 ;;		Unchanged: 0/0
  3585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3586 ;;      Params:         0       3       0       0       0
  3587 ;;      Locals:         0       7       0       0       0
  3588 ;;      Temps:          0       6       0       0       0
  3589 ;;      Totals:         0      16       0       0       0
  3590 ;;Total ram usage:       16 bytes
  3591 ;; Hardware stack levels used:    1
  3592 ;; Hardware stack levels required when called:    2
  3593 ;; This function calls:
  3594 ;;		___awdiv
  3595 ;;		___awmod
  3596 ;;		___bmul
  3597 ;;		___ftmul
  3598 ;; This function is called by:
  3599 ;;		_sprintf
  3600 ;; This function uses a non-reentrant model
  3601 ;;
  3602                           
  3603                           
  3604                           ;psect for function _fround
  3605  001E                     _fround:	
  3606                           
  3607                           ;incstack = 0
  3608                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3609                           ;fround@prec stored from wreg
  3610  001E  1283               	bcf	3,5	;RP0=0, select bank0
  3611  001F  1303               	bcf	3,6	;RP1=0, select bank0
  3612  0020  00C6               	movwf	fround@prec
  3613                           
  3614                           ;doprnt.c: 413: if(prec>=110)
  3615  0021  306E               	movlw	110
  3616  0022  0246               	subwf	fround@prec,w
  3617  0023  1C03               	skipc
  3618  0024  28FC               	goto	l1933
  3619                           
  3620                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3621  0025  3003               	movlw	3
  3622  0026  00BA               	movwf	??_fround
  3623  0027  083A               	movf	??_fround,w
  3624  0028  00A4               	movwf	___bmul@multiplicand
  3625  0029  300A               	movlw	10
  3626  002A  00F7               	movwf	___awdiv@divisor
  3627  002B  3000               	movlw	0
  3628  002C  00F8               	movwf	___awdiv@divisor+1
  3629  002D  0846               	movf	fround@prec,w
  3630  002E  00BB               	movwf	??_fround+1
  3631  002F  01BC               	clrf	??_fround+2
  3632  0030  083B               	movf	??_fround+1,w
  3633  0031  00F2               	movwf	___awmod@dividend
  3634  0032  083C               	movf	??_fround+2,w
  3635  0033  00F3               	movwf	___awmod@dividend+1
  3636  0034  3064               	movlw	100
  3637  0035  00F0               	movwf	___awmod@divisor
  3638  0036  3000               	movlw	0
  3639  0037  00F1               	movwf	___awmod@divisor+1
  3640  0038  160A  118A  256A  120A  118A  	fcall	___awmod
  3641  003D  0871               	movf	?___awmod+1,w
  3642  003E  00FA               	movwf	___awdiv@dividend+1
  3643  003F  0870               	movf	?___awmod,w
  3644  0040  00F9               	movwf	___awdiv@dividend
  3645  0041  160A  118A  265C  120A  118A  	fcall	___awdiv
  3646  0046  0877               	movf	?___awdiv,w
  3647  0047  3E09               	addlw	9
  3648  0048  160A  118A  23CC  120A  118A  	fcall	___bmul
  3649  004D  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3650  004E  0084               	movwf	4
  3651  004F  160A  118A  200A  120A  118A  	fcall	stringdir
  3652  0054  1283               	bcf	3,5	;RP0=0, select bank0
  3653  0055  1303               	bcf	3,6	;RP1=0, select bank0
  3654  0056  00A7               	movwf	___ftmul@f1
  3655  0057  160A  118A  200A  120A  118A  	fcall	stringdir
  3656  005C  00A8               	movwf	___ftmul@f1+1
  3657  005D  160A  118A  200A  120A  118A  	fcall	stringdir
  3658  0062  00A9               	movwf	___ftmul@f1+2
  3659  0063  3003               	movlw	3
  3660  0064  00BD               	movwf	??_fround+3
  3661  0065  083D               	movf	??_fround+3,w
  3662  0066  00A4               	movwf	___bmul@multiplicand
  3663  0067  3064               	movlw	100
  3664  0068  00F7               	movwf	___awdiv@divisor
  3665  0069  3000               	movlw	0
  3666  006A  00F8               	movwf	___awdiv@divisor+1
  3667  006B  0846               	movf	fround@prec,w
  3668  006C  00BE               	movwf	??_fround+4
  3669  006D  01BF               	clrf	??_fround+5
  3670  006E  083E               	movf	??_fround+4,w
  3671  006F  00F9               	movwf	___awdiv@dividend
  3672  0070  083F               	movf	??_fround+5,w
  3673  0071  00FA               	movwf	___awdiv@dividend+1
  3674  0072  160A  118A  265C  120A  118A  	fcall	___awdiv
  3675  0077  0877               	movf	?___awdiv,w
  3676  0078  3E12               	addlw	18
  3677  0079  160A  118A  23CC  120A  118A  	fcall	___bmul
  3678  007E  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3679  007F  0084               	movwf	4
  3680  0080  160A  118A  200A  120A  118A  	fcall	stringdir
  3681  0085  1283               	bcf	3,5	;RP0=0, select bank0
  3682  0086  1303               	bcf	3,6	;RP1=0, select bank0
  3683  0087  00AA               	movwf	___ftmul@f2
  3684  0088  160A  118A  200A  120A  118A  	fcall	stringdir
  3685  008D  00AB               	movwf	___ftmul@f2+1
  3686  008E  160A  118A  200A  120A  118A  	fcall	stringdir
  3687  0093  00AC               	movwf	___ftmul@f2+2
  3688  0094  120A  158A  213E  120A  118A  	fcall	___ftmul
  3689  0099  1283               	bcf	3,5	;RP0=0, select bank0
  3690  009A  1303               	bcf	3,6	;RP1=0, select bank0
  3691  009B  0827               	movf	?___ftmul,w
  3692  009C  00C3               	movwf	_fround$573
  3693  009D  0828               	movf	?___ftmul+1,w
  3694  009E  00C4               	movwf	_fround$573+1
  3695  009F  0829               	movf	?___ftmul+2,w
  3696  00A0  00C5               	movwf	_fround$573+2
  3697                           
  3698                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3699  00A1  3003               	movlw	3
  3700  00A2  00BA               	movwf	??_fround
  3701  00A3  083A               	movf	??_fround,w
  3702  00A4  00A4               	movwf	___bmul@multiplicand
  3703  00A5  0846               	movf	fround@prec,w
  3704  00A6  00BB               	movwf	??_fround+1
  3705  00A7  01BC               	clrf	??_fround+2
  3706  00A8  083B               	movf	??_fround+1,w
  3707  00A9  00F2               	movwf	___awmod@dividend
  3708  00AA  083C               	movf	??_fround+2,w
  3709  00AB  00F3               	movwf	___awmod@dividend+1
  3710  00AC  300A               	movlw	10
  3711  00AD  00F0               	movwf	___awmod@divisor
  3712  00AE  3000               	movlw	0
  3713  00AF  00F1               	movwf	___awmod@divisor+1
  3714  00B0  160A  118A  256A  120A  118A  	fcall	___awmod
  3715  00B5  0870               	movf	?___awmod,w
  3716  00B6  160A  118A  23CC  120A  118A  	fcall	___bmul
  3717  00BB  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3718  00BC  0084               	movwf	4
  3719  00BD  160A  118A  200A  120A  118A  	fcall	stringdir
  3720  00C2  1283               	bcf	3,5	;RP0=0, select bank0
  3721  00C3  1303               	bcf	3,6	;RP1=0, select bank0
  3722  00C4  00A7               	movwf	___ftmul@f1
  3723  00C5  160A  118A  200A  120A  118A  	fcall	stringdir
  3724  00CA  00A8               	movwf	___ftmul@f1+1
  3725  00CB  160A  118A  200A  120A  118A  	fcall	stringdir
  3726  00D0  00A9               	movwf	___ftmul@f1+2
  3727  00D1  0843               	movf	_fround$573,w
  3728  00D2  00AA               	movwf	___ftmul@f2
  3729  00D3  0844               	movf	_fround$573+1,w
  3730  00D4  00AB               	movwf	___ftmul@f2+1
  3731  00D5  0845               	movf	_fround$573+2,w
  3732  00D6  00AC               	movwf	___ftmul@f2+2
  3733  00D7  120A  158A  213E  120A  118A  	fcall	___ftmul
  3734  00DC  1283               	bcf	3,5	;RP0=0, select bank0
  3735  00DD  1303               	bcf	3,6	;RP1=0, select bank0
  3736  00DE  0827               	movf	?___ftmul,w
  3737  00DF  00C0               	movwf	_fround$574
  3738  00E0  0828               	movf	?___ftmul+1,w
  3739  00E1  00C1               	movwf	_fround$574+1
  3740  00E2  0829               	movf	?___ftmul+2,w
  3741  00E3  00C2               	movwf	_fround$574+2
  3742                           
  3743                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3744  00E4  3000               	movlw	0
  3745  00E5  00A7               	movwf	___ftmul@f1
  3746  00E6  3000               	movlw	0
  3747  00E7  00A8               	movwf	___ftmul@f1+1
  3748  00E8  303F               	movlw	63
  3749  00E9  00A9               	movwf	___ftmul@f1+2
  3750  00EA  0840               	movf	_fround$574,w
  3751  00EB  00AA               	movwf	___ftmul@f2
  3752  00EC  0841               	movf	_fround$574+1,w
  3753  00ED  00AB               	movwf	___ftmul@f2+1
  3754  00EE  0842               	movf	_fround$574+2,w
  3755  00EF  00AC               	movwf	___ftmul@f2+2
  3756  00F0  120A  158A  213E   	fcall	___ftmul
  3757  00F3  1283               	bcf	3,5	;RP0=0, select bank0
  3758  00F4  1303               	bcf	3,6	;RP1=0, select bank0
  3759  00F5  0827               	movf	?___ftmul,w
  3760  00F6  00B7               	movwf	?_fround
  3761  00F7  0828               	movf	?___ftmul+1,w
  3762  00F8  00B8               	movwf	?_fround+1
  3763  00F9  0829               	movf	?___ftmul+2,w
  3764  00FA  00B9               	movwf	?_fround+2
  3765  00FB  0008               	return
  3766  00FC                     l1933:	
  3767                           
  3768                           ;doprnt.c: 415: else if(prec > 10)
  3769  00FC  300B               	movlw	11
  3770  00FD  0246               	subwf	fround@prec,w
  3771  00FE  1C03               	skipc
  3772  00FF  2986               	goto	l1941
  3773                           
  3774                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3775  0100  3003               	movlw	3
  3776  0101  00BA               	movwf	??_fround
  3777  0102  083A               	movf	??_fround,w
  3778  0103  00A4               	movwf	___bmul@multiplicand
  3779  0104  0846               	movf	fround@prec,w
  3780  0105  00BB               	movwf	??_fround+1
  3781  0106  01BC               	clrf	??_fround+2
  3782  0107  083B               	movf	??_fround+1,w
  3783  0108  00F2               	movwf	___awmod@dividend
  3784  0109  083C               	movf	??_fround+2,w
  3785  010A  00F3               	movwf	___awmod@dividend+1
  3786  010B  300A               	movlw	10
  3787  010C  00F0               	movwf	___awmod@divisor
  3788  010D  3000               	movlw	0
  3789  010E  00F1               	movwf	___awmod@divisor+1
  3790  010F  160A  118A  256A  120A  118A  	fcall	___awmod
  3791  0114  0870               	movf	?___awmod,w
  3792  0115  160A  118A  23CC  120A  118A  	fcall	___bmul
  3793  011A  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3794  011B  0084               	movwf	4
  3795  011C  160A  118A  200A  120A  118A  	fcall	stringdir
  3796  0121  1283               	bcf	3,5	;RP0=0, select bank0
  3797  0122  1303               	bcf	3,6	;RP1=0, select bank0
  3798  0123  00A7               	movwf	___ftmul@f1
  3799  0124  160A  118A  200A  120A  118A  	fcall	stringdir
  3800  0129  00A8               	movwf	___ftmul@f1+1
  3801  012A  160A  118A  200A  120A  118A  	fcall	stringdir
  3802  012F  00A9               	movwf	___ftmul@f1+2
  3803  0130  3003               	movlw	3
  3804  0131  00BD               	movwf	??_fround+3
  3805  0132  083D               	movf	??_fround+3,w
  3806  0133  00A4               	movwf	___bmul@multiplicand
  3807  0134  300A               	movlw	10
  3808  0135  00F7               	movwf	___awdiv@divisor
  3809  0136  3000               	movlw	0
  3810  0137  00F8               	movwf	___awdiv@divisor+1
  3811  0138  0846               	movf	fround@prec,w
  3812  0139  00BE               	movwf	??_fround+4
  3813  013A  01BF               	clrf	??_fround+5
  3814  013B  083E               	movf	??_fround+4,w
  3815  013C  00F9               	movwf	___awdiv@dividend
  3816  013D  083F               	movf	??_fround+5,w
  3817  013E  00FA               	movwf	___awdiv@dividend+1
  3818  013F  160A  118A  265C  120A  118A  	fcall	___awdiv
  3819  0144  0877               	movf	?___awdiv,w
  3820  0145  3E09               	addlw	9
  3821  0146  160A  118A  23CC  120A  118A  	fcall	___bmul
  3822  014B  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3823  014C  0084               	movwf	4
  3824  014D  160A  118A  200A  120A  118A  	fcall	stringdir
  3825  0152  1283               	bcf	3,5	;RP0=0, select bank0
  3826  0153  1303               	bcf	3,6	;RP1=0, select bank0
  3827  0154  00AA               	movwf	___ftmul@f2
  3828  0155  160A  118A  200A  120A  118A  	fcall	stringdir
  3829  015A  00AB               	movwf	___ftmul@f2+1
  3830  015B  160A  118A  200A  120A  118A  	fcall	stringdir
  3831  0160  00AC               	movwf	___ftmul@f2+2
  3832  0161  120A  158A  213E  120A  118A  	fcall	___ftmul
  3833  0166  1283               	bcf	3,5	;RP0=0, select bank0
  3834  0167  1303               	bcf	3,6	;RP1=0, select bank0
  3835  0168  0827               	movf	?___ftmul,w
  3836  0169  00C3               	movwf	_fround$573
  3837  016A  0828               	movf	?___ftmul+1,w
  3838  016B  00C4               	movwf	_fround$573+1
  3839  016C  0829               	movf	?___ftmul+2,w
  3840  016D  00C5               	movwf	_fround$573+2
  3841                           
  3842                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3843  016E  3000               	movlw	0
  3844  016F  00A7               	movwf	___ftmul@f1
  3845  0170  3000               	movlw	0
  3846  0171  00A8               	movwf	___ftmul@f1+1
  3847  0172  303F               	movlw	63
  3848  0173  00A9               	movwf	___ftmul@f1+2
  3849  0174  0843               	movf	_fround$573,w
  3850  0175  00AA               	movwf	___ftmul@f2
  3851  0176  0844               	movf	_fround$573+1,w
  3852  0177  00AB               	movwf	___ftmul@f2+1
  3853  0178  0845               	movf	_fround$573+2,w
  3854  0179  00AC               	movwf	___ftmul@f2+2
  3855  017A  120A  158A  213E   	fcall	___ftmul
  3856  017D  1283               	bcf	3,5	;RP0=0, select bank0
  3857  017E  1303               	bcf	3,6	;RP1=0, select bank0
  3858  017F  0827               	movf	?___ftmul,w
  3859  0180  00B7               	movwf	?_fround
  3860  0181  0828               	movf	?___ftmul+1,w
  3861  0182  00B8               	movwf	?_fround+1
  3862  0183  0829               	movf	?___ftmul+2,w
  3863  0184  00B9               	movwf	?_fround+2
  3864  0185  0008               	return
  3865  0186                     l1941:	
  3866                           
  3867                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3868  0186  3000               	movlw	0
  3869  0187  00A7               	movwf	___ftmul@f1
  3870  0188  3000               	movlw	0
  3871  0189  00A8               	movwf	___ftmul@f1+1
  3872  018A  303F               	movlw	63
  3873  018B  00A9               	movwf	___ftmul@f1+2
  3874  018C  3003               	movlw	3
  3875  018D  00BA               	movwf	??_fround
  3876  018E  083A               	movf	??_fround,w
  3877  018F  00A4               	movwf	___bmul@multiplicand
  3878  0190  0846               	movf	fround@prec,w
  3879  0191  160A  118A  23CC  120A  118A  	fcall	___bmul
  3880  0196  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3881  0197  0084               	movwf	4
  3882  0198  160A  118A  200A  120A  118A  	fcall	stringdir
  3883  019D  1283               	bcf	3,5	;RP0=0, select bank0
  3884  019E  1303               	bcf	3,6	;RP1=0, select bank0
  3885  019F  00AA               	movwf	___ftmul@f2
  3886  01A0  160A  118A  200A  120A  118A  	fcall	stringdir
  3887  01A5  00AB               	movwf	___ftmul@f2+1
  3888  01A6  160A  118A  200A  120A  118A  	fcall	stringdir
  3889  01AB  00AC               	movwf	___ftmul@f2+2
  3890  01AC  120A  158A  213E   	fcall	___ftmul
  3891  01AF  1283               	bcf	3,5	;RP0=0, select bank0
  3892  01B0  1303               	bcf	3,6	;RP1=0, select bank0
  3893  01B1  0827               	movf	?___ftmul,w
  3894  01B2  00B7               	movwf	?_fround
  3895  01B3  0828               	movf	?___ftmul+1,w
  3896  01B4  00B8               	movwf	?_fround+1
  3897  01B5  0829               	movf	?___ftmul+2,w
  3898  01B6  00B9               	movwf	?_fround+2
  3899  01B7  0008               	return
  3900  01B8                     __end_of_fround:	
  3901                           
  3902                           	psect	text5
  3903  093E                     __ptext5:	
  3904 ;; *************** function ___ftmul *****************
  3905 ;; Defined at:
  3906 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  3907 ;; Parameters:    Size  Location     Type
  3908 ;;  f1              3    7[BANK0 ] float 
  3909 ;;  f2              3   10[BANK0 ] float 
  3910 ;; Auto vars:     Size  Location     Type
  3911 ;;  f3_as_produc    3   18[BANK0 ] unsigned um
  3912 ;;  sign            1   22[BANK0 ] unsigned char 
  3913 ;;  cntr            1   21[BANK0 ] unsigned char 
  3914 ;;  exp             1   17[BANK0 ] unsigned char 
  3915 ;; Return value:  Size  Location     Type
  3916 ;;                  3    7[BANK0 ] float 
  3917 ;; Registers used:
  3918 ;;		wreg, status,2, status,0, pclath, cstack
  3919 ;; Tracked objects:
  3920 ;;		On entry : 0/0
  3921 ;;		On exit  : 0/0
  3922 ;;		Unchanged: 0/0
  3923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3924 ;;      Params:         0       6       0       0       0
  3925 ;;      Locals:         0       6       0       0       0
  3926 ;;      Temps:          0       4       0       0       0
  3927 ;;      Totals:         0      16       0       0       0
  3928 ;;Total ram usage:       16 bytes
  3929 ;; Hardware stack levels used:    1
  3930 ;; Hardware stack levels required when called:    1
  3931 ;; This function calls:
  3932 ;;		___ftpack
  3933 ;; This function is called by:
  3934 ;;		_main
  3935 ;;		_fround
  3936 ;;		_scale
  3937 ;;		_sprintf
  3938 ;; This function uses a non-reentrant model
  3939 ;;
  3940                           
  3941                           
  3942                           ;psect for function ___ftmul
  3943  093E                     ___ftmul:	
  3944                           
  3945                           ;incstack = 0
  3946                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  3947  093E  1283               	bcf	3,5	;RP0=0, select bank0
  3948  093F  1303               	bcf	3,6	;RP1=0, select bank0
  3949  0940  0827               	movf	___ftmul@f1,w
  3950  0941  00AD               	movwf	??___ftmul
  3951  0942  0828               	movf	___ftmul@f1+1,w
  3952  0943  00AE               	movwf	??___ftmul+1
  3953  0944  0829               	movf	___ftmul@f1+2,w
  3954  0945  00AF               	movwf	??___ftmul+2
  3955  0946  1003               	clrc
  3956  0947  0D2E               	rlf	??___ftmul+1,w
  3957  0948  0D2F               	rlf	??___ftmul+2,w
  3958  0949  00B0               	movwf	??___ftmul+3
  3959  094A  0830               	movf	??___ftmul+3,w
  3960  094B  00B1               	movwf	___ftmul@exp
  3961  094C  0831               	movf	___ftmul@exp,w
  3962  094D  1D03               	btfss	3,2
  3963  094E  2956               	goto	l1849
  3964  094F  3000               	movlw	0
  3965  0950  00A7               	movwf	?___ftmul
  3966  0951  3000               	movlw	0
  3967  0952  00A8               	movwf	?___ftmul+1
  3968  0953  3000               	movlw	0
  3969  0954  00A9               	movwf	?___ftmul+2
  3970  0955  0008               	return
  3971  0956                     l1849:	
  3972  0956  082A               	movf	___ftmul@f2,w
  3973  0957  00AD               	movwf	??___ftmul
  3974  0958  082B               	movf	___ftmul@f2+1,w
  3975  0959  00AE               	movwf	??___ftmul+1
  3976  095A  082C               	movf	___ftmul@f2+2,w
  3977  095B  00AF               	movwf	??___ftmul+2
  3978  095C  1003               	clrc
  3979  095D  0D2E               	rlf	??___ftmul+1,w
  3980  095E  0D2F               	rlf	??___ftmul+2,w
  3981  095F  00B0               	movwf	??___ftmul+3
  3982  0960  0830               	movf	??___ftmul+3,w
  3983  0961  00B6               	movwf	___ftmul@sign
  3984  0962  0836               	movf	___ftmul@sign,w
  3985  0963  1D03               	btfss	3,2
  3986  0964  296C               	goto	l1855
  3987  0965  3000               	movlw	0
  3988  0966  00A7               	movwf	?___ftmul
  3989  0967  3000               	movlw	0
  3990  0968  00A8               	movwf	?___ftmul+1
  3991  0969  3000               	movlw	0
  3992  096A  00A9               	movwf	?___ftmul+2
  3993  096B  0008               	return
  3994  096C                     l1855:	
  3995  096C  0836               	movf	___ftmul@sign,w
  3996  096D  3E7B               	addlw	123
  3997  096E  00AD               	movwf	??___ftmul
  3998  096F  082D               	movf	??___ftmul,w
  3999  0970  07B1               	addwf	___ftmul@exp,f
  4000  0971  0827               	movf	___ftmul@f1,w
  4001  0972  00AD               	movwf	??___ftmul
  4002  0973  0828               	movf	___ftmul@f1+1,w
  4003  0974  00AE               	movwf	??___ftmul+1
  4004  0975  0829               	movf	___ftmul@f1+2,w
  4005  0976  00AF               	movwf	??___ftmul+2
  4006  0977  3010               	movlw	16
  4007  0978                     u2595:	
  4008  0978  1003               	clrc
  4009  0979  0CAF               	rrf	??___ftmul+2,f
  4010  097A  0CAE               	rrf	??___ftmul+1,f
  4011  097B  0CAD               	rrf	??___ftmul,f
  4012  097C  3EFF               	addlw	-1
  4013  097D  1D03               	skipz
  4014  097E  2978               	goto	u2595
  4015  097F  082D               	movf	??___ftmul,w
  4016  0980  00B0               	movwf	??___ftmul+3
  4017  0981  0830               	movf	??___ftmul+3,w
  4018  0982  00B6               	movwf	___ftmul@sign
  4019  0983  082A               	movf	___ftmul@f2,w
  4020  0984  00AD               	movwf	??___ftmul
  4021  0985  082B               	movf	___ftmul@f2+1,w
  4022  0986  00AE               	movwf	??___ftmul+1
  4023  0987  082C               	movf	___ftmul@f2+2,w
  4024  0988  00AF               	movwf	??___ftmul+2
  4025  0989  3010               	movlw	16
  4026  098A                     u2605:	
  4027  098A  1003               	clrc
  4028  098B  0CAF               	rrf	??___ftmul+2,f
  4029  098C  0CAE               	rrf	??___ftmul+1,f
  4030  098D  0CAD               	rrf	??___ftmul,f
  4031  098E  3EFF               	addlw	-1
  4032  098F  1D03               	skipz
  4033  0990  298A               	goto	u2605
  4034  0991  082D               	movf	??___ftmul,w
  4035  0992  00B0               	movwf	??___ftmul+3
  4036  0993  0830               	movf	??___ftmul+3,w
  4037  0994  06B6               	xorwf	___ftmul@sign,f
  4038  0995  3080               	movlw	128
  4039  0996  00AD               	movwf	??___ftmul
  4040  0997  082D               	movf	??___ftmul,w
  4041  0998  05B6               	andwf	___ftmul@sign,f
  4042  0999  17A8               	bsf	___ftmul@f1+1,7
  4043  099A  17AB               	bsf	___ftmul@f2+1,7
  4044  099B  30FF               	movlw	255
  4045  099C  05AA               	andwf	___ftmul@f2,f
  4046  099D  30FF               	movlw	255
  4047  099E  05AB               	andwf	___ftmul@f2+1,f
  4048  099F  3000               	movlw	0
  4049  09A0  05AC               	andwf	___ftmul@f2+2,f
  4050  09A1  3000               	movlw	0
  4051  09A2  00B2               	movwf	___ftmul@f3_as_product
  4052  09A3  3000               	movlw	0
  4053  09A4  00B3               	movwf	___ftmul@f3_as_product+1
  4054  09A5  3000               	movlw	0
  4055  09A6  00B4               	movwf	___ftmul@f3_as_product+2
  4056  09A7  3007               	movlw	7
  4057  09A8  00AD               	movwf	??___ftmul
  4058  09A9  082D               	movf	??___ftmul,w
  4059  09AA  00B5               	movwf	___ftmul@cntr
  4060  09AB                     l1867:	
  4061  09AB  1C27               	btfss	___ftmul@f1,0
  4062  09AC  29BB               	goto	l1871
  4063  09AD  082A               	movf	___ftmul@f2,w
  4064  09AE  07B2               	addwf	___ftmul@f3_as_product,f
  4065  09AF  082B               	movf	___ftmul@f2+1,w
  4066  09B0  1103               	clrz
  4067  09B1  1803               	skipnc
  4068  09B2  0A2B               	incf	___ftmul@f2+1,w
  4069  09B3  1D03               	btfss	3,2
  4070  09B4  07B3               	addwf	___ftmul@f3_as_product+1,f
  4071  09B5  082C               	movf	___ftmul@f2+2,w
  4072  09B6  1103               	clrz
  4073  09B7  1803               	skipnc
  4074  09B8  0A2C               	incf	___ftmul@f2+2,w
  4075  09B9  1D03               	btfss	3,2
  4076  09BA  07B4               	addwf	___ftmul@f3_as_product+2,f
  4077  09BB                     l1871:	
  4078  09BB  3001               	movlw	1
  4079  09BC                     u2635:	
  4080  09BC  1003               	clrc
  4081  09BD  0CA9               	rrf	___ftmul@f1+2,f
  4082  09BE  0CA8               	rrf	___ftmul@f1+1,f
  4083  09BF  0CA7               	rrf	___ftmul@f1,f
  4084  09C0  3EFF               	addlw	-1
  4085  09C1  1D03               	skipz
  4086  09C2  29BC               	goto	u2635
  4087  09C3  3001               	movlw	1
  4088  09C4                     u2645:	
  4089  09C4  1003               	clrc
  4090  09C5  0DAA               	rlf	___ftmul@f2,f
  4091  09C6  0DAB               	rlf	___ftmul@f2+1,f
  4092  09C7  0DAC               	rlf	___ftmul@f2+2,f
  4093  09C8  3EFF               	addlw	-1
  4094  09C9  1D03               	skipz
  4095  09CA  29C4               	goto	u2645
  4096  09CB  3001               	movlw	1
  4097  09CC  02B5               	subwf	___ftmul@cntr,f
  4098  09CD  1D03               	btfss	3,2
  4099  09CE  29AB               	goto	l1867
  4100  09CF  3009               	movlw	9
  4101  09D0  00AD               	movwf	??___ftmul
  4102  09D1  082D               	movf	??___ftmul,w
  4103  09D2  00B5               	movwf	___ftmul@cntr
  4104  09D3                     l1879:	
  4105  09D3  1C27               	btfss	___ftmul@f1,0
  4106  09D4  29E3               	goto	l1883
  4107  09D5  082A               	movf	___ftmul@f2,w
  4108  09D6  07B2               	addwf	___ftmul@f3_as_product,f
  4109  09D7  082B               	movf	___ftmul@f2+1,w
  4110  09D8  1103               	clrz
  4111  09D9  1803               	skipnc
  4112  09DA  0A2B               	incf	___ftmul@f2+1,w
  4113  09DB  1D03               	btfss	3,2
  4114  09DC  07B3               	addwf	___ftmul@f3_as_product+1,f
  4115  09DD  082C               	movf	___ftmul@f2+2,w
  4116  09DE  1103               	clrz
  4117  09DF  1803               	skipnc
  4118  09E0  0A2C               	incf	___ftmul@f2+2,w
  4119  09E1  1D03               	btfss	3,2
  4120  09E2  07B4               	addwf	___ftmul@f3_as_product+2,f
  4121  09E3                     l1883:	
  4122  09E3  3001               	movlw	1
  4123  09E4                     u2685:	
  4124  09E4  1003               	clrc
  4125  09E5  0CA9               	rrf	___ftmul@f1+2,f
  4126  09E6  0CA8               	rrf	___ftmul@f1+1,f
  4127  09E7  0CA7               	rrf	___ftmul@f1,f
  4128  09E8  3EFF               	addlw	-1
  4129  09E9  1D03               	skipz
  4130  09EA  29E4               	goto	u2685
  4131  09EB  3001               	movlw	1
  4132  09EC                     u2695:	
  4133  09EC  1003               	clrc
  4134  09ED  0CB4               	rrf	___ftmul@f3_as_product+2,f
  4135  09EE  0CB3               	rrf	___ftmul@f3_as_product+1,f
  4136  09EF  0CB2               	rrf	___ftmul@f3_as_product,f
  4137  09F0  3EFF               	addlw	-1
  4138  09F1  1D03               	skipz
  4139  09F2  29EC               	goto	u2695
  4140  09F3  3001               	movlw	1
  4141  09F4  02B5               	subwf	___ftmul@cntr,f
  4142  09F5  1D03               	btfss	3,2
  4143  09F6  29D3               	goto	l1879
  4144  09F7  0832               	movf	___ftmul@f3_as_product,w
  4145  09F8  00F0               	movwf	___ftpack@arg
  4146  09F9  0833               	movf	___ftmul@f3_as_product+1,w
  4147  09FA  00F1               	movwf	___ftpack@arg+1
  4148  09FB  0834               	movf	___ftmul@f3_as_product+2,w
  4149  09FC  00F2               	movwf	___ftpack@arg+2
  4150  09FD  0831               	movf	___ftmul@exp,w
  4151  09FE  00AD               	movwf	??___ftmul
  4152  09FF  082D               	movf	??___ftmul,w
  4153  0A00  00F3               	movwf	___ftpack@exp
  4154  0A01  0836               	movf	___ftmul@sign,w
  4155  0A02  00AE               	movwf	??___ftmul+1
  4156  0A03  082E               	movf	??___ftmul+1,w
  4157  0A04  00F4               	movwf	___ftpack@sign
  4158  0A05  120A  158A  200F   	fcall	___ftpack
  4159  0A08  0870               	movf	?___ftpack,w
  4160  0A09  1283               	bcf	3,5	;RP0=0, select bank0
  4161  0A0A  1303               	bcf	3,6	;RP1=0, select bank0
  4162  0A0B  00A7               	movwf	?___ftmul
  4163  0A0C  0871               	movf	?___ftpack+1,w
  4164  0A0D  00A8               	movwf	?___ftmul+1
  4165  0A0E  0872               	movf	?___ftpack+2,w
  4166  0A0F  00A9               	movwf	?___ftmul+2
  4167  0A10  0008               	return
  4168  0A11                     __end_of___ftmul:	
  4169                           
  4170                           	psect	text6
  4171  13CC                     __ptext6:	
  4172 ;; *************** function ___bmul *****************
  4173 ;; Defined at:
  4174 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul8.c"
  4175 ;; Parameters:    Size  Location     Type
  4176 ;;  multiplier      1    wreg     unsigned char 
  4177 ;;  multiplicand    1    4[BANK0 ] unsigned char 
  4178 ;; Auto vars:     Size  Location     Type
  4179 ;;  multiplier      1    6[BANK0 ] unsigned char 
  4180 ;;  product         1    5[BANK0 ] unsigned char 
  4181 ;; Return value:  Size  Location     Type
  4182 ;;                  1    wreg      unsigned char 
  4183 ;; Registers used:
  4184 ;;		wreg, status,2, status,0
  4185 ;; Tracked objects:
  4186 ;;		On entry : 0/0
  4187 ;;		On exit  : 0/0
  4188 ;;		Unchanged: 0/0
  4189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4190 ;;      Params:         0       1       0       0       0
  4191 ;;      Locals:         0       2       0       0       0
  4192 ;;      Temps:          1       0       0       0       0
  4193 ;;      Totals:         1       3       0       0       0
  4194 ;;Total ram usage:        4 bytes
  4195 ;; Hardware stack levels used:    1
  4196 ;; This function calls:
  4197 ;;		Nothing
  4198 ;; This function is called by:
  4199 ;;		_fround
  4200 ;;		_scale
  4201 ;; This function uses a non-reentrant model
  4202 ;;
  4203                           
  4204                           
  4205                           ;psect for function ___bmul
  4206  13CC                     ___bmul:	
  4207                           
  4208                           ;incstack = 0
  4209                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4210                           ;___bmul@multiplier stored from wreg
  4211  13CC  1283               	bcf	3,5	;RP0=0, select bank0
  4212  13CD  1303               	bcf	3,6	;RP1=0, select bank0
  4213  13CE  00A6               	movwf	___bmul@multiplier
  4214  13CF  01A5               	clrf	___bmul@product
  4215  13D0                     l1679:	
  4216  13D0  1C26               	btfss	___bmul@multiplier,0
  4217  13D1  2BD6               	goto	l1683
  4218  13D2  0824               	movf	___bmul@multiplicand,w
  4219  13D3  00FC               	movwf	??___bmul
  4220  13D4  087C               	movf	??___bmul,w
  4221  13D5  07A5               	addwf	___bmul@product,f
  4222  13D6                     l1683:	
  4223  13D6  1003               	clrc
  4224  13D7  0DA4               	rlf	___bmul@multiplicand,f
  4225  13D8  1003               	clrc
  4226  13D9  0CA6               	rrf	___bmul@multiplier,f
  4227  13DA  0826               	movf	___bmul@multiplier,w
  4228  13DB  1D03               	btfss	3,2
  4229  13DC  2BD0               	goto	l1679
  4230  13DD  0825               	movf	___bmul@product,w
  4231  13DE  0008               	return
  4232  13DF                     __end_of___bmul:	
  4233                           
  4234                           	psect	text7
  4235  156A                     __ptext7:	
  4236 ;; *************** function ___awmod *****************
  4237 ;; Defined at:
  4238 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  4239 ;; Parameters:    Size  Location     Type
  4240 ;;  divisor         2    0[COMMON] int 
  4241 ;;  dividend        2    2[COMMON] int 
  4242 ;; Auto vars:     Size  Location     Type
  4243 ;;  sign            1    6[COMMON] unsigned char 
  4244 ;;  counter         1    5[COMMON] unsigned char 
  4245 ;; Return value:  Size  Location     Type
  4246 ;;                  2    0[COMMON] int 
  4247 ;; Registers used:
  4248 ;;		wreg, status,2, status,0
  4249 ;; Tracked objects:
  4250 ;;		On entry : 0/0
  4251 ;;		On exit  : 0/0
  4252 ;;		Unchanged: 0/0
  4253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4254 ;;      Params:         4       0       0       0       0
  4255 ;;      Locals:         2       0       0       0       0
  4256 ;;      Temps:          1       0       0       0       0
  4257 ;;      Totals:         7       0       0       0       0
  4258 ;;Total ram usage:        7 bytes
  4259 ;; Hardware stack levels used:    1
  4260 ;; This function calls:
  4261 ;;		Nothing
  4262 ;; This function is called by:
  4263 ;;		_fround
  4264 ;;		_scale
  4265 ;; This function uses a non-reentrant model
  4266 ;;
  4267                           
  4268                           
  4269                           ;psect for function ___awmod
  4270  156A                     ___awmod:	
  4271                           
  4272                           ;incstack = 0
  4273                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4274  156A  01F6               	clrf	___awmod@sign
  4275  156B  1FF3               	btfss	___awmod@dividend+1,7
  4276  156C  2D74               	goto	l1743
  4277  156D  09F2               	comf	___awmod@dividend,f
  4278  156E  09F3               	comf	___awmod@dividend+1,f
  4279  156F  0AF2               	incf	___awmod@dividend,f
  4280  1570  1903               	skipnz
  4281  1571  0AF3               	incf	___awmod@dividend+1,f
  4282  1572  01F6               	clrf	___awmod@sign
  4283  1573  0AF6               	incf	___awmod@sign,f
  4284  1574                     l1743:	
  4285  1574  1FF1               	btfss	___awmod@divisor+1,7
  4286  1575  2D7B               	goto	l1747
  4287  1576  09F0               	comf	___awmod@divisor,f
  4288  1577  09F1               	comf	___awmod@divisor+1,f
  4289  1578  0AF0               	incf	___awmod@divisor,f
  4290  1579  1903               	skipnz
  4291  157A  0AF1               	incf	___awmod@divisor+1,f
  4292  157B                     l1747:	
  4293  157B  0870               	movf	___awmod@divisor,w
  4294  157C  0471               	iorwf	___awmod@divisor+1,w
  4295  157D  1903               	btfsc	3,2
  4296  157E  2DA8               	goto	l1765
  4297  157F  01F5               	clrf	___awmod@counter
  4298  1580  0AF5               	incf	___awmod@counter,f
  4299  1581                     l1755:	
  4300  1581  1BF1               	btfsc	___awmod@divisor+1,7
  4301  1582  2D8F               	goto	l1757
  4302  1583  3001               	movlw	1
  4303  1584                     u2275:	
  4304  1584  1003               	clrc
  4305  1585  0DF0               	rlf	___awmod@divisor,f
  4306  1586  0DF1               	rlf	___awmod@divisor+1,f
  4307  1587  3EFF               	addlw	-1
  4308  1588  1D03               	skipz
  4309  1589  2D84               	goto	u2275
  4310  158A  3001               	movlw	1
  4311  158B  00F4               	movwf	??___awmod
  4312  158C  0874               	movf	??___awmod,w
  4313  158D  07F5               	addwf	___awmod@counter,f
  4314  158E  2D81               	goto	l1755
  4315  158F                     l1757:	
  4316  158F  0871               	movf	___awmod@divisor+1,w
  4317  1590  0273               	subwf	___awmod@dividend+1,w
  4318  1591  1D03               	skipz
  4319  1592  2D95               	goto	u2295
  4320  1593  0870               	movf	___awmod@divisor,w
  4321  1594  0272               	subwf	___awmod@dividend,w
  4322  1595                     u2295:	
  4323  1595  1C03               	skipc
  4324  1596  2D9D               	goto	l1761
  4325  1597  0870               	movf	___awmod@divisor,w
  4326  1598  02F2               	subwf	___awmod@dividend,f
  4327  1599  0871               	movf	___awmod@divisor+1,w
  4328  159A  1C03               	skipc
  4329  159B  03F3               	decf	___awmod@dividend+1,f
  4330  159C  02F3               	subwf	___awmod@dividend+1,f
  4331  159D                     l1761:	
  4332  159D  3001               	movlw	1
  4333  159E                     u2305:	
  4334  159E  1003               	clrc
  4335  159F  0CF1               	rrf	___awmod@divisor+1,f
  4336  15A0  0CF0               	rrf	___awmod@divisor,f
  4337  15A1  3EFF               	addlw	-1
  4338  15A2  1D03               	skipz
  4339  15A3  2D9E               	goto	u2305
  4340  15A4  3001               	movlw	1
  4341  15A5  02F5               	subwf	___awmod@counter,f
  4342  15A6  1D03               	btfss	3,2
  4343  15A7  2D8F               	goto	l1757
  4344  15A8                     l1765:	
  4345  15A8  0876               	movf	___awmod@sign,w
  4346  15A9  1903               	btfsc	3,2
  4347  15AA  2DB0               	goto	l1769
  4348  15AB  09F2               	comf	___awmod@dividend,f
  4349  15AC  09F3               	comf	___awmod@dividend+1,f
  4350  15AD  0AF2               	incf	___awmod@dividend,f
  4351  15AE  1903               	skipnz
  4352  15AF  0AF3               	incf	___awmod@dividend+1,f
  4353  15B0                     l1769:	
  4354  15B0  0873               	movf	___awmod@dividend+1,w
  4355  15B1  00F1               	movwf	?___awmod+1
  4356  15B2  0872               	movf	___awmod@dividend,w
  4357  15B3  00F0               	movwf	?___awmod
  4358  15B4  0008               	return
  4359  15B5                     __end_of___awmod:	
  4360                           
  4361                           	psect	text8
  4362  165C                     __ptext8:	
  4363 ;; *************** function ___awdiv *****************
  4364 ;; Defined at:
  4365 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  4366 ;; Parameters:    Size  Location     Type
  4367 ;;  divisor         2    7[COMMON] int 
  4368 ;;  dividend        2    9[COMMON] int 
  4369 ;; Auto vars:     Size  Location     Type
  4370 ;;  quotient        2    2[BANK0 ] int 
  4371 ;;  sign            1    1[BANK0 ] unsigned char 
  4372 ;;  counter         1    0[BANK0 ] unsigned char 
  4373 ;; Return value:  Size  Location     Type
  4374 ;;                  2    7[COMMON] int 
  4375 ;; Registers used:
  4376 ;;		wreg, status,2, status,0
  4377 ;; Tracked objects:
  4378 ;;		On entry : 0/0
  4379 ;;		On exit  : 0/0
  4380 ;;		Unchanged: 0/0
  4381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4382 ;;      Params:         4       0       0       0       0
  4383 ;;      Locals:         0       4       0       0       0
  4384 ;;      Temps:          1       0       0       0       0
  4385 ;;      Totals:         5       4       0       0       0
  4386 ;;Total ram usage:        9 bytes
  4387 ;; Hardware stack levels used:    1
  4388 ;; This function calls:
  4389 ;;		Nothing
  4390 ;; This function is called by:
  4391 ;;		_fround
  4392 ;;		_scale
  4393 ;;		_sprintf
  4394 ;; This function uses a non-reentrant model
  4395 ;;
  4396                           
  4397                           
  4398                           ;psect for function ___awdiv
  4399  165C                     ___awdiv:	
  4400                           
  4401                           ;incstack = 0
  4402                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4403  165C  1283               	bcf	3,5	;RP0=0, select bank0
  4404  165D  1303               	bcf	3,6	;RP1=0, select bank0
  4405  165E  01A1               	clrf	___awdiv@sign
  4406  165F  1FF8               	btfss	___awdiv@divisor+1,7
  4407  1660  2E68               	goto	l1699
  4408  1661  09F7               	comf	___awdiv@divisor,f
  4409  1662  09F8               	comf	___awdiv@divisor+1,f
  4410  1663  0AF7               	incf	___awdiv@divisor,f
  4411  1664  1903               	skipnz
  4412  1665  0AF8               	incf	___awdiv@divisor+1,f
  4413  1666  01A1               	clrf	___awdiv@sign
  4414  1667  0AA1               	incf	___awdiv@sign,f
  4415  1668                     l1699:	
  4416  1668  1FFA               	btfss	___awdiv@dividend+1,7
  4417  1669  2E73               	goto	l1705
  4418  166A  09F9               	comf	___awdiv@dividend,f
  4419  166B  09FA               	comf	___awdiv@dividend+1,f
  4420  166C  0AF9               	incf	___awdiv@dividend,f
  4421  166D  1903               	skipnz
  4422  166E  0AFA               	incf	___awdiv@dividend+1,f
  4423  166F  3001               	movlw	1
  4424  1670  00FB               	movwf	??___awdiv
  4425  1671  087B               	movf	??___awdiv,w
  4426  1672  06A1               	xorwf	___awdiv@sign,f
  4427  1673                     l1705:	
  4428  1673  01A2               	clrf	___awdiv@quotient
  4429  1674  01A3               	clrf	___awdiv@quotient+1
  4430  1675  0877               	movf	___awdiv@divisor,w
  4431  1676  0478               	iorwf	___awdiv@divisor+1,w
  4432  1677  1903               	btfsc	3,2
  4433  1678  2EAA               	goto	l1727
  4434  1679  01A0               	clrf	___awdiv@counter
  4435  167A  0AA0               	incf	___awdiv@counter,f
  4436  167B                     l1715:	
  4437  167B  1BF8               	btfsc	___awdiv@divisor+1,7
  4438  167C  2E89               	goto	l1717
  4439  167D  3001               	movlw	1
  4440  167E                     u2175:	
  4441  167E  1003               	clrc
  4442  167F  0DF7               	rlf	___awdiv@divisor,f
  4443  1680  0DF8               	rlf	___awdiv@divisor+1,f
  4444  1681  3EFF               	addlw	-1
  4445  1682  1D03               	skipz
  4446  1683  2E7E               	goto	u2175
  4447  1684  3001               	movlw	1
  4448  1685  00FB               	movwf	??___awdiv
  4449  1686  087B               	movf	??___awdiv,w
  4450  1687  07A0               	addwf	___awdiv@counter,f
  4451  1688  2E7B               	goto	l1715
  4452  1689                     l1717:	
  4453  1689  3001               	movlw	1
  4454  168A                     u2195:	
  4455  168A  1003               	clrc
  4456  168B  0DA2               	rlf	___awdiv@quotient,f
  4457  168C  0DA3               	rlf	___awdiv@quotient+1,f
  4458  168D  3EFF               	addlw	-1
  4459  168E  1D03               	skipz
  4460  168F  2E8A               	goto	u2195
  4461  1690  0878               	movf	___awdiv@divisor+1,w
  4462  1691  027A               	subwf	___awdiv@dividend+1,w
  4463  1692  1D03               	skipz
  4464  1693  2E96               	goto	u2205
  4465  1694  0877               	movf	___awdiv@divisor,w
  4466  1695  0279               	subwf	___awdiv@dividend,w
  4467  1696                     u2205:	
  4468  1696  1C03               	skipc
  4469  1697  2E9F               	goto	l1723
  4470  1698  0877               	movf	___awdiv@divisor,w
  4471  1699  02F9               	subwf	___awdiv@dividend,f
  4472  169A  0878               	movf	___awdiv@divisor+1,w
  4473  169B  1C03               	skipc
  4474  169C  03FA               	decf	___awdiv@dividend+1,f
  4475  169D  02FA               	subwf	___awdiv@dividend+1,f
  4476  169E  1422               	bsf	___awdiv@quotient,0
  4477  169F                     l1723:	
  4478  169F  3001               	movlw	1
  4479  16A0                     u2215:	
  4480  16A0  1003               	clrc
  4481  16A1  0CF8               	rrf	___awdiv@divisor+1,f
  4482  16A2  0CF7               	rrf	___awdiv@divisor,f
  4483  16A3  3EFF               	addlw	-1
  4484  16A4  1D03               	skipz
  4485  16A5  2EA0               	goto	u2215
  4486  16A6  3001               	movlw	1
  4487  16A7  02A0               	subwf	___awdiv@counter,f
  4488  16A8  1D03               	btfss	3,2
  4489  16A9  2E89               	goto	l1717
  4490  16AA                     l1727:	
  4491  16AA  0821               	movf	___awdiv@sign,w
  4492  16AB  1903               	btfsc	3,2
  4493  16AC  2EB2               	goto	l1731
  4494  16AD  09A2               	comf	___awdiv@quotient,f
  4495  16AE  09A3               	comf	___awdiv@quotient+1,f
  4496  16AF  0AA2               	incf	___awdiv@quotient,f
  4497  16B0  1903               	skipnz
  4498  16B1  0AA3               	incf	___awdiv@quotient+1,f
  4499  16B2                     l1731:	
  4500  16B2  0823               	movf	___awdiv@quotient+1,w
  4501  16B3  00F8               	movwf	?___awdiv+1
  4502  16B4  0822               	movf	___awdiv@quotient,w
  4503  16B5  00F7               	movwf	?___awdiv
  4504  16B6  0008               	return
  4505  16B7                     __end_of___awdiv:	
  4506                           
  4507                           	psect	text9
  4508  087B                     __ptext9:	
  4509 ;; *************** function __tdiv_to_l_ *****************
  4510 ;; Defined at:
  4511 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  4512 ;; Parameters:    Size  Location     Type
  4513 ;;  f1              3    0[COMMON] float 
  4514 ;;  f2              3    3[COMMON] float 
  4515 ;; Auto vars:     Size  Location     Type
  4516 ;;  quot            4    0[BANK0 ] unsigned long 
  4517 ;;  exp1            1    5[BANK0 ] unsigned char 
  4518 ;;  cntr            1    4[BANK0 ] unsigned char 
  4519 ;; Return value:  Size  Location     Type
  4520 ;;                  4    0[COMMON] unsigned long 
  4521 ;; Registers used:
  4522 ;;		wreg, status,2, status,0
  4523 ;; Tracked objects:
  4524 ;;		On entry : 0/0
  4525 ;;		On exit  : 0/0
  4526 ;;		Unchanged: 0/0
  4527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4528 ;;      Params:         6       0       0       0       0
  4529 ;;      Locals:         0       6       0       0       0
  4530 ;;      Temps:          4       0       0       0       0
  4531 ;;      Totals:        10       6       0       0       0
  4532 ;;Total ram usage:       16 bytes
  4533 ;; Hardware stack levels used:    1
  4534 ;; This function calls:
  4535 ;;		Nothing
  4536 ;; This function is called by:
  4537 ;;		_sprintf
  4538 ;; This function uses a non-reentrant model
  4539 ;;
  4540                           
  4541                           
  4542                           ;psect for function __tdiv_to_l_
  4543  087B                     __tdiv_to_l_:	
  4544                           
  4545                           ;incstack = 0
  4546                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  4547  087B  0870               	movf	__tdiv_to_l_@f1,w
  4548  087C  00F6               	movwf	??__tdiv_to_l_
  4549  087D  0871               	movf	__tdiv_to_l_@f1+1,w
  4550  087E  00F7               	movwf	??__tdiv_to_l_+1
  4551  087F  0872               	movf	__tdiv_to_l_@f1+2,w
  4552  0880  00F8               	movwf	??__tdiv_to_l_+2
  4553  0881  1003               	clrc
  4554  0882  0D77               	rlf	??__tdiv_to_l_+1,w
  4555  0883  0D78               	rlf	??__tdiv_to_l_+2,w
  4556  0884  00F9               	movwf	??__tdiv_to_l_+3
  4557  0885  0879               	movf	??__tdiv_to_l_+3,w
  4558  0886  1283               	bcf	3,5	;RP0=0, select bank0
  4559  0887  1303               	bcf	3,6	;RP1=0, select bank0
  4560  0888  00A5               	movwf	__tdiv_to_l_@exp1
  4561  0889  0825               	movf	__tdiv_to_l_@exp1,w
  4562  088A  1D03               	btfss	3,2
  4563  088B  2895               	goto	l2003
  4564  088C  3000               	movlw	0
  4565  088D  00F3               	movwf	?__tdiv_to_l_+3
  4566  088E  3000               	movlw	0
  4567  088F  00F2               	movwf	?__tdiv_to_l_+2
  4568  0890  3000               	movlw	0
  4569  0891  00F1               	movwf	?__tdiv_to_l_+1
  4570  0892  3000               	movlw	0
  4571  0893  00F0               	movwf	?__tdiv_to_l_
  4572  0894  0008               	return
  4573  0895                     l2003:	
  4574  0895  0873               	movf	__tdiv_to_l_@f2,w
  4575  0896  00F6               	movwf	??__tdiv_to_l_
  4576  0897  0874               	movf	__tdiv_to_l_@f2+1,w
  4577  0898  00F7               	movwf	??__tdiv_to_l_+1
  4578  0899  0875               	movf	__tdiv_to_l_@f2+2,w
  4579  089A  00F8               	movwf	??__tdiv_to_l_+2
  4580  089B  1003               	clrc
  4581  089C  0D77               	rlf	??__tdiv_to_l_+1,w
  4582  089D  0D78               	rlf	??__tdiv_to_l_+2,w
  4583  089E  00F9               	movwf	??__tdiv_to_l_+3
  4584  089F  0879               	movf	??__tdiv_to_l_+3,w
  4585  08A0  00A4               	movwf	__tdiv_to_l_@cntr
  4586  08A1  0824               	movf	__tdiv_to_l_@cntr,w
  4587  08A2  1D03               	btfss	3,2
  4588  08A3  28AD               	goto	l509
  4589  08A4  3000               	movlw	0
  4590  08A5  00F3               	movwf	?__tdiv_to_l_+3
  4591  08A6  3000               	movlw	0
  4592  08A7  00F2               	movwf	?__tdiv_to_l_+2
  4593  08A8  3000               	movlw	0
  4594  08A9  00F1               	movwf	?__tdiv_to_l_+1
  4595  08AA  3000               	movlw	0
  4596  08AB  00F0               	movwf	?__tdiv_to_l_
  4597  08AC  0008               	return
  4598  08AD                     l509:	
  4599  08AD  17F1               	bsf	__tdiv_to_l_@f1+1,7
  4600  08AE  30FF               	movlw	255
  4601  08AF  05F0               	andwf	__tdiv_to_l_@f1,f
  4602  08B0  30FF               	movlw	255
  4603  08B1  05F1               	andwf	__tdiv_to_l_@f1+1,f
  4604  08B2  3000               	movlw	0
  4605  08B3  05F2               	andwf	__tdiv_to_l_@f1+2,f
  4606  08B4  17F4               	bsf	__tdiv_to_l_@f2+1,7
  4607  08B5  30FF               	movlw	255
  4608  08B6  05F3               	andwf	__tdiv_to_l_@f2,f
  4609  08B7  30FF               	movlw	255
  4610  08B8  05F4               	andwf	__tdiv_to_l_@f2+1,f
  4611  08B9  3000               	movlw	0
  4612  08BA  05F5               	andwf	__tdiv_to_l_@f2+2,f
  4613  08BB  3000               	movlw	0
  4614  08BC  00A3               	movwf	__tdiv_to_l_@quot+3
  4615  08BD  3000               	movlw	0
  4616  08BE  00A2               	movwf	__tdiv_to_l_@quot+2
  4617  08BF  3000               	movlw	0
  4618  08C0  00A1               	movwf	__tdiv_to_l_@quot+1
  4619  08C1  3000               	movlw	0
  4620  08C2  00A0               	movwf	__tdiv_to_l_@quot
  4621  08C3  307F               	movlw	127
  4622  08C4  02A5               	subwf	__tdiv_to_l_@exp1,f
  4623  08C5  3098               	movlw	152
  4624  08C6  0724               	addwf	__tdiv_to_l_@cntr,w
  4625  08C7  00F6               	movwf	??__tdiv_to_l_
  4626  08C8  0876               	movf	??__tdiv_to_l_,w
  4627  08C9  02A5               	subwf	__tdiv_to_l_@exp1,f
  4628  08CA  3018               	movlw	24
  4629  08CB  00F6               	movwf	??__tdiv_to_l_
  4630  08CC  0876               	movf	??__tdiv_to_l_,w
  4631  08CD  00A4               	movwf	__tdiv_to_l_@cntr
  4632  08CE                     l2017:	
  4633  08CE  3001               	movlw	1
  4634  08CF  00F6               	movwf	??__tdiv_to_l_
  4635  08D0                     u2835:	
  4636  08D0  1003               	clrc
  4637  08D1  0DA0               	rlf	__tdiv_to_l_@quot,f
  4638  08D2  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  4639  08D3  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  4640  08D4  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  4641  08D5  0BF6               	decfsz	??__tdiv_to_l_,f
  4642  08D6  28D0               	goto	u2835
  4643  08D7  0875               	movf	__tdiv_to_l_@f2+2,w
  4644  08D8  0272               	subwf	__tdiv_to_l_@f1+2,w
  4645  08D9  1D03               	skipz
  4646  08DA  28E1               	goto	u2845
  4647  08DB  0874               	movf	__tdiv_to_l_@f2+1,w
  4648  08DC  0271               	subwf	__tdiv_to_l_@f1+1,w
  4649  08DD  1D03               	skipz
  4650  08DE  28E1               	goto	u2845
  4651  08DF  0873               	movf	__tdiv_to_l_@f2,w
  4652  08E0  0270               	subwf	__tdiv_to_l_@f1,w
  4653  08E1                     u2845:	
  4654  08E1  1C03               	skipc
  4655  08E2  28EE               	goto	l2025
  4656  08E3  0873               	movf	__tdiv_to_l_@f2,w
  4657  08E4  02F0               	subwf	__tdiv_to_l_@f1,f
  4658  08E5  0874               	movf	__tdiv_to_l_@f2+1,w
  4659  08E6  1C03               	skipc
  4660  08E7  0F74               	incfsz	__tdiv_to_l_@f2+1,w
  4661  08E8  02F1               	subwf	__tdiv_to_l_@f1+1,f
  4662  08E9  0875               	movf	__tdiv_to_l_@f2+2,w
  4663  08EA  1C03               	skipc
  4664  08EB  0A75               	incf	__tdiv_to_l_@f2+2,w
  4665  08EC  02F2               	subwf	__tdiv_to_l_@f1+2,f
  4666  08ED  1420               	bsf	__tdiv_to_l_@quot,0
  4667  08EE                     l2025:	
  4668  08EE  3001               	movlw	1
  4669  08EF                     u2855:	
  4670  08EF  1003               	clrc
  4671  08F0  0DF0               	rlf	__tdiv_to_l_@f1,f
  4672  08F1  0DF1               	rlf	__tdiv_to_l_@f1+1,f
  4673  08F2  0DF2               	rlf	__tdiv_to_l_@f1+2,f
  4674  08F3  3EFF               	addlw	-1
  4675  08F4  1D03               	skipz
  4676  08F5  28EF               	goto	u2855
  4677  08F6  3001               	movlw	1
  4678  08F7  02A4               	subwf	__tdiv_to_l_@cntr,f
  4679  08F8  1D03               	btfss	3,2
  4680  08F9  28CE               	goto	l2017
  4681  08FA  1FA5               	btfss	__tdiv_to_l_@exp1,7
  4682  08FB  291A               	goto	l2037
  4683  08FC  0825               	movf	__tdiv_to_l_@exp1,w
  4684  08FD  3A80               	xorlw	128
  4685  08FE  3E97               	addlw	151
  4686  08FF  1803               	skipnc
  4687  0900  290A               	goto	l2035
  4688  0901  3000               	movlw	0
  4689  0902  00F3               	movwf	?__tdiv_to_l_+3
  4690  0903  3000               	movlw	0
  4691  0904  00F2               	movwf	?__tdiv_to_l_+2
  4692  0905  3000               	movlw	0
  4693  0906  00F1               	movwf	?__tdiv_to_l_+1
  4694  0907  3000               	movlw	0
  4695  0908  00F0               	movwf	?__tdiv_to_l_
  4696  0909  0008               	return
  4697  090A                     l2035:	
  4698  090A  3001               	movlw	1
  4699  090B                     u2895:	
  4700  090B  1003               	clrc
  4701  090C  0CA3               	rrf	__tdiv_to_l_@quot+3,f
  4702  090D  0CA2               	rrf	__tdiv_to_l_@quot+2,f
  4703  090E  0CA1               	rrf	__tdiv_to_l_@quot+1,f
  4704  090F  0CA0               	rrf	__tdiv_to_l_@quot,f
  4705  0910  3EFF               	addlw	-1
  4706  0911  1D03               	skipz
  4707  0912  290B               	goto	u2895
  4708  0913  3001               	movlw	1
  4709  0914  00F6               	movwf	??__tdiv_to_l_
  4710  0915  0876               	movf	??__tdiv_to_l_,w
  4711  0916  07A5               	addwf	__tdiv_to_l_@exp1,f
  4712  0917  1903               	btfsc	3,2
  4713  0918  2935               	goto	l2045
  4714  0919  290A               	goto	l2035
  4715  091A                     l2037:	
  4716  091A  3018               	movlw	24
  4717  091B  0225               	subwf	__tdiv_to_l_@exp1,w
  4718  091C  1C03               	skipc
  4719  091D  2932               	goto	l519
  4720  091E  3000               	movlw	0
  4721  091F  00F3               	movwf	?__tdiv_to_l_+3
  4722  0920  3000               	movlw	0
  4723  0921  00F2               	movwf	?__tdiv_to_l_+2
  4724  0922  3000               	movlw	0
  4725  0923  00F1               	movwf	?__tdiv_to_l_+1
  4726  0924  3000               	movlw	0
  4727  0925  00F0               	movwf	?__tdiv_to_l_
  4728  0926  0008               	return
  4729  0927                     l2043:	
  4730  0927  3001               	movlw	1
  4731  0928  00F6               	movwf	??__tdiv_to_l_
  4732  0929                     u2925:	
  4733  0929  1003               	clrc
  4734  092A  0DA0               	rlf	__tdiv_to_l_@quot,f
  4735  092B  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  4736  092C  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  4737  092D  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  4738  092E  0BF6               	decfsz	??__tdiv_to_l_,f
  4739  092F  2929               	goto	u2925
  4740  0930  3001               	movlw	1
  4741  0931  02A5               	subwf	__tdiv_to_l_@exp1,f
  4742  0932                     l519:	
  4743  0932  0825               	movf	__tdiv_to_l_@exp1,w
  4744  0933  1D03               	btfss	3,2
  4745  0934  2927               	goto	l2043
  4746  0935                     l2045:	
  4747  0935  0823               	movf	__tdiv_to_l_@quot+3,w
  4748  0936  00F3               	movwf	?__tdiv_to_l_+3
  4749  0937  0822               	movf	__tdiv_to_l_@quot+2,w
  4750  0938  00F2               	movwf	?__tdiv_to_l_+2
  4751  0939  0821               	movf	__tdiv_to_l_@quot+1,w
  4752  093A  00F1               	movwf	?__tdiv_to_l_+1
  4753  093B  0820               	movf	__tdiv_to_l_@quot,w
  4754  093C  00F0               	movwf	?__tdiv_to_l_
  4755  093D  0008               	return
  4756  093E                     __end_of__tdiv_to_l_:	
  4757                           
  4758                           	psect	text10
  4759  0C33                     __ptext10:	
  4760 ;; *************** function __div_to_l_ *****************
  4761 ;; Defined at:
  4762 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  4763 ;; Parameters:    Size  Location     Type
  4764 ;;  f1              3    0[COMMON] unsigned long 
  4765 ;;  f2              3    3[COMMON] unsigned long 
  4766 ;; Auto vars:     Size  Location     Type
  4767 ;;  quot            4    0[BANK0 ] unsigned long 
  4768 ;;  exp1            1    5[BANK0 ] unsigned char 
  4769 ;;  cntr            1    4[BANK0 ] unsigned char 
  4770 ;; Return value:  Size  Location     Type
  4771 ;;                  4    0[COMMON] unsigned long 
  4772 ;; Registers used:
  4773 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4774 ;; Tracked objects:
  4775 ;;		On entry : 0/0
  4776 ;;		On exit  : 0/0
  4777 ;;		Unchanged: 0/0
  4778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4779 ;;      Params:         6       0       0       0       0
  4780 ;;      Locals:         0       6       0       0       0
  4781 ;;      Temps:          8       0       0       0       0
  4782 ;;      Totals:        14       6       0       0       0
  4783 ;;Total ram usage:       20 bytes
  4784 ;; Hardware stack levels used:    1
  4785 ;; This function calls:
  4786 ;;		Nothing
  4787 ;; This function is called by:
  4788 ;;		_sprintf
  4789 ;; This function uses a non-reentrant model
  4790 ;;
  4791                           
  4792                           
  4793                           ;psect for function __div_to_l_
  4794  0C33                     __div_to_l_:	
  4795                           
  4796                           ;incstack = 0
  4797                           ; Regs used in __div_to_l_: [wreg-fsr0h+status,2+status,0]
  4798  0C33  3070               	movlw	low (__div_to_l_@f1| 0)
  4799  0C34  0084               	movwf	4
  4800  0C35  0800               	movf	0,w
  4801  0C36  00F6               	movwf	??__div_to_l_
  4802  0C37  0A84               	incf	4,f
  4803  0C38  0800               	movf	0,w
  4804  0C39  00F7               	movwf	??__div_to_l_+1
  4805  0C3A  0A84               	incf	4,f
  4806  0C3B  0800               	movf	0,w
  4807  0C3C  00F8               	movwf	??__div_to_l_+2
  4808  0C3D  0A84               	incf	4,f
  4809  0C3E  0800               	movf	0,w
  4810  0C3F  00F9               	movwf	??__div_to_l_+3
  4811  0C40  1003               	clrc
  4812  0C41  0D78               	rlf	??__div_to_l_+2,w
  4813  0C42  0D79               	rlf	??__div_to_l_+3,w
  4814  0C43  00FA               	movwf	??__div_to_l_+4
  4815  0C44  087A               	movf	??__div_to_l_+4,w
  4816  0C45  1283               	bcf	3,5	;RP0=0, select bank0
  4817  0C46  1303               	bcf	3,6	;RP1=0, select bank0
  4818  0C47  00A5               	movwf	__div_to_l_@exp1
  4819  0C48  0825               	movf	__div_to_l_@exp1,w
  4820  0C49  1D03               	btfss	3,2
  4821  0C4A  2C54               	goto	l2055
  4822  0C4B  3000               	movlw	0
  4823  0C4C  00F3               	movwf	?__div_to_l_+3
  4824  0C4D  3000               	movlw	0
  4825  0C4E  00F2               	movwf	?__div_to_l_+2
  4826  0C4F  3000               	movlw	0
  4827  0C50  00F1               	movwf	?__div_to_l_+1
  4828  0C51  3000               	movlw	0
  4829  0C52  00F0               	movwf	?__div_to_l_
  4830  0C53  0008               	return
  4831  0C54                     l2055:	
  4832  0C54  3073               	movlw	low (__div_to_l_@f2| 0)
  4833  0C55  0084               	movwf	4
  4834  0C56  0800               	movf	0,w
  4835  0C57  00F6               	movwf	??__div_to_l_
  4836  0C58  0A84               	incf	4,f
  4837  0C59  0800               	movf	0,w
  4838  0C5A  00F7               	movwf	??__div_to_l_+1
  4839  0C5B  0A84               	incf	4,f
  4840  0C5C  0800               	movf	0,w
  4841  0C5D  00F8               	movwf	??__div_to_l_+2
  4842  0C5E  0A84               	incf	4,f
  4843  0C5F  0800               	movf	0,w
  4844  0C60  00F9               	movwf	??__div_to_l_+3
  4845  0C61  1003               	clrc
  4846  0C62  0D78               	rlf	??__div_to_l_+2,w
  4847  0C63  0D79               	rlf	??__div_to_l_+3,w
  4848  0C64  00FA               	movwf	??__div_to_l_+4
  4849  0C65  087A               	movf	??__div_to_l_+4,w
  4850  0C66  00A4               	movwf	__div_to_l_@cntr
  4851  0C67  0824               	movf	__div_to_l_@cntr,w
  4852  0C68  1D03               	btfss	3,2
  4853  0C69  2C73               	goto	l2061
  4854  0C6A  3000               	movlw	0
  4855  0C6B  00F3               	movwf	?__div_to_l_+3
  4856  0C6C  3000               	movlw	0
  4857  0C6D  00F2               	movwf	?__div_to_l_+2
  4858  0C6E  3000               	movlw	0
  4859  0C6F  00F1               	movwf	?__div_to_l_+1
  4860  0C70  3000               	movlw	0
  4861  0C71  00F0               	movwf	?__div_to_l_
  4862  0C72  0008               	return
  4863  0C73                     l2061:	
  4864  0C73  3070               	movlw	low (__div_to_l_@f1| 0)
  4865  0C74  0084               	movwf	4
  4866  0C75  3000               	movlw	0
  4867  0C76  0480               	iorwf	0,f
  4868  0C77  0A84               	incf	4,f
  4869  0C78  3000               	movlw	0
  4870  0C79  0480               	iorwf	0,f
  4871  0C7A  0A84               	incf	4,f
  4872  0C7B  3080               	movlw	128
  4873  0C7C  0480               	iorwf	0,f
  4874  0C7D  0A84               	incf	4,f
  4875  0C7E  3000               	movlw	0
  4876  0C7F  0480               	iorwf	0,f
  4877  0C80  3070               	movlw	low (__div_to_l_@f1| 0)
  4878  0C81  0084               	movwf	4
  4879  0C82  30FF               	movlw	255
  4880  0C83  0580               	andwf	0,f
  4881  0C84  0A84               	incf	4,f
  4882  0C85  30FF               	movlw	255
  4883  0C86  0580               	andwf	0,f
  4884  0C87  0A84               	incf	4,f
  4885  0C88  30FF               	movlw	255
  4886  0C89  0580               	andwf	0,f
  4887  0C8A  0A84               	incf	4,f
  4888  0C8B  3000               	movlw	0
  4889  0C8C  0580               	andwf	0,f
  4890  0C8D  3073               	movlw	low (__div_to_l_@f2| 0)
  4891  0C8E  0084               	movwf	4
  4892  0C8F  3000               	movlw	0
  4893  0C90  0480               	iorwf	0,f
  4894  0C91  0A84               	incf	4,f
  4895  0C92  3000               	movlw	0
  4896  0C93  0480               	iorwf	0,f
  4897  0C94  0A84               	incf	4,f
  4898  0C95  3080               	movlw	128
  4899  0C96  0480               	iorwf	0,f
  4900  0C97  0A84               	incf	4,f
  4901  0C98  3000               	movlw	0
  4902  0C99  0480               	iorwf	0,f
  4903  0C9A  3073               	movlw	low (__div_to_l_@f2| 0)
  4904  0C9B  0084               	movwf	4
  4905  0C9C  30FF               	movlw	255
  4906  0C9D  0580               	andwf	0,f
  4907  0C9E  0A84               	incf	4,f
  4908  0C9F  30FF               	movlw	255
  4909  0CA0  0580               	andwf	0,f
  4910  0CA1  0A84               	incf	4,f
  4911  0CA2  30FF               	movlw	255
  4912  0CA3  0580               	andwf	0,f
  4913  0CA4  0A84               	incf	4,f
  4914  0CA5  3000               	movlw	0
  4915  0CA6  0580               	andwf	0,f
  4916  0CA7  3000               	movlw	0
  4917  0CA8  00A3               	movwf	__div_to_l_@quot+3
  4918  0CA9  3000               	movlw	0
  4919  0CAA  00A2               	movwf	__div_to_l_@quot+2
  4920  0CAB  3000               	movlw	0
  4921  0CAC  00A1               	movwf	__div_to_l_@quot+1
  4922  0CAD  3000               	movlw	0
  4923  0CAE  00A0               	movwf	__div_to_l_@quot
  4924  0CAF  307F               	movlw	127
  4925  0CB0  02A5               	subwf	__div_to_l_@exp1,f
  4926  0CB1  30A0               	movlw	160
  4927  0CB2  0724               	addwf	__div_to_l_@cntr,w
  4928  0CB3  00F6               	movwf	??__div_to_l_
  4929  0CB4  0876               	movf	??__div_to_l_,w
  4930  0CB5  02A5               	subwf	__div_to_l_@exp1,f
  4931  0CB6  3020               	movlw	32
  4932  0CB7  00F6               	movwf	??__div_to_l_
  4933  0CB8  0876               	movf	??__div_to_l_,w
  4934  0CB9  00A4               	movwf	__div_to_l_@cntr
  4935  0CBA                     l2071:	
  4936  0CBA  3001               	movlw	1
  4937  0CBB  00F6               	movwf	??__div_to_l_
  4938  0CBC                     u2965:	
  4939  0CBC  1003               	clrc
  4940  0CBD  0DA0               	rlf	__div_to_l_@quot,f
  4941  0CBE  0DA1               	rlf	__div_to_l_@quot+1,f
  4942  0CBF  0DA2               	rlf	__div_to_l_@quot+2,f
  4943  0CC0  0DA3               	rlf	__div_to_l_@quot+3,f
  4944  0CC1  0BF6               	decfsz	??__div_to_l_,f
  4945  0CC2  2CBC               	goto	u2965
  4946  0CC3  3073               	movlw	low (__div_to_l_@f2| 0)
  4947  0CC4  0084               	movwf	4
  4948  0CC5  0800               	movf	0,w
  4949  0CC6  00F6               	movwf	??__div_to_l_
  4950  0CC7  0A84               	incf	4,f
  4951  0CC8  0800               	movf	0,w
  4952  0CC9  00F7               	movwf	??__div_to_l_+1
  4953  0CCA  0A84               	incf	4,f
  4954  0CCB  0800               	movf	0,w
  4955  0CCC  00F8               	movwf	??__div_to_l_+2
  4956  0CCD  0A84               	incf	4,f
  4957  0CCE  0800               	movf	0,w
  4958  0CCF  00F9               	movwf	??__div_to_l_+3
  4959  0CD0  3070               	movlw	low (__div_to_l_@f1| 0)
  4960  0CD1  0084               	movwf	4
  4961  0CD2  0800               	movf	0,w
  4962  0CD3  00FA               	movwf	??__div_to_l_+4
  4963  0CD4  0A84               	incf	4,f
  4964  0CD5  0800               	movf	0,w
  4965  0CD6  00FB               	movwf	??__div_to_l_+5
  4966  0CD7  0A84               	incf	4,f
  4967  0CD8  0800               	movf	0,w
  4968  0CD9  00FC               	movwf	??__div_to_l_+6
  4969  0CDA  0A84               	incf	4,f
  4970  0CDB  0800               	movf	0,w
  4971  0CDC  00FD               	movwf	??__div_to_l_+7
  4972  0CDD  0879               	movf	??__div_to_l_+3,w
  4973  0CDE  027D               	subwf	??__div_to_l_+7,w
  4974  0CDF  1D03               	skipz
  4975  0CE0  2CEB               	goto	u2975
  4976  0CE1  0878               	movf	??__div_to_l_+2,w
  4977  0CE2  027C               	subwf	??__div_to_l_+6,w
  4978  0CE3  1D03               	skipz
  4979  0CE4  2CEB               	goto	u2975
  4980  0CE5  0877               	movf	??__div_to_l_+1,w
  4981  0CE6  027B               	subwf	??__div_to_l_+5,w
  4982  0CE7  1D03               	skipz
  4983  0CE8  2CEB               	goto	u2975
  4984  0CE9  0876               	movf	??__div_to_l_,w
  4985  0CEA  027A               	subwf	??__div_to_l_+4,w
  4986  0CEB                     u2975:	
  4987  0CEB  1C03               	skipc
  4988  0CEC  2D10               	goto	l432
  4989  0CED  3073               	movlw	low (__div_to_l_@f2| 0)
  4990  0CEE  0084               	movwf	4
  4991  0CEF  0800               	movf	0,w
  4992  0CF0  00F6               	movwf	??__div_to_l_
  4993  0CF1  0A84               	incf	4,f
  4994  0CF2  0800               	movf	0,w
  4995  0CF3  00F7               	movwf	??__div_to_l_+1
  4996  0CF4  0A84               	incf	4,f
  4997  0CF5  0800               	movf	0,w
  4998  0CF6  00F8               	movwf	??__div_to_l_+2
  4999  0CF7  0A84               	incf	4,f
  5000  0CF8  0800               	movf	0,w
  5001  0CF9  00F9               	movwf	??__div_to_l_+3
  5002  0CFA  3070               	movlw	low (__div_to_l_@f1| 0)
  5003  0CFB  0084               	movwf	4
  5004  0CFC  0876               	movf	??__div_to_l_,w
  5005  0CFD  0280               	subwf	0,f
  5006  0CFE  0A84               	incf	4,f
  5007  0CFF  0877               	movf	??__div_to_l_+1,w
  5008  0D00  1C03               	skipc
  5009  0D01  0F77               	incfsz	??__div_to_l_+1,w
  5010  0D02  0280               	subwf	0,f
  5011  0D03  0A84               	incf	4,f
  5012  0D04  0878               	movf	??__div_to_l_+2,w
  5013  0D05  1C03               	skipc
  5014  0D06  0F78               	incfsz	??__div_to_l_+2,w
  5015  0D07  0280               	subwf	0,f
  5016  0D08  0A84               	incf	4,f
  5017  0D09  0879               	movf	??__div_to_l_+3,w
  5018  0D0A  1C03               	skipc
  5019  0D0B  0A79               	incf	??__div_to_l_+3,w
  5020  0D0C  0280               	subwf	0,f
  5021  0D0D  3003               	movlw	3
  5022  0D0E  0284               	subwf	4,f
  5023  0D0F  1420               	bsf	__div_to_l_@quot,0
  5024  0D10                     l432:	
  5025  0D10  3070               	movlw	low (__div_to_l_@f1| 0)
  5026  0D11  0084               	movwf	4
  5027  0D12  1003               	clrc
  5028  0D13  0D80               	rlf	0,f
  5029  0D14  0A84               	incf	4,f
  5030  0D15  0D80               	rlf	0,f
  5031  0D16  0A84               	incf	4,f
  5032  0D17  0D80               	rlf	0,f
  5033  0D18  0A84               	incf	4,f
  5034  0D19  0D80               	rlf	0,f
  5035  0D1A  0384               	decf	4,f
  5036  0D1B  0384               	decf	4,f
  5037  0D1C  0384               	decf	4,f
  5038  0D1D  3001               	movlw	1
  5039  0D1E  02A4               	subwf	__div_to_l_@cntr,f
  5040  0D1F  1D03               	btfss	3,2
  5041  0D20  2CBA               	goto	l2071
  5042  0D21  1FA5               	btfss	__div_to_l_@exp1,7
  5043  0D22  2D41               	goto	l2089
  5044  0D23  0825               	movf	__div_to_l_@exp1,w
  5045  0D24  3A80               	xorlw	128
  5046  0D25  3E9F               	addlw	159
  5047  0D26  1803               	skipnc
  5048  0D27  2D31               	goto	l2087
  5049  0D28  3000               	movlw	0
  5050  0D29  00F3               	movwf	?__div_to_l_+3
  5051  0D2A  3000               	movlw	0
  5052  0D2B  00F2               	movwf	?__div_to_l_+2
  5053  0D2C  3000               	movlw	0
  5054  0D2D  00F1               	movwf	?__div_to_l_+1
  5055  0D2E  3000               	movlw	0
  5056  0D2F  00F0               	movwf	?__div_to_l_
  5057  0D30  0008               	return
  5058  0D31                     l2087:	
  5059  0D31  3001               	movlw	1
  5060  0D32                     u3015:	
  5061  0D32  1003               	clrc
  5062  0D33  0CA3               	rrf	__div_to_l_@quot+3,f
  5063  0D34  0CA2               	rrf	__div_to_l_@quot+2,f
  5064  0D35  0CA1               	rrf	__div_to_l_@quot+1,f
  5065  0D36  0CA0               	rrf	__div_to_l_@quot,f
  5066  0D37  3EFF               	addlw	-1
  5067  0D38  1D03               	skipz
  5068  0D39  2D32               	goto	u3015
  5069  0D3A  3001               	movlw	1
  5070  0D3B  00F6               	movwf	??__div_to_l_
  5071  0D3C  0876               	movf	??__div_to_l_,w
  5072  0D3D  07A5               	addwf	__div_to_l_@exp1,f
  5073  0D3E  1903               	btfsc	3,2
  5074  0D3F  2D5C               	goto	l2097
  5075  0D40  2D31               	goto	l2087
  5076  0D41                     l2089:	
  5077  0D41  3020               	movlw	32
  5078  0D42  0225               	subwf	__div_to_l_@exp1,w
  5079  0D43  1C03               	skipc
  5080  0D44  2D59               	goto	l440
  5081  0D45  3000               	movlw	0
  5082  0D46  00F3               	movwf	?__div_to_l_+3
  5083  0D47  3000               	movlw	0
  5084  0D48  00F2               	movwf	?__div_to_l_+2
  5085  0D49  3000               	movlw	0
  5086  0D4A  00F1               	movwf	?__div_to_l_+1
  5087  0D4B  3000               	movlw	0
  5088  0D4C  00F0               	movwf	?__div_to_l_
  5089  0D4D  0008               	return
  5090  0D4E                     l2095:	
  5091  0D4E  3001               	movlw	1
  5092  0D4F  00F6               	movwf	??__div_to_l_
  5093  0D50                     u3045:	
  5094  0D50  1003               	clrc
  5095  0D51  0DA0               	rlf	__div_to_l_@quot,f
  5096  0D52  0DA1               	rlf	__div_to_l_@quot+1,f
  5097  0D53  0DA2               	rlf	__div_to_l_@quot+2,f
  5098  0D54  0DA3               	rlf	__div_to_l_@quot+3,f
  5099  0D55  0BF6               	decfsz	??__div_to_l_,f
  5100  0D56  2D50               	goto	u3045
  5101  0D57  3001               	movlw	1
  5102  0D58  02A5               	subwf	__div_to_l_@exp1,f
  5103  0D59                     l440:	
  5104  0D59  0825               	movf	__div_to_l_@exp1,w
  5105  0D5A  1D03               	btfss	3,2
  5106  0D5B  2D4E               	goto	l2095
  5107  0D5C                     l2097:	
  5108  0D5C  0823               	movf	__div_to_l_@quot+3,w
  5109  0D5D  00F3               	movwf	?__div_to_l_+3
  5110  0D5E  0822               	movf	__div_to_l_@quot+2,w
  5111  0D5F  00F2               	movwf	?__div_to_l_+2
  5112  0D60  0821               	movf	__div_to_l_@quot+1,w
  5113  0D61  00F1               	movwf	?__div_to_l_+1
  5114  0D62  0820               	movf	__div_to_l_@quot,w
  5115  0D63  00F0               	movwf	?__div_to_l_
  5116  0D64  0008               	return
  5117  0D65                     __end_of__div_to_l_:	
  5118                           
  5119                           	psect	text11
  5120  142E                     __ptext11:	
  5121 ;; *************** function ___wmul *****************
  5122 ;; Defined at:
  5123 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  5124 ;; Parameters:    Size  Location     Type
  5125 ;;  multiplier      2    0[COMMON] unsigned int 
  5126 ;;  multiplicand    2    2[COMMON] unsigned int 
  5127 ;; Auto vars:     Size  Location     Type
  5128 ;;  product         2    4[COMMON] unsigned int 
  5129 ;; Return value:  Size  Location     Type
  5130 ;;                  2    0[COMMON] unsigned int 
  5131 ;; Registers used:
  5132 ;;		wreg, status,2, status,0
  5133 ;; Tracked objects:
  5134 ;;		On entry : 0/0
  5135 ;;		On exit  : 0/0
  5136 ;;		Unchanged: 0/0
  5137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5138 ;;      Params:         4       0       0       0       0
  5139 ;;      Locals:         2       0       0       0       0
  5140 ;;      Temps:          0       0       0       0       0
  5141 ;;      Totals:         6       0       0       0       0
  5142 ;;Total ram usage:        6 bytes
  5143 ;; Hardware stack levels used:    1
  5144 ;; This function calls:
  5145 ;;		Nothing
  5146 ;; This function is called by:
  5147 ;;		_sprintf
  5148 ;; This function uses a non-reentrant model
  5149 ;;
  5150                           
  5151                           
  5152                           ;psect for function ___wmul
  5153  142E                     ___wmul:	
  5154                           
  5155                           ;incstack = 0
  5156                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5157  142E  01F4               	clrf	___wmul@product
  5158  142F  01F5               	clrf	___wmul@product+1
  5159  1430                     l2103:	
  5160  1430  1C70               	btfss	___wmul@multiplier,0
  5161  1431  2C38               	goto	l274
  5162  1432  0872               	movf	___wmul@multiplicand,w
  5163  1433  07F4               	addwf	___wmul@product,f
  5164  1434  1803               	skipnc
  5165  1435  0AF5               	incf	___wmul@product+1,f
  5166  1436  0873               	movf	___wmul@multiplicand+1,w
  5167  1437  07F5               	addwf	___wmul@product+1,f
  5168  1438                     l274:	
  5169  1438  3001               	movlw	1
  5170  1439                     u3075:	
  5171  1439  1003               	clrc
  5172  143A  0DF2               	rlf	___wmul@multiplicand,f
  5173  143B  0DF3               	rlf	___wmul@multiplicand+1,f
  5174  143C  3EFF               	addlw	-1
  5175  143D  1D03               	skipz
  5176  143E  2C39               	goto	u3075
  5177  143F  3001               	movlw	1
  5178  1440                     u3085:	
  5179  1440  1003               	clrc
  5180  1441  0CF1               	rrf	___wmul@multiplier+1,f
  5181  1442  0CF0               	rrf	___wmul@multiplier,f
  5182  1443  3EFF               	addlw	-1
  5183  1444  1D03               	skipz
  5184  1445  2C40               	goto	u3085
  5185  1446  0870               	movf	___wmul@multiplier,w
  5186  1447  0471               	iorwf	___wmul@multiplier+1,w
  5187  1448  1D03               	btfss	3,2
  5188  1449  2C30               	goto	l2103
  5189  144A  0875               	movf	___wmul@product+1,w
  5190  144B  00F1               	movwf	?___wmul+1
  5191  144C  0874               	movf	___wmul@product,w
  5192  144D  00F0               	movwf	?___wmul
  5193  144E  0008               	return
  5194  144F                     __end_of___wmul:	
  5195                           
  5196                           	psect	text12
  5197  144F                     __ptext12:	
  5198 ;; *************** function ___lltoft *****************
  5199 ;; Defined at:
  5200 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  5201 ;; Parameters:    Size  Location     Type
  5202 ;;  c               4    8[COMMON] unsigned long 
  5203 ;; Auto vars:     Size  Location     Type
  5204 ;;  exp             1   13[COMMON] unsigned char 
  5205 ;; Return value:  Size  Location     Type
  5206 ;;                  3    8[COMMON] float 
  5207 ;; Registers used:
  5208 ;;		wreg, status,2, status,0, pclath, cstack
  5209 ;; Tracked objects:
  5210 ;;		On entry : 0/0
  5211 ;;		On exit  : 0/0
  5212 ;;		Unchanged: 0/0
  5213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5214 ;;      Params:         4       0       0       0       0
  5215 ;;      Locals:         1       0       0       0       0
  5216 ;;      Temps:          1       0       0       0       0
  5217 ;;      Totals:         6       0       0       0       0
  5218 ;;Total ram usage:        6 bytes
  5219 ;; Hardware stack levels used:    1
  5220 ;; Hardware stack levels required when called:    1
  5221 ;; This function calls:
  5222 ;;		___ftpack
  5223 ;; This function is called by:
  5224 ;;		_sprintf
  5225 ;; This function uses a non-reentrant model
  5226 ;;
  5227                           
  5228                           
  5229                           ;psect for function ___lltoft
  5230  144F                     ___lltoft:	
  5231                           
  5232                           ;incstack = 0
  5233                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  5234  144F  308E               	movlw	142
  5235  1450  00FC               	movwf	??___lltoft
  5236  1451  087C               	movf	??___lltoft,w
  5237  1452  00FD               	movwf	___lltoft@exp
  5238  1453                     l2241:	
  5239  1453  30FF               	movlw	255
  5240  1454  057B               	andwf	___lltoft@c+3,w
  5241  1455  1903               	btfsc	3,2
  5242  1456  2C65               	goto	l2243
  5243  1457  3001               	movlw	1
  5244  1458                     u3405:	
  5245  1458  1003               	clrc
  5246  1459  0CFB               	rrf	___lltoft@c+3,f
  5247  145A  0CFA               	rrf	___lltoft@c+2,f
  5248  145B  0CF9               	rrf	___lltoft@c+1,f
  5249  145C  0CF8               	rrf	___lltoft@c,f
  5250  145D  3EFF               	addlw	-1
  5251  145E  1D03               	skipz
  5252  145F  2C58               	goto	u3405
  5253  1460  3001               	movlw	1
  5254  1461  00FC               	movwf	??___lltoft
  5255  1462  087C               	movf	??___lltoft,w
  5256  1463  07FD               	addwf	___lltoft@exp,f
  5257  1464  2C53               	goto	l2241
  5258  1465                     l2243:	
  5259  1465  0878               	movf	___lltoft@c,w
  5260  1466  00F0               	movwf	___ftpack@arg
  5261  1467  0879               	movf	___lltoft@c+1,w
  5262  1468  00F1               	movwf	___ftpack@arg+1
  5263  1469  087A               	movf	___lltoft@c+2,w
  5264  146A  00F2               	movwf	___ftpack@arg+2
  5265  146B  087D               	movf	___lltoft@exp,w
  5266  146C  00FC               	movwf	??___lltoft
  5267  146D  087C               	movf	??___lltoft,w
  5268  146E  00F3               	movwf	___ftpack@exp
  5269  146F  01F4               	clrf	___ftpack@sign
  5270  1470  120A  158A  200F   	fcall	___ftpack
  5271  1473  0870               	movf	?___ftpack,w
  5272  1474  00F8               	movwf	?___lltoft
  5273  1475  0871               	movf	?___ftpack+1,w
  5274  1476  00F9               	movwf	?___lltoft+1
  5275  1477  0872               	movf	?___ftpack+2,w
  5276  1478  00FA               	movwf	?___lltoft+2
  5277  1479  0008               	return
  5278  147A                     __end_of___lltoft:	
  5279                           
  5280                           	psect	text13
  5281  15B5                     __ptext13:	
  5282 ;; *************** function ___llmod *****************
  5283 ;; Defined at:
  5284 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  5285 ;; Parameters:    Size  Location     Type
  5286 ;;  divisor         4    0[COMMON] unsigned long 
  5287 ;;  dividend        4    4[COMMON] unsigned long 
  5288 ;; Auto vars:     Size  Location     Type
  5289 ;;  counter         1    9[COMMON] unsigned char 
  5290 ;; Return value:  Size  Location     Type
  5291 ;;                  4    0[COMMON] unsigned long 
  5292 ;; Registers used:
  5293 ;;		wreg, status,2, status,0
  5294 ;; Tracked objects:
  5295 ;;		On entry : 0/0
  5296 ;;		On exit  : 0/0
  5297 ;;		Unchanged: 0/0
  5298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5299 ;;      Params:         8       0       0       0       0
  5300 ;;      Locals:         1       0       0       0       0
  5301 ;;      Temps:          1       0       0       0       0
  5302 ;;      Totals:        10       0       0       0       0
  5303 ;;Total ram usage:       10 bytes
  5304 ;; Hardware stack levels used:    1
  5305 ;; This function calls:
  5306 ;;		Nothing
  5307 ;; This function is called by:
  5308 ;;		_sprintf
  5309 ;; This function uses a non-reentrant model
  5310 ;;
  5311                           
  5312                           
  5313                           ;psect for function ___llmod
  5314  15B5                     ___llmod:	
  5315                           
  5316                           ;incstack = 0
  5317                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  5318  15B5  0873               	movf	___llmod@divisor+3,w
  5319  15B6  0472               	iorwf	___llmod@divisor+2,w
  5320  15B7  0471               	iorwf	___llmod@divisor+1,w
  5321  15B8  0470               	iorwf	___llmod@divisor,w
  5322  15B9  1903               	skipnz
  5323  15BA  2DF8               	goto	l2233
  5324  15BB  01F9               	clrf	___llmod@counter
  5325  15BC  0AF9               	incf	___llmod@counter,f
  5326  15BD                     l2223:	
  5327  15BD  1BF3               	btfsc	___llmod@divisor+3,7
  5328  15BE  2DCD               	goto	l2225
  5329  15BF  3001               	movlw	1
  5330  15C0  00F8               	movwf	??___llmod
  5331  15C1                     u3355:	
  5332  15C1  1003               	clrc
  5333  15C2  0DF0               	rlf	___llmod@divisor,f
  5334  15C3  0DF1               	rlf	___llmod@divisor+1,f
  5335  15C4  0DF2               	rlf	___llmod@divisor+2,f
  5336  15C5  0DF3               	rlf	___llmod@divisor+3,f
  5337  15C6  0BF8               	decfsz	??___llmod,f
  5338  15C7  2DC1               	goto	u3355
  5339  15C8  3001               	movlw	1
  5340  15C9  00F8               	movwf	??___llmod
  5341  15CA  0878               	movf	??___llmod,w
  5342  15CB  07F9               	addwf	___llmod@counter,f
  5343  15CC  2DBD               	goto	l2223
  5344  15CD                     l2225:	
  5345  15CD  0873               	movf	___llmod@divisor+3,w
  5346  15CE  0277               	subwf	___llmod@dividend+3,w
  5347  15CF  1D03               	skipz
  5348  15D0  2DDB               	goto	u3375
  5349  15D1  0872               	movf	___llmod@divisor+2,w
  5350  15D2  0276               	subwf	___llmod@dividend+2,w
  5351  15D3  1D03               	skipz
  5352  15D4  2DDB               	goto	u3375
  5353  15D5  0871               	movf	___llmod@divisor+1,w
  5354  15D6  0275               	subwf	___llmod@dividend+1,w
  5355  15D7  1D03               	skipz
  5356  15D8  2DDB               	goto	u3375
  5357  15D9  0870               	movf	___llmod@divisor,w
  5358  15DA  0274               	subwf	___llmod@dividend,w
  5359  15DB                     u3375:	
  5360  15DB  1C03               	skipc
  5361  15DC  2DEB               	goto	l2229
  5362  15DD  0870               	movf	___llmod@divisor,w
  5363  15DE  02F4               	subwf	___llmod@dividend,f
  5364  15DF  0871               	movf	___llmod@divisor+1,w
  5365  15E0  1C03               	skipc
  5366  15E1  0F71               	incfsz	___llmod@divisor+1,w
  5367  15E2  02F5               	subwf	___llmod@dividend+1,f
  5368  15E3  0872               	movf	___llmod@divisor+2,w
  5369  15E4  1C03               	skipc
  5370  15E5  0F72               	incfsz	___llmod@divisor+2,w
  5371  15E6  02F6               	subwf	___llmod@dividend+2,f
  5372  15E7  0873               	movf	___llmod@divisor+3,w
  5373  15E8  1C03               	skipc
  5374  15E9  0F73               	incfsz	___llmod@divisor+3,w
  5375  15EA  02F7               	subwf	___llmod@dividend+3,f
  5376  15EB                     l2229:	
  5377  15EB  3001               	movlw	1
  5378  15EC                     u3385:	
  5379  15EC  1003               	clrc
  5380  15ED  0CF3               	rrf	___llmod@divisor+3,f
  5381  15EE  0CF2               	rrf	___llmod@divisor+2,f
  5382  15EF  0CF1               	rrf	___llmod@divisor+1,f
  5383  15F0  0CF0               	rrf	___llmod@divisor,f
  5384  15F1  3EFF               	addlw	-1
  5385  15F2  1D03               	skipz
  5386  15F3  2DEC               	goto	u3385
  5387  15F4  3001               	movlw	1
  5388  15F5  02F9               	subwf	___llmod@counter,f
  5389  15F6  1D03               	btfss	3,2
  5390  15F7  2DCD               	goto	l2225
  5391  15F8                     l2233:	
  5392  15F8  0877               	movf	___llmod@dividend+3,w
  5393  15F9  00F3               	movwf	?___llmod+3
  5394  15FA  0876               	movf	___llmod@dividend+2,w
  5395  15FB  00F2               	movwf	?___llmod+2
  5396  15FC  0875               	movf	___llmod@dividend+1,w
  5397  15FD  00F1               	movwf	?___llmod+1
  5398  15FE  0874               	movf	___llmod@dividend,w
  5399  15FF  00F0               	movwf	?___llmod
  5400  1600  0008               	return
  5401  1601                     __end_of___llmod:	
  5402                           
  5403                           	psect	text14
  5404  1714                     __ptext14:	
  5405 ;; *************** function ___lldiv *****************
  5406 ;; Defined at:
  5407 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  5408 ;; Parameters:    Size  Location     Type
  5409 ;;  divisor         4    0[COMMON] unsigned long 
  5410 ;;  dividend        4    4[COMMON] unsigned long 
  5411 ;; Auto vars:     Size  Location     Type
  5412 ;;  quotient        4    9[COMMON] unsigned long 
  5413 ;;  counter         1   13[COMMON] unsigned char 
  5414 ;; Return value:  Size  Location     Type
  5415 ;;                  4    0[COMMON] unsigned long 
  5416 ;; Registers used:
  5417 ;;		wreg, status,2, status,0
  5418 ;; Tracked objects:
  5419 ;;		On entry : 0/0
  5420 ;;		On exit  : 0/0
  5421 ;;		Unchanged: 0/0
  5422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5423 ;;      Params:         8       0       0       0       0
  5424 ;;      Locals:         5       0       0       0       0
  5425 ;;      Temps:          1       0       0       0       0
  5426 ;;      Totals:        14       0       0       0       0
  5427 ;;Total ram usage:       14 bytes
  5428 ;; Hardware stack levels used:    1
  5429 ;; This function calls:
  5430 ;;		Nothing
  5431 ;; This function is called by:
  5432 ;;		_sprintf
  5433 ;; This function uses a non-reentrant model
  5434 ;;
  5435                           
  5436                           
  5437                           ;psect for function ___lldiv
  5438  1714                     ___lldiv:	
  5439                           
  5440                           ;incstack = 0
  5441                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5442  1714  3000               	movlw	0
  5443  1715  00FC               	movwf	___lldiv@quotient+3
  5444  1716  3000               	movlw	0
  5445  1717  00FB               	movwf	___lldiv@quotient+2
  5446  1718  3000               	movlw	0
  5447  1719  00FA               	movwf	___lldiv@quotient+1
  5448  171A  3000               	movlw	0
  5449  171B  00F9               	movwf	___lldiv@quotient
  5450  171C  0873               	movf	___lldiv@divisor+3,w
  5451  171D  0472               	iorwf	___lldiv@divisor+2,w
  5452  171E  0471               	iorwf	___lldiv@divisor+1,w
  5453  171F  0470               	iorwf	___lldiv@divisor,w
  5454  1720  1903               	skipnz
  5455  1721  2F69               	goto	l2213
  5456  1722  01FD               	clrf	___lldiv@counter
  5457  1723  0AFD               	incf	___lldiv@counter,f
  5458  1724                     l2199:	
  5459  1724  1BF3               	btfsc	___lldiv@divisor+3,7
  5460  1725  2F34               	goto	l2201
  5461  1726  3001               	movlw	1
  5462  1727  00F8               	movwf	??___lldiv
  5463  1728                     u3285:	
  5464  1728  1003               	clrc
  5465  1729  0DF0               	rlf	___lldiv@divisor,f
  5466  172A  0DF1               	rlf	___lldiv@divisor+1,f
  5467  172B  0DF2               	rlf	___lldiv@divisor+2,f
  5468  172C  0DF3               	rlf	___lldiv@divisor+3,f
  5469  172D  0BF8               	decfsz	??___lldiv,f
  5470  172E  2F28               	goto	u3285
  5471  172F  3001               	movlw	1
  5472  1730  00F8               	movwf	??___lldiv
  5473  1731  0878               	movf	??___lldiv,w
  5474  1732  07FD               	addwf	___lldiv@counter,f
  5475  1733  2F24               	goto	l2199
  5476  1734                     l2201:	
  5477  1734  3001               	movlw	1
  5478  1735  00F8               	movwf	??___lldiv
  5479  1736                     u3305:	
  5480  1736  1003               	clrc
  5481  1737  0DF9               	rlf	___lldiv@quotient,f
  5482  1738  0DFA               	rlf	___lldiv@quotient+1,f
  5483  1739  0DFB               	rlf	___lldiv@quotient+2,f
  5484  173A  0DFC               	rlf	___lldiv@quotient+3,f
  5485  173B  0BF8               	decfsz	??___lldiv,f
  5486  173C  2F36               	goto	u3305
  5487  173D  0873               	movf	___lldiv@divisor+3,w
  5488  173E  0277               	subwf	___lldiv@dividend+3,w
  5489  173F  1D03               	skipz
  5490  1740  2F4B               	goto	u3315
  5491  1741  0872               	movf	___lldiv@divisor+2,w
  5492  1742  0276               	subwf	___lldiv@dividend+2,w
  5493  1743  1D03               	skipz
  5494  1744  2F4B               	goto	u3315
  5495  1745  0871               	movf	___lldiv@divisor+1,w
  5496  1746  0275               	subwf	___lldiv@dividend+1,w
  5497  1747  1D03               	skipz
  5498  1748  2F4B               	goto	u3315
  5499  1749  0870               	movf	___lldiv@divisor,w
  5500  174A  0274               	subwf	___lldiv@dividend,w
  5501  174B                     u3315:	
  5502  174B  1C03               	skipc
  5503  174C  2F5C               	goto	l2209
  5504  174D  0870               	movf	___lldiv@divisor,w
  5505  174E  02F4               	subwf	___lldiv@dividend,f
  5506  174F  0871               	movf	___lldiv@divisor+1,w
  5507  1750  1C03               	skipc
  5508  1751  0F71               	incfsz	___lldiv@divisor+1,w
  5509  1752  02F5               	subwf	___lldiv@dividend+1,f
  5510  1753  0872               	movf	___lldiv@divisor+2,w
  5511  1754  1C03               	skipc
  5512  1755  0F72               	incfsz	___lldiv@divisor+2,w
  5513  1756  02F6               	subwf	___lldiv@dividend+2,f
  5514  1757  0873               	movf	___lldiv@divisor+3,w
  5515  1758  1C03               	skipc
  5516  1759  0F73               	incfsz	___lldiv@divisor+3,w
  5517  175A  02F7               	subwf	___lldiv@dividend+3,f
  5518  175B  1479               	bsf	___lldiv@quotient,0
  5519  175C                     l2209:	
  5520  175C  3001               	movlw	1
  5521  175D                     u3325:	
  5522  175D  1003               	clrc
  5523  175E  0CF3               	rrf	___lldiv@divisor+3,f
  5524  175F  0CF2               	rrf	___lldiv@divisor+2,f
  5525  1760  0CF1               	rrf	___lldiv@divisor+1,f
  5526  1761  0CF0               	rrf	___lldiv@divisor,f
  5527  1762  3EFF               	addlw	-1
  5528  1763  1D03               	skipz
  5529  1764  2F5D               	goto	u3325
  5530  1765  3001               	movlw	1
  5531  1766  02FD               	subwf	___lldiv@counter,f
  5532  1767  1D03               	btfss	3,2
  5533  1768  2F34               	goto	l2201
  5534  1769                     l2213:	
  5535  1769  087C               	movf	___lldiv@quotient+3,w
  5536  176A  00F3               	movwf	?___lldiv+3
  5537  176B  087B               	movf	___lldiv@quotient+2,w
  5538  176C  00F2               	movwf	?___lldiv+2
  5539  176D  087A               	movf	___lldiv@quotient+1,w
  5540  176E  00F1               	movwf	?___lldiv+1
  5541  176F  0879               	movf	___lldiv@quotient,w
  5542  1770  00F0               	movwf	?___lldiv
  5543  1771  0008               	return
  5544  1772                     __end_of___lldiv:	
  5545                           
  5546                           	psect	text15
  5547  1772                     __ptext15:	
  5548 ;; *************** function ___fttol *****************
  5549 ;; Defined at:
  5550 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  5551 ;; Parameters:    Size  Location     Type
  5552 ;;  f1              3   32[BANK0 ] float 
  5553 ;; Auto vars:     Size  Location     Type
  5554 ;;  lval            4   41[BANK0 ] unsigned long 
  5555 ;;  exp1            1   45[BANK0 ] unsigned char 
  5556 ;;  sign1           1   40[BANK0 ] unsigned char 
  5557 ;; Return value:  Size  Location     Type
  5558 ;;                  4   32[BANK0 ] long 
  5559 ;; Registers used:
  5560 ;;		wreg, status,2, status,0
  5561 ;; Tracked objects:
  5562 ;;		On entry : 0/0
  5563 ;;		On exit  : 0/0
  5564 ;;		Unchanged: 0/0
  5565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5566 ;;      Params:         0       4       0       0       0
  5567 ;;      Locals:         0       6       0       0       0
  5568 ;;      Temps:          0       4       0       0       0
  5569 ;;      Totals:         0      14       0       0       0
  5570 ;;Total ram usage:       14 bytes
  5571 ;; Hardware stack levels used:    1
  5572 ;; This function calls:
  5573 ;;		Nothing
  5574 ;; This function is called by:
  5575 ;;		_sprintf
  5576 ;; This function uses a non-reentrant model
  5577 ;;
  5578                           
  5579                           
  5580                           ;psect for function ___fttol
  5581  1772                     ___fttol:	
  5582                           
  5583                           ;incstack = 0
  5584                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  5585  1772  1283               	bcf	3,5	;RP0=0, select bank0
  5586  1773  1303               	bcf	3,6	;RP1=0, select bank0
  5587  1774  0840               	movf	___fttol@f1,w
  5588  1775  00C4               	movwf	??___fttol
  5589  1776  0841               	movf	___fttol@f1+1,w
  5590  1777  00C5               	movwf	??___fttol+1
  5591  1778  0842               	movf	___fttol@f1+2,w
  5592  1779  00C6               	movwf	??___fttol+2
  5593  177A  1003               	clrc
  5594  177B  0D45               	rlf	??___fttol+1,w
  5595  177C  0D46               	rlf	??___fttol+2,w
  5596  177D  00C7               	movwf	??___fttol+3
  5597  177E  0847               	movf	??___fttol+3,w
  5598  177F  00CD               	movwf	___fttol@exp1
  5599  1780  084D               	movf	___fttol@exp1,w
  5600  1781  1D03               	btfss	3,2
  5601  1782  2F8C               	goto	l2157
  5602  1783  3000               	movlw	0
  5603  1784  00C3               	movwf	?___fttol+3
  5604  1785  3000               	movlw	0
  5605  1786  00C2               	movwf	?___fttol+2
  5606  1787  3000               	movlw	0
  5607  1788  00C1               	movwf	?___fttol+1
  5608  1789  3000               	movlw	0
  5609  178A  00C0               	movwf	?___fttol
  5610  178B  0008               	return
  5611  178C                     l2157:	
  5612  178C  0840               	movf	___fttol@f1,w
  5613  178D  00C4               	movwf	??___fttol
  5614  178E  0841               	movf	___fttol@f1+1,w
  5615  178F  00C5               	movwf	??___fttol+1
  5616  1790  0842               	movf	___fttol@f1+2,w
  5617  1791  00C6               	movwf	??___fttol+2
  5618  1792  3017               	movlw	23
  5619  1793                     u3185:	
  5620  1793  1003               	clrc
  5621  1794  0CC6               	rrf	??___fttol+2,f
  5622  1795  0CC5               	rrf	??___fttol+1,f
  5623  1796  0CC4               	rrf	??___fttol,f
  5624  1797  3EFF               	addlw	-1
  5625  1798  1D03               	skipz
  5626  1799  2F93               	goto	u3185
  5627  179A  0844               	movf	??___fttol,w
  5628  179B  00C7               	movwf	??___fttol+3
  5629  179C  0847               	movf	??___fttol+3,w
  5630  179D  00C8               	movwf	___fttol@sign1
  5631  179E  17C1               	bsf	___fttol@f1+1,7
  5632  179F  30FF               	movlw	255
  5633  17A0  05C0               	andwf	___fttol@f1,f
  5634  17A1  30FF               	movlw	255
  5635  17A2  05C1               	andwf	___fttol@f1+1,f
  5636  17A3  3000               	movlw	0
  5637  17A4  05C2               	andwf	___fttol@f1+2,f
  5638  17A5  0840               	movf	___fttol@f1,w
  5639  17A6  00C9               	movwf	___fttol@lval
  5640  17A7  0841               	movf	___fttol@f1+1,w
  5641  17A8  00CA               	movwf	___fttol@lval+1
  5642  17A9  0842               	movf	___fttol@f1+2,w
  5643  17AA  00CB               	movwf	___fttol@lval+2
  5644  17AB  01CC               	clrf	___fttol@lval+3
  5645  17AC  308E               	movlw	142
  5646  17AD  02CD               	subwf	___fttol@exp1,f
  5647  17AE  1FCD               	btfss	___fttol@exp1,7
  5648  17AF  2FCE               	goto	l2177
  5649  17B0  084D               	movf	___fttol@exp1,w
  5650  17B1  3A80               	xorlw	128
  5651  17B2  3E8F               	addlw	143
  5652  17B3  1803               	skipnc
  5653  17B4  2FBE               	goto	l2175
  5654  17B5  3000               	movlw	0
  5655  17B6  00C3               	movwf	?___fttol+3
  5656  17B7  3000               	movlw	0
  5657  17B8  00C2               	movwf	?___fttol+2
  5658  17B9  3000               	movlw	0
  5659  17BA  00C1               	movwf	?___fttol+1
  5660  17BB  3000               	movlw	0
  5661  17BC  00C0               	movwf	?___fttol
  5662  17BD  0008               	return
  5663  17BE                     l2175:	
  5664  17BE  3001               	movlw	1
  5665  17BF                     u3215:	
  5666  17BF  1003               	clrc
  5667  17C0  0CCC               	rrf	___fttol@lval+3,f
  5668  17C1  0CCB               	rrf	___fttol@lval+2,f
  5669  17C2  0CCA               	rrf	___fttol@lval+1,f
  5670  17C3  0CC9               	rrf	___fttol@lval,f
  5671  17C4  3EFF               	addlw	-1
  5672  17C5  1D03               	skipz
  5673  17C6  2FBF               	goto	u3215
  5674  17C7  3001               	movlw	1
  5675  17C8  00C4               	movwf	??___fttol
  5676  17C9  0844               	movf	??___fttol,w
  5677  17CA  07CD               	addwf	___fttol@exp1,f
  5678  17CB  1903               	btfsc	3,2
  5679  17CC  2FE9               	goto	l2185
  5680  17CD  2FBE               	goto	l2175
  5681  17CE                     l2177:	
  5682  17CE  3018               	movlw	24
  5683  17CF  024D               	subwf	___fttol@exp1,w
  5684  17D0  1C03               	skipc
  5685  17D1  2FE6               	goto	l560
  5686  17D2  3000               	movlw	0
  5687  17D3  00C3               	movwf	?___fttol+3
  5688  17D4  3000               	movlw	0
  5689  17D5  00C2               	movwf	?___fttol+2
  5690  17D6  3000               	movlw	0
  5691  17D7  00C1               	movwf	?___fttol+1
  5692  17D8  3000               	movlw	0
  5693  17D9  00C0               	movwf	?___fttol
  5694  17DA  0008               	return
  5695  17DB                     l2183:	
  5696  17DB  3001               	movlw	1
  5697  17DC  00C4               	movwf	??___fttol
  5698  17DD                     u3245:	
  5699  17DD  1003               	clrc
  5700  17DE  0DC9               	rlf	___fttol@lval,f
  5701  17DF  0DCA               	rlf	___fttol@lval+1,f
  5702  17E0  0DCB               	rlf	___fttol@lval+2,f
  5703  17E1  0DCC               	rlf	___fttol@lval+3,f
  5704  17E2  0BC4               	decfsz	??___fttol,f
  5705  17E3  2FDD               	goto	u3245
  5706  17E4  3001               	movlw	1
  5707  17E5  02CD               	subwf	___fttol@exp1,f
  5708  17E6                     l560:	
  5709  17E6  084D               	movf	___fttol@exp1,w
  5710  17E7  1D03               	btfss	3,2
  5711  17E8  2FDB               	goto	l2183
  5712  17E9                     l2185:	
  5713  17E9  0848               	movf	___fttol@sign1,w
  5714  17EA  1903               	btfsc	3,2
  5715  17EB  2FF7               	goto	l2189
  5716  17EC  09C9               	comf	___fttol@lval,f
  5717  17ED  09CA               	comf	___fttol@lval+1,f
  5718  17EE  09CB               	comf	___fttol@lval+2,f
  5719  17EF  09CC               	comf	___fttol@lval+3,f
  5720  17F0  0AC9               	incf	___fttol@lval,f
  5721  17F1  1903               	skipnz
  5722  17F2  0ACA               	incf	___fttol@lval+1,f
  5723  17F3  1903               	skipnz
  5724  17F4  0ACB               	incf	___fttol@lval+2,f
  5725  17F5  1903               	skipnz
  5726  17F6  0ACC               	incf	___fttol@lval+3,f
  5727  17F7                     l2189:	
  5728  17F7  084C               	movf	___fttol@lval+3,w
  5729  17F8  00C3               	movwf	?___fttol+3
  5730  17F9  084B               	movf	___fttol@lval+2,w
  5731  17FA  00C2               	movwf	?___fttol+2
  5732  17FB  084A               	movf	___fttol@lval+1,w
  5733  17FC  00C1               	movwf	?___fttol+1
  5734  17FD  0849               	movf	___fttol@lval,w
  5735  17FE  00C0               	movwf	?___fttol
  5736  17FF  0008               	return
  5737  1800                     __end_of___fttol:	
  5738                           
  5739                           	psect	text16
  5740  140D                     __ptext16:	
  5741 ;; *************** function ___ftsub *****************
  5742 ;; Defined at:
  5743 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  5744 ;; Parameters:    Size  Location     Type
  5745 ;;  f2              3   52[BANK0 ] float 
  5746 ;;  f1              3   55[BANK0 ] float 
  5747 ;; Auto vars:     Size  Location     Type
  5748 ;;		None
  5749 ;; Return value:  Size  Location     Type
  5750 ;;                  3   52[BANK0 ] float 
  5751 ;; Registers used:
  5752 ;;		wreg, status,2, status,0, pclath, cstack
  5753 ;; Tracked objects:
  5754 ;;		On entry : 0/0
  5755 ;;		On exit  : 0/0
  5756 ;;		Unchanged: 0/0
  5757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5758 ;;      Params:         0       6       0       0       0
  5759 ;;      Locals:         0       0       0       0       0
  5760 ;;      Temps:          0       0       0       0       0
  5761 ;;      Totals:         0       6       0       0       0
  5762 ;;Total ram usage:        6 bytes
  5763 ;; Hardware stack levels used:    1
  5764 ;; Hardware stack levels required when called:    2
  5765 ;; This function calls:
  5766 ;;		___ftadd
  5767 ;; This function is called by:
  5768 ;;		_sprintf
  5769 ;; This function uses a non-reentrant model
  5770 ;;
  5771                           
  5772                           
  5773                           ;psect for function ___ftsub
  5774  140D                     ___ftsub:	
  5775                           
  5776                           ;incstack = 0
  5777                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  5778  140D  1283               	bcf	3,5	;RP0=0, select bank0
  5779  140E  1303               	bcf	3,6	;RP1=0, select bank0
  5780  140F  0856               	movf	___ftsub@f2+2,w
  5781  1410  0455               	iorwf	___ftsub@f2+1,w
  5782  1411  0454               	iorwf	___ftsub@f2,w
  5783  1412  1903               	skipnz
  5784  1413  2C16               	goto	l2147
  5785  1414  3080               	movlw	128
  5786  1415  06D6               	xorwf	___ftsub@f2+2,f
  5787  1416                     l2147:	
  5788  1416  0857               	movf	___ftsub@f1,w
  5789  1417  00C7               	movwf	___ftadd@f1
  5790  1418  0858               	movf	___ftsub@f1+1,w
  5791  1419  00C8               	movwf	___ftadd@f1+1
  5792  141A  0859               	movf	___ftsub@f1+2,w
  5793  141B  00C9               	movwf	___ftadd@f1+2
  5794  141C  0854               	movf	___ftsub@f2,w
  5795  141D  00CA               	movwf	___ftadd@f2
  5796  141E  0855               	movf	___ftsub@f2+1,w
  5797  141F  00CB               	movwf	___ftadd@f2+1
  5798  1420  0856               	movf	___ftsub@f2+2,w
  5799  1421  00CC               	movwf	___ftadd@f2+2
  5800  1422  120A  158A  2211   	fcall	___ftadd
  5801  1425  1283               	bcf	3,5	;RP0=0, select bank0
  5802  1426  1303               	bcf	3,6	;RP1=0, select bank0
  5803  1427  0847               	movf	?___ftadd,w
  5804  1428  00D4               	movwf	?___ftsub
  5805  1429  0848               	movf	?___ftadd+1,w
  5806  142A  00D5               	movwf	?___ftsub+1
  5807  142B  0849               	movf	?___ftadd+2,w
  5808  142C  00D6               	movwf	?___ftsub+2
  5809  142D  0008               	return
  5810  142E                     __end_of___ftsub:	
  5811                           
  5812                           	psect	text17
  5813  0A11                     __ptext17:	
  5814 ;; *************** function ___ftadd *****************
  5815 ;; Defined at:
  5816 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  5817 ;; Parameters:    Size  Location     Type
  5818 ;;  f1              3   39[BANK0 ] float 
  5819 ;;  f2              3   42[BANK0 ] float 
  5820 ;; Auto vars:     Size  Location     Type
  5821 ;;  exp1            1   51[BANK0 ] unsigned char 
  5822 ;;  exp2            1   50[BANK0 ] unsigned char 
  5823 ;;  sign            1   49[BANK0 ] unsigned char 
  5824 ;; Return value:  Size  Location     Type
  5825 ;;                  3   39[BANK0 ] float 
  5826 ;; Registers used:
  5827 ;;		wreg, status,2, status,0, pclath, cstack
  5828 ;; Tracked objects:
  5829 ;;		On entry : 0/0
  5830 ;;		On exit  : 0/0
  5831 ;;		Unchanged: 0/0
  5832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5833 ;;      Params:         0       6       0       0       0
  5834 ;;      Locals:         0       3       0       0       0
  5835 ;;      Temps:          0       4       0       0       0
  5836 ;;      Totals:         0      13       0       0       0
  5837 ;;Total ram usage:       13 bytes
  5838 ;; Hardware stack levels used:    1
  5839 ;; Hardware stack levels required when called:    1
  5840 ;; This function calls:
  5841 ;;		___ftpack
  5842 ;; This function is called by:
  5843 ;;		_sprintf
  5844 ;;		___ftsub
  5845 ;; This function uses a non-reentrant model
  5846 ;;
  5847                           
  5848                           
  5849                           ;psect for function ___ftadd
  5850  0A11                     ___ftadd:	
  5851                           
  5852                           ;incstack = 0
  5853                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  5854  0A11  1283               	bcf	3,5	;RP0=0, select bank0
  5855  0A12  1303               	bcf	3,6	;RP1=0, select bank0
  5856  0A13  0847               	movf	___ftadd@f1,w
  5857  0A14  00CD               	movwf	??___ftadd
  5858  0A15  0848               	movf	___ftadd@f1+1,w
  5859  0A16  00CE               	movwf	??___ftadd+1
  5860  0A17  0849               	movf	___ftadd@f1+2,w
  5861  0A18  00CF               	movwf	??___ftadd+2
  5862  0A19  1003               	clrc
  5863  0A1A  0D4E               	rlf	??___ftadd+1,w
  5864  0A1B  0D4F               	rlf	??___ftadd+2,w
  5865  0A1C  00D0               	movwf	??___ftadd+3
  5866  0A1D  0850               	movf	??___ftadd+3,w
  5867  0A1E  00D3               	movwf	___ftadd@exp1
  5868  0A1F  084A               	movf	___ftadd@f2,w
  5869  0A20  00CD               	movwf	??___ftadd
  5870  0A21  084B               	movf	___ftadd@f2+1,w
  5871  0A22  00CE               	movwf	??___ftadd+1
  5872  0A23  084C               	movf	___ftadd@f2+2,w
  5873  0A24  00CF               	movwf	??___ftadd+2
  5874  0A25  1003               	clrc
  5875  0A26  0D4E               	rlf	??___ftadd+1,w
  5876  0A27  0D4F               	rlf	??___ftadd+2,w
  5877  0A28  00D0               	movwf	??___ftadd+3
  5878  0A29  0850               	movf	??___ftadd+3,w
  5879  0A2A  00D2               	movwf	___ftadd@exp2
  5880  0A2B  0853               	movf	___ftadd@exp1,w
  5881  0A2C  1903               	btfsc	3,2
  5882  0A2D  2A3A               	goto	l1779
  5883  0A2E  0852               	movf	___ftadd@exp2,w
  5884  0A2F  0253               	subwf	___ftadd@exp1,w
  5885  0A30  1803               	skipnc
  5886  0A31  2A41               	goto	l1783
  5887  0A32  0353               	decf	___ftadd@exp1,w
  5888  0A33  3AFF               	xorlw	255
  5889  0A34  0752               	addwf	___ftadd@exp2,w
  5890  0A35  00CD               	movwf	??___ftadd
  5891  0A36  3019               	movlw	25
  5892  0A37  024D               	subwf	??___ftadd,w
  5893  0A38  1C03               	skipc
  5894  0A39  2A41               	goto	l1783
  5895  0A3A                     l1779:	
  5896  0A3A  084A               	movf	___ftadd@f2,w
  5897  0A3B  00C7               	movwf	?___ftadd
  5898  0A3C  084B               	movf	___ftadd@f2+1,w
  5899  0A3D  00C8               	movwf	?___ftadd+1
  5900  0A3E  084C               	movf	___ftadd@f2+2,w
  5901  0A3F  00C9               	movwf	?___ftadd+2
  5902  0A40  0008               	return
  5903  0A41                     l1783:	
  5904  0A41  0852               	movf	___ftadd@exp2,w
  5905  0A42  1903               	btfsc	3,2
  5906  0A43  0008               	return
  5907  0A44  0853               	movf	___ftadd@exp1,w
  5908  0A45  0252               	subwf	___ftadd@exp2,w
  5909  0A46  1803               	skipnc
  5910  0A47  2A50               	goto	l1789
  5911  0A48  0352               	decf	___ftadd@exp2,w
  5912  0A49  3AFF               	xorlw	255
  5913  0A4A  0753               	addwf	___ftadd@exp1,w
  5914  0A4B  00CD               	movwf	??___ftadd
  5915  0A4C  3019               	movlw	25
  5916  0A4D  024D               	subwf	??___ftadd,w
  5917  0A4E  1803               	btfsc	3,0
  5918  0A4F  0008               	return
  5919  0A50                     l1789:	
  5920  0A50  3006               	movlw	6
  5921  0A51  00CD               	movwf	??___ftadd
  5922  0A52  084D               	movf	??___ftadd,w
  5923  0A53  00D1               	movwf	___ftadd@sign
  5924  0A54  1BC9               	btfsc	___ftadd@f1+2,7
  5925  0A55  17D1               	bsf	___ftadd@sign,7
  5926  0A56  1BCC               	btfsc	___ftadd@f2+2,7
  5927  0A57  1751               	bsf	___ftadd@sign,6
  5928  0A58  17C8               	bsf	___ftadd@f1+1,7
  5929  0A59  30FF               	movlw	255
  5930  0A5A  05C7               	andwf	___ftadd@f1,f
  5931  0A5B  30FF               	movlw	255
  5932  0A5C  05C8               	andwf	___ftadd@f1+1,f
  5933  0A5D  3000               	movlw	0
  5934  0A5E  05C9               	andwf	___ftadd@f1+2,f
  5935  0A5F  17CB               	bsf	___ftadd@f2+1,7
  5936  0A60  30FF               	movlw	255
  5937  0A61  05CA               	andwf	___ftadd@f2,f
  5938  0A62  30FF               	movlw	255
  5939  0A63  05CB               	andwf	___ftadd@f2+1,f
  5940  0A64  3000               	movlw	0
  5941  0A65  05CC               	andwf	___ftadd@f2+2,f
  5942  0A66  0852               	movf	___ftadd@exp2,w
  5943  0A67  0253               	subwf	___ftadd@exp1,w
  5944  0A68  1803               	skipnc
  5945  0A69  2A90               	goto	l1811
  5946  0A6A                     l1801:	
  5947  0A6A  3001               	movlw	1
  5948  0A6B                     u2425:	
  5949  0A6B  1003               	clrc
  5950  0A6C  0DCA               	rlf	___ftadd@f2,f
  5951  0A6D  0DCB               	rlf	___ftadd@f2+1,f
  5952  0A6E  0DCC               	rlf	___ftadd@f2+2,f
  5953  0A6F  3EFF               	addlw	-1
  5954  0A70  1D03               	skipz
  5955  0A71  2A6B               	goto	u2425
  5956  0A72  3001               	movlw	1
  5957  0A73  02D2               	subwf	___ftadd@exp2,f
  5958  0A74  0852               	movf	___ftadd@exp2,w
  5959  0A75  0653               	xorwf	___ftadd@exp1,w
  5960  0A76  1903               	skipnz
  5961  0A77  2A8B               	goto	l1809
  5962  0A78  3001               	movlw	1
  5963  0A79  02D1               	subwf	___ftadd@sign,f
  5964  0A7A  0851               	movf	___ftadd@sign,w
  5965  0A7B  3907               	andlw	7
  5966  0A7C  1903               	btfsc	3,2
  5967  0A7D  2A8B               	goto	l1809
  5968  0A7E  2A6A               	goto	l1801
  5969  0A7F                     l1807:	
  5970  0A7F  3001               	movlw	1
  5971  0A80                     u2455:	
  5972  0A80  1003               	clrc
  5973  0A81  0CC9               	rrf	___ftadd@f1+2,f
  5974  0A82  0CC8               	rrf	___ftadd@f1+1,f
  5975  0A83  0CC7               	rrf	___ftadd@f1,f
  5976  0A84  3EFF               	addlw	-1
  5977  0A85  1D03               	skipz
  5978  0A86  2A80               	goto	u2455
  5979  0A87  3001               	movlw	1
  5980  0A88  00CD               	movwf	??___ftadd
  5981  0A89  084D               	movf	??___ftadd,w
  5982  0A8A  07D3               	addwf	___ftadd@exp1,f
  5983  0A8B                     l1809:	
  5984  0A8B  0853               	movf	___ftadd@exp1,w
  5985  0A8C  0652               	xorwf	___ftadd@exp2,w
  5986  0A8D  1903               	btfsc	3,2
  5987  0A8E  2AB9               	goto	l483
  5988  0A8F  2A7F               	goto	l1807
  5989  0A90                     l1811:	
  5990  0A90  0853               	movf	___ftadd@exp1,w
  5991  0A91  0252               	subwf	___ftadd@exp2,w
  5992  0A92  1803               	skipnc
  5993  0A93  2AB9               	goto	l483
  5994  0A94                     l1813:	
  5995  0A94  3001               	movlw	1
  5996  0A95                     u2485:	
  5997  0A95  1003               	clrc
  5998  0A96  0DC7               	rlf	___ftadd@f1,f
  5999  0A97  0DC8               	rlf	___ftadd@f1+1,f
  6000  0A98  0DC9               	rlf	___ftadd@f1+2,f
  6001  0A99  3EFF               	addlw	-1
  6002  0A9A  1D03               	skipz
  6003  0A9B  2A95               	goto	u2485
  6004  0A9C  3001               	movlw	1
  6005  0A9D  02D3               	subwf	___ftadd@exp1,f
  6006  0A9E  0852               	movf	___ftadd@exp2,w
  6007  0A9F  0653               	xorwf	___ftadd@exp1,w
  6008  0AA0  1903               	skipnz
  6009  0AA1  2AB5               	goto	l1821
  6010  0AA2  3001               	movlw	1
  6011  0AA3  02D1               	subwf	___ftadd@sign,f
  6012  0AA4  0851               	movf	___ftadd@sign,w
  6013  0AA5  3907               	andlw	7
  6014  0AA6  1903               	btfsc	3,2
  6015  0AA7  2AB5               	goto	l1821
  6016  0AA8  2A94               	goto	l1813
  6017  0AA9                     l1819:	
  6018  0AA9  3001               	movlw	1
  6019  0AAA                     u2515:	
  6020  0AAA  1003               	clrc
  6021  0AAB  0CCC               	rrf	___ftadd@f2+2,f
  6022  0AAC  0CCB               	rrf	___ftadd@f2+1,f
  6023  0AAD  0CCA               	rrf	___ftadd@f2,f
  6024  0AAE  3EFF               	addlw	-1
  6025  0AAF  1D03               	skipz
  6026  0AB0  2AAA               	goto	u2515
  6027  0AB1  3001               	movlw	1
  6028  0AB2  00CD               	movwf	??___ftadd
  6029  0AB3  084D               	movf	??___ftadd,w
  6030  0AB4  07D2               	addwf	___ftadd@exp2,f
  6031  0AB5                     l1821:	
  6032  0AB5  0853               	movf	___ftadd@exp1,w
  6033  0AB6  0652               	xorwf	___ftadd@exp2,w
  6034  0AB7  1D03               	skipz
  6035  0AB8  2AA9               	goto	l1819
  6036  0AB9                     l483:	
  6037  0AB9  1FD1               	btfss	___ftadd@sign,7
  6038  0ABA  2ACB               	goto	l1825
  6039  0ABB  30FF               	movlw	255
  6040  0ABC  06C7               	xorwf	___ftadd@f1,f
  6041  0ABD  30FF               	movlw	255
  6042  0ABE  06C8               	xorwf	___ftadd@f1+1,f
  6043  0ABF  30FF               	movlw	255
  6044  0AC0  06C9               	xorwf	___ftadd@f1+2,f
  6045  0AC1  3001               	movlw	1
  6046  0AC2  07C7               	addwf	___ftadd@f1,f
  6047  0AC3  3000               	movlw	0
  6048  0AC4  1803               	skipnc
  6049  0AC5  3001               	movlw	1
  6050  0AC6  07C8               	addwf	___ftadd@f1+1,f
  6051  0AC7  3000               	movlw	0
  6052  0AC8  1803               	skipnc
  6053  0AC9  3001               	movlw	1
  6054  0ACA  07C9               	addwf	___ftadd@f1+2,f
  6055  0ACB                     l1825:	
  6056  0ACB  1F51               	btfss	___ftadd@sign,6
  6057  0ACC  2ADD               	goto	l1829
  6058  0ACD  30FF               	movlw	255
  6059  0ACE  06CA               	xorwf	___ftadd@f2,f
  6060  0ACF  30FF               	movlw	255
  6061  0AD0  06CB               	xorwf	___ftadd@f2+1,f
  6062  0AD1  30FF               	movlw	255
  6063  0AD2  06CC               	xorwf	___ftadd@f2+2,f
  6064  0AD3  3001               	movlw	1
  6065  0AD4  07CA               	addwf	___ftadd@f2,f
  6066  0AD5  3000               	movlw	0
  6067  0AD6  1803               	skipnc
  6068  0AD7  3001               	movlw	1
  6069  0AD8  07CB               	addwf	___ftadd@f2+1,f
  6070  0AD9  3000               	movlw	0
  6071  0ADA  1803               	skipnc
  6072  0ADB  3001               	movlw	1
  6073  0ADC  07CC               	addwf	___ftadd@f2+2,f
  6074  0ADD                     l1829:	
  6075  0ADD  01D1               	clrf	___ftadd@sign
  6076  0ADE  0847               	movf	___ftadd@f1,w
  6077  0ADF  07CA               	addwf	___ftadd@f2,f
  6078  0AE0  0848               	movf	___ftadd@f1+1,w
  6079  0AE1  1103               	clrz
  6080  0AE2  1803               	skipnc
  6081  0AE3  0A48               	incf	___ftadd@f1+1,w
  6082  0AE4  1D03               	btfss	3,2
  6083  0AE5  07CB               	addwf	___ftadd@f2+1,f
  6084  0AE6  0849               	movf	___ftadd@f1+2,w
  6085  0AE7  1103               	clrz
  6086  0AE8  1803               	skipnc
  6087  0AE9  0A49               	incf	___ftadd@f1+2,w
  6088  0AEA  1D03               	btfss	3,2
  6089  0AEB  07CC               	addwf	___ftadd@f2+2,f
  6090  0AEC  1FCC               	btfss	___ftadd@f2+2,7
  6091  0AED  2B00               	goto	l1839
  6092  0AEE  30FF               	movlw	255
  6093  0AEF  06CA               	xorwf	___ftadd@f2,f
  6094  0AF0  30FF               	movlw	255
  6095  0AF1  06CB               	xorwf	___ftadd@f2+1,f
  6096  0AF2  30FF               	movlw	255
  6097  0AF3  06CC               	xorwf	___ftadd@f2+2,f
  6098  0AF4  3001               	movlw	1
  6099  0AF5  07CA               	addwf	___ftadd@f2,f
  6100  0AF6  3000               	movlw	0
  6101  0AF7  1803               	skipnc
  6102  0AF8  3001               	movlw	1
  6103  0AF9  07CB               	addwf	___ftadd@f2+1,f
  6104  0AFA  3000               	movlw	0
  6105  0AFB  1803               	skipnc
  6106  0AFC  3001               	movlw	1
  6107  0AFD  07CC               	addwf	___ftadd@f2+2,f
  6108  0AFE  01D1               	clrf	___ftadd@sign
  6109  0AFF  0AD1               	incf	___ftadd@sign,f
  6110  0B00                     l1839:	
  6111  0B00  084A               	movf	___ftadd@f2,w
  6112  0B01  00F0               	movwf	___ftpack@arg
  6113  0B02  084B               	movf	___ftadd@f2+1,w
  6114  0B03  00F1               	movwf	___ftpack@arg+1
  6115  0B04  084C               	movf	___ftadd@f2+2,w
  6116  0B05  00F2               	movwf	___ftpack@arg+2
  6117  0B06  0853               	movf	___ftadd@exp1,w
  6118  0B07  00CD               	movwf	??___ftadd
  6119  0B08  084D               	movf	??___ftadd,w
  6120  0B09  00F3               	movwf	___ftpack@exp
  6121  0B0A  0851               	movf	___ftadd@sign,w
  6122  0B0B  00CE               	movwf	??___ftadd+1
  6123  0B0C  084E               	movf	??___ftadd+1,w
  6124  0B0D  00F4               	movwf	___ftpack@sign
  6125  0B0E  120A  158A  200F   	fcall	___ftpack
  6126  0B11  0870               	movf	?___ftpack,w
  6127  0B12  1283               	bcf	3,5	;RP0=0, select bank0
  6128  0B13  1303               	bcf	3,6	;RP1=0, select bank0
  6129  0B14  00C7               	movwf	?___ftadd
  6130  0B15  0871               	movf	?___ftpack+1,w
  6131  0B16  00C8               	movwf	?___ftadd+1
  6132  0B17  0872               	movf	?___ftpack+2,w
  6133  0B18  00C9               	movwf	?___ftadd+2
  6134  0B19  0008               	return
  6135  0B1A                     __end_of___ftadd:	
  6136                           
  6137                           	psect	text18
  6138  13A5                     __ptext18:	
  6139 ;; *************** function ___ftneg *****************
  6140 ;; Defined at:
  6141 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  6142 ;; Parameters:    Size  Location     Type
  6143 ;;  f1              3    0[COMMON] float 
  6144 ;; Auto vars:     Size  Location     Type
  6145 ;;		None
  6146 ;; Return value:  Size  Location     Type
  6147 ;;                  3    0[COMMON] float 
  6148 ;; Registers used:
  6149 ;;		wreg
  6150 ;; Tracked objects:
  6151 ;;		On entry : 0/0
  6152 ;;		On exit  : 0/0
  6153 ;;		Unchanged: 0/0
  6154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6155 ;;      Params:         3       0       0       0       0
  6156 ;;      Locals:         0       0       0       0       0
  6157 ;;      Temps:          0       0       0       0       0
  6158 ;;      Totals:         3       0       0       0       0
  6159 ;;Total ram usage:        3 bytes
  6160 ;; Hardware stack levels used:    1
  6161 ;; This function calls:
  6162 ;;		Nothing
  6163 ;; This function is called by:
  6164 ;;		_sprintf
  6165 ;; This function uses a non-reentrant model
  6166 ;;
  6167                           
  6168                           
  6169                           ;psect for function ___ftneg
  6170  13A5                     ___ftneg:	
  6171                           
  6172                           ;incstack = 0
  6173                           ; Regs used in ___ftneg: [wreg]
  6174  13A5  0872               	movf	___ftneg@f1+2,w
  6175  13A6  0471               	iorwf	___ftneg@f1+1,w
  6176  13A7  0470               	iorwf	___ftneg@f1,w
  6177  13A8  1903               	skipnz
  6178  13A9  0008               	return
  6179  13AA  3080               	movlw	128
  6180  13AB  06F2               	xorwf	___ftneg@f1+2,f
  6181  13AC  0008               	return
  6182  13AD                     __end_of___ftneg:	
  6183                           
  6184                           	psect	text19
  6185  16B7                     __ptext19:	
  6186 ;; *************** function ___ftge *****************
  6187 ;; Defined at:
  6188 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  6189 ;; Parameters:    Size  Location     Type
  6190 ;;  ff1             3    0[COMMON] float 
  6191 ;;  ff2             3    3[COMMON] float 
  6192 ;; Auto vars:     Size  Location     Type
  6193 ;;		None
  6194 ;; Return value:  Size  Location     Type
  6195 ;;		None               void
  6196 ;; Registers used:
  6197 ;;		wreg, status,2, status,0
  6198 ;; Tracked objects:
  6199 ;;		On entry : 0/0
  6200 ;;		On exit  : 0/0
  6201 ;;		Unchanged: 0/0
  6202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6203 ;;      Params:         6       0       0       0       0
  6204 ;;      Locals:         0       0       0       0       0
  6205 ;;      Temps:          6       0       0       0       0
  6206 ;;      Totals:        12       0       0       0       0
  6207 ;;Total ram usage:       12 bytes
  6208 ;; Hardware stack levels used:    1
  6209 ;; This function calls:
  6210 ;;		Nothing
  6211 ;; This function is called by:
  6212 ;;		_sprintf
  6213 ;; This function uses a non-reentrant model
  6214 ;;
  6215                           
  6216                           
  6217                           ;psect for function ___ftge
  6218  16B7                     ___ftge:	
  6219                           
  6220                           ;incstack = 0
  6221                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  6222  16B7  1FF2               	btfss	___ftge@ff1+2,7
  6223  16B8  2EDE               	goto	l2119
  6224  16B9  3000               	movlw	0
  6225  16BA  00F6               	movwf	??___ftge
  6226  16BB  3000               	movlw	0
  6227  16BC  00F7               	movwf	??___ftge+1
  6228  16BD  3080               	movlw	128
  6229  16BE  00F8               	movwf	??___ftge+2
  6230  16BF  0970               	comf	___ftge@ff1,w
  6231  16C0  00F9               	movwf	??___ftge+3
  6232  16C1  0971               	comf	___ftge@ff1+1,w
  6233  16C2  00FA               	movwf	??___ftge+4
  6234  16C3  0972               	comf	___ftge@ff1+2,w
  6235  16C4  00FB               	movwf	??___ftge+5
  6236  16C5  0AF9               	incf	??___ftge+3,f
  6237  16C6  1903               	skipnz
  6238  16C7  0AFA               	incf	??___ftge+4,f
  6239  16C8  1903               	skipnz
  6240  16C9  0AFB               	incf	??___ftge+5,f
  6241  16CA  0879               	movf	??___ftge+3,w
  6242  16CB  07F6               	addwf	??___ftge,f
  6243  16CC  087A               	movf	??___ftge+4,w
  6244  16CD  1803               	skipnc
  6245  16CE  0F7A               	incfsz	??___ftge+4,w
  6246  16CF  2ED1               	goto	u3111
  6247  16D0  2ED2               	goto	u3112
  6248  16D1                     u3111:	
  6249  16D1  07F7               	addwf	??___ftge+1,f
  6250  16D2                     u3112:	
  6251  16D2  087B               	movf	??___ftge+5,w
  6252  16D3  1803               	skipnc
  6253  16D4  0F7B               	incfsz	??___ftge+5,w
  6254  16D5  2ED7               	goto	u3113
  6255  16D6  2ED8               	goto	u3114
  6256  16D7                     u3113:	
  6257  16D7  07F8               	addwf	??___ftge+2,f
  6258  16D8                     u3114:	
  6259  16D8  0876               	movf	??___ftge,w
  6260  16D9  00F0               	movwf	___ftge@ff1
  6261  16DA  0877               	movf	??___ftge+1,w
  6262  16DB  00F1               	movwf	___ftge@ff1+1
  6263  16DC  0878               	movf	??___ftge+2,w
  6264  16DD  00F2               	movwf	___ftge@ff1+2
  6265  16DE                     l2119:	
  6266  16DE  1FF5               	btfss	___ftge@ff2+2,7
  6267  16DF  2F05               	goto	l2123
  6268  16E0  3000               	movlw	0
  6269  16E1  00F6               	movwf	??___ftge
  6270  16E2  3000               	movlw	0
  6271  16E3  00F7               	movwf	??___ftge+1
  6272  16E4  3080               	movlw	128
  6273  16E5  00F8               	movwf	??___ftge+2
  6274  16E6  0973               	comf	___ftge@ff2,w
  6275  16E7  00F9               	movwf	??___ftge+3
  6276  16E8  0974               	comf	___ftge@ff2+1,w
  6277  16E9  00FA               	movwf	??___ftge+4
  6278  16EA  0975               	comf	___ftge@ff2+2,w
  6279  16EB  00FB               	movwf	??___ftge+5
  6280  16EC  0AF9               	incf	??___ftge+3,f
  6281  16ED  1903               	skipnz
  6282  16EE  0AFA               	incf	??___ftge+4,f
  6283  16EF  1903               	skipnz
  6284  16F0  0AFB               	incf	??___ftge+5,f
  6285  16F1  0879               	movf	??___ftge+3,w
  6286  16F2  07F6               	addwf	??___ftge,f
  6287  16F3  087A               	movf	??___ftge+4,w
  6288  16F4  1803               	skipnc
  6289  16F5  0F7A               	incfsz	??___ftge+4,w
  6290  16F6  2EF8               	goto	u3131
  6291  16F7  2EF9               	goto	u3132
  6292  16F8                     u3131:	
  6293  16F8  07F7               	addwf	??___ftge+1,f
  6294  16F9                     u3132:	
  6295  16F9  087B               	movf	??___ftge+5,w
  6296  16FA  1803               	skipnc
  6297  16FB  0F7B               	incfsz	??___ftge+5,w
  6298  16FC  2EFE               	goto	u3133
  6299  16FD  2EFF               	goto	u3134
  6300  16FE                     u3133:	
  6301  16FE  07F8               	addwf	??___ftge+2,f
  6302  16FF                     u3134:	
  6303  16FF  0876               	movf	??___ftge,w
  6304  1700  00F3               	movwf	___ftge@ff2
  6305  1701  0877               	movf	??___ftge+1,w
  6306  1702  00F4               	movwf	___ftge@ff2+1
  6307  1703  0878               	movf	??___ftge+2,w
  6308  1704  00F5               	movwf	___ftge@ff2+2
  6309  1705                     l2123:	
  6310  1705  3080               	movlw	128
  6311  1706  06F2               	xorwf	___ftge@ff1+2,f
  6312  1707  3080               	movlw	128
  6313  1708  06F5               	xorwf	___ftge@ff2+2,f
  6314  1709  0875               	movf	___ftge@ff2+2,w
  6315  170A  0272               	subwf	___ftge@ff1+2,w
  6316  170B  1D03               	skipz
  6317  170C  0008               	return
  6318  170D  0874               	movf	___ftge@ff2+1,w
  6319  170E  0271               	subwf	___ftge@ff1+1,w
  6320  170F  1D03               	skipz
  6321  1710  0008               	return
  6322  1711  0873               	movf	___ftge@ff2,w
  6323  1712  0270               	subwf	___ftge@ff1,w
  6324  1713  0008               	return
  6325  1714                     __end_of___ftge:	
  6326                           
  6327                           	psect	text20
  6328  13DF                     __ptext20:	
  6329 ;; *************** function ___lwtoft *****************
  6330 ;; Defined at:
  6331 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  6332 ;; Parameters:    Size  Location     Type
  6333 ;;  c               2    8[COMMON] unsigned int 
  6334 ;; Auto vars:     Size  Location     Type
  6335 ;;		None
  6336 ;; Return value:  Size  Location     Type
  6337 ;;                  3    8[COMMON] float 
  6338 ;; Registers used:
  6339 ;;		wreg, status,2, status,0, pclath, cstack
  6340 ;; Tracked objects:
  6341 ;;		On entry : 0/0
  6342 ;;		On exit  : 0/0
  6343 ;;		Unchanged: 0/0
  6344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6345 ;;      Params:         3       0       0       0       0
  6346 ;;      Locals:         0       0       0       0       0
  6347 ;;      Temps:          1       0       0       0       0
  6348 ;;      Totals:         4       0       0       0       0
  6349 ;;Total ram usage:        4 bytes
  6350 ;; Hardware stack levels used:    1
  6351 ;; Hardware stack levels required when called:    1
  6352 ;; This function calls:
  6353 ;;		___ftpack
  6354 ;; This function is called by:
  6355 ;;		_main
  6356 ;; This function uses a non-reentrant model
  6357 ;;
  6358                           
  6359                           
  6360                           ;psect for function ___lwtoft
  6361  13DF                     ___lwtoft:	
  6362                           
  6363                           ;incstack = 0
  6364                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  6365  13DF  0878               	movf	___lwtoft@c,w
  6366  13E0  00F0               	movwf	___ftpack@arg
  6367  13E1  0879               	movf	___lwtoft@c+1,w
  6368  13E2  00F1               	movwf	___ftpack@arg+1
  6369  13E3  01F2               	clrf	___ftpack@arg+2
  6370  13E4  308E               	movlw	142
  6371  13E5  00FB               	movwf	??___lwtoft
  6372  13E6  087B               	movf	??___lwtoft,w
  6373  13E7  00F3               	movwf	___ftpack@exp
  6374  13E8  01F4               	clrf	___ftpack@sign
  6375  13E9  120A  158A  200F   	fcall	___ftpack
  6376  13EC  0870               	movf	?___ftpack,w
  6377  13ED  00F8               	movwf	?___lwtoft
  6378  13EE  0871               	movf	?___ftpack+1,w
  6379  13EF  00F9               	movwf	?___lwtoft+1
  6380  13F0  0872               	movf	?___ftpack+2,w
  6381  13F1  00FA               	movwf	?___lwtoft+2
  6382  13F2  0008               	return
  6383  13F3                     __end_of___lwtoft:	
  6384                           
  6385                           	psect	text21
  6386  080F                     __ptext21:	
  6387 ;; *************** function ___ftpack *****************
  6388 ;; Defined at:
  6389 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  6390 ;; Parameters:    Size  Location     Type
  6391 ;;  arg             3    0[COMMON] unsigned um
  6392 ;;  exp             1    3[COMMON] unsigned char 
  6393 ;;  sign            1    4[COMMON] unsigned char 
  6394 ;; Auto vars:     Size  Location     Type
  6395 ;;		None
  6396 ;; Return value:  Size  Location     Type
  6397 ;;                  3    0[COMMON] float 
  6398 ;; Registers used:
  6399 ;;		wreg, status,2, status,0
  6400 ;; Tracked objects:
  6401 ;;		On entry : 0/0
  6402 ;;		On exit  : 0/0
  6403 ;;		Unchanged: 0/0
  6404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6405 ;;      Params:         5       0       0       0       0
  6406 ;;      Locals:         0       0       0       0       0
  6407 ;;      Temps:          3       0       0       0       0
  6408 ;;      Totals:         8       0       0       0       0
  6409 ;;Total ram usage:        8 bytes
  6410 ;; Hardware stack levels used:    1
  6411 ;; This function calls:
  6412 ;;		Nothing
  6413 ;; This function is called by:
  6414 ;;		___ftadd
  6415 ;;		___ftmul
  6416 ;;		___lltoft
  6417 ;;		___lwtoft
  6418 ;; This function uses a non-reentrant model
  6419 ;;
  6420                           
  6421                           
  6422                           ;psect for function ___ftpack
  6423  080F                     ___ftpack:	
  6424                           
  6425                           ;incstack = 0
  6426                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6427  080F  0873               	movf	___ftpack@exp,w
  6428  0810  1903               	btfsc	3,2
  6429  0811  2817               	goto	l1639
  6430  0812  0872               	movf	___ftpack@arg+2,w
  6431  0813  0471               	iorwf	___ftpack@arg+1,w
  6432  0814  0470               	iorwf	___ftpack@arg,w
  6433  0815  1D03               	skipz
  6434  0816  282A               	goto	l1645
  6435  0817                     l1639:	
  6436  0817  3000               	movlw	0
  6437  0818  00F0               	movwf	?___ftpack
  6438  0819  3000               	movlw	0
  6439  081A  00F1               	movwf	?___ftpack+1
  6440  081B  3000               	movlw	0
  6441  081C  00F2               	movwf	?___ftpack+2
  6442  081D  0008               	return
  6443  081E                     l1643:	
  6444  081E  3001               	movlw	1
  6445  081F  00F5               	movwf	??___ftpack
  6446  0820  0875               	movf	??___ftpack,w
  6447  0821  07F3               	addwf	___ftpack@exp,f
  6448  0822  3001               	movlw	1
  6449  0823                     u1985:	
  6450  0823  1003               	clrc
  6451  0824  0CF2               	rrf	___ftpack@arg+2,f
  6452  0825  0CF1               	rrf	___ftpack@arg+1,f
  6453  0826  0CF0               	rrf	___ftpack@arg,f
  6454  0827  3EFF               	addlw	-1
  6455  0828  1D03               	skipz
  6456  0829  2823               	goto	u1985
  6457  082A                     l1645:	
  6458  082A  30FE               	movlw	254
  6459  082B  0572               	andwf	___ftpack@arg+2,w
  6460  082C  1903               	btfsc	3,2
  6461  082D  2845               	goto	l452
  6462  082E  281E               	goto	l1643
  6463  082F                     l1647:	
  6464  082F  3001               	movlw	1
  6465  0830  00F5               	movwf	??___ftpack
  6466  0831  0875               	movf	??___ftpack,w
  6467  0832  07F3               	addwf	___ftpack@exp,f
  6468  0833  3001               	movlw	1
  6469  0834  07F0               	addwf	___ftpack@arg,f
  6470  0835  3000               	movlw	0
  6471  0836  1803               	skipnc
  6472  0837  3001               	movlw	1
  6473  0838  07F1               	addwf	___ftpack@arg+1,f
  6474  0839  3000               	movlw	0
  6475  083A  1803               	skipnc
  6476  083B  3001               	movlw	1
  6477  083C  07F2               	addwf	___ftpack@arg+2,f
  6478  083D  3001               	movlw	1
  6479  083E                     u2005:	
  6480  083E  1003               	clrc
  6481  083F  0CF2               	rrf	___ftpack@arg+2,f
  6482  0840  0CF1               	rrf	___ftpack@arg+1,f
  6483  0841  0CF0               	rrf	___ftpack@arg,f
  6484  0842  3EFF               	addlw	-1
  6485  0843  1D03               	skipz
  6486  0844  283E               	goto	u2005
  6487  0845                     l452:	
  6488  0845  30FF               	movlw	255
  6489  0846  0572               	andwf	___ftpack@arg+2,w
  6490  0847  1903               	btfsc	3,2
  6491  0848  2854               	goto	l1655
  6492  0849  282F               	goto	l1647
  6493  084A                     l1653:	
  6494  084A  3001               	movlw	1
  6495  084B  02F3               	subwf	___ftpack@exp,f
  6496  084C  3001               	movlw	1
  6497  084D                     u2025:	
  6498  084D  1003               	clrc
  6499  084E  0DF0               	rlf	___ftpack@arg,f
  6500  084F  0DF1               	rlf	___ftpack@arg+1,f
  6501  0850  0DF2               	rlf	___ftpack@arg+2,f
  6502  0851  3EFF               	addlw	-1
  6503  0852  1D03               	skipz
  6504  0853  284D               	goto	u2025
  6505  0854                     l1655:	
  6506  0854  1BF1               	btfsc	___ftpack@arg+1,7
  6507  0855  285A               	goto	l459
  6508  0856  3002               	movlw	2
  6509  0857  0273               	subwf	___ftpack@exp,w
  6510  0858  1803               	skipnc
  6511  0859  284A               	goto	l1653
  6512  085A                     l459:	
  6513  085A  1873               	btfsc	___ftpack@exp,0
  6514  085B  2862               	goto	l460
  6515  085C  30FF               	movlw	255
  6516  085D  05F0               	andwf	___ftpack@arg,f
  6517  085E  307F               	movlw	127
  6518  085F  05F1               	andwf	___ftpack@arg+1,f
  6519  0860  30FF               	movlw	255
  6520  0861  05F2               	andwf	___ftpack@arg+2,f
  6521  0862                     l460:	
  6522  0862  1003               	clrc
  6523  0863  0CF3               	rrf	___ftpack@exp,f
  6524  0864  0873               	movf	___ftpack@exp,w
  6525  0865  00F5               	movwf	??___ftpack
  6526  0866  01F6               	clrf	??___ftpack+1
  6527  0867  01F7               	clrf	??___ftpack+2
  6528  0868  3010               	movlw	16
  6529  0869                     u2065:	
  6530  0869  1003               	clrc
  6531  086A  0DF5               	rlf	??___ftpack,f
  6532  086B  0DF6               	rlf	??___ftpack+1,f
  6533  086C  0DF7               	rlf	??___ftpack+2,f
  6534  086D  3EFF               	addlw	-1
  6535  086E  1D03               	skipz
  6536  086F  2869               	goto	u2065
  6537  0870  0875               	movf	??___ftpack,w
  6538  0871  04F0               	iorwf	___ftpack@arg,f
  6539  0872  0876               	movf	??___ftpack+1,w
  6540  0873  04F1               	iorwf	___ftpack@arg+1,f
  6541  0874  0877               	movf	??___ftpack+2,w
  6542  0875  04F2               	iorwf	___ftpack@arg+2,f
  6543  0876  0874               	movf	___ftpack@sign,w
  6544  0877  1903               	btfsc	3,2
  6545  0878  0008               	return
  6546  0879  17F2               	bsf	___ftpack@arg+2,7
  6547  087A  0008               	return
  6548  087B                     __end_of___ftpack:	
  6549                           
  6550                           	psect	text22
  6551  14E3                     __ptext22:	
  6552 ;; *************** function _Lcd_Write_String *****************
  6553 ;; Defined at:
  6554 ;;		line 97 in file "lcd.h"
  6555 ;; Parameters:    Size  Location     Type
  6556 ;;  a               2    5[COMMON] PTR unsigned char 
  6557 ;;		 -> main@ad_tratado_lcd(16), STR_3(12), STR_2(10), STR_1(10), 
  6558 ;; Auto vars:     Size  Location     Type
  6559 ;;  i               2   10[COMMON] int 
  6560 ;; Return value:  Size  Location     Type
  6561 ;;                  1    wreg      void 
  6562 ;; Registers used:
  6563 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6564 ;; Tracked objects:
  6565 ;;		On entry : 0/0
  6566 ;;		On exit  : 0/0
  6567 ;;		Unchanged: 0/0
  6568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6569 ;;      Params:         2       0       0       0       0
  6570 ;;      Locals:         2       0       0       0       0
  6571 ;;      Temps:          3       0       0       0       0
  6572 ;;      Totals:         7       0       0       0       0
  6573 ;;Total ram usage:        7 bytes
  6574 ;; Hardware stack levels used:    1
  6575 ;; Hardware stack levels required when called:    2
  6576 ;; This function calls:
  6577 ;;		_Lcd_Write_Char
  6578 ;; This function is called by:
  6579 ;;		_main
  6580 ;; This function uses a non-reentrant model
  6581 ;;
  6582                           
  6583                           
  6584                           ;psect for function _Lcd_Write_String
  6585  14E3                     _Lcd_Write_String:	
  6586                           
  6587                           ;lcd.h: 99: int i;
  6588                           ;lcd.h: 100: for(i=0;a[i]!='\0';i++)
  6589                           
  6590                           ;incstack = 0
  6591                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6592  14E3  01FA               	clrf	Lcd_Write_String@i
  6593  14E4  01FB               	clrf	Lcd_Write_String@i+1
  6594  14E5                     l2285:	
  6595  14E5  087A               	movf	Lcd_Write_String@i,w
  6596  14E6  0775               	addwf	Lcd_Write_String@a,w
  6597  14E7  00F8               	movwf	??_Lcd_Write_String+1
  6598  14E8  0876               	movf	Lcd_Write_String@a+1,w
  6599  14E9  00F7               	movwf	??_Lcd_Write_String
  6600  14EA  1803               	skipnc
  6601  14EB  0AF7               	incf	??_Lcd_Write_String,f
  6602  14EC  1BFA               	btfsc	Lcd_Write_String@i,7
  6603  14ED  03F7               	decf	??_Lcd_Write_String,f
  6604  14EE  0877               	movf	??_Lcd_Write_String,w
  6605  14EF  00F9               	movwf	??_Lcd_Write_String+2
  6606  14F0  0879               	movf	??_Lcd_Write_String+2,w
  6607  14F1  1283               	bcf	3,5	;RP0=0, select bank0
  6608  14F2  1303               	bcf	3,6	;RP1=0, select bank0
  6609  14F3  00FF               	movwf	127
  6610  14F4  0878               	movf	??_Lcd_Write_String+1,w
  6611  14F5  0084               	movwf	4
  6612  14F6  160A  118A  2000  160A  118A  	fcall	stringtab
  6613  14FB  3A00               	xorlw	0
  6614  14FC  1903               	btfsc	3,2
  6615  14FD  0008               	return
  6616                           
  6617                           ;lcd.h: 101: Lcd_Write_Char(a[i]);
  6618  14FE  087A               	movf	Lcd_Write_String@i,w
  6619  14FF  0775               	addwf	Lcd_Write_String@a,w
  6620  1500  00F8               	movwf	??_Lcd_Write_String+1
  6621  1501  0876               	movf	Lcd_Write_String@a+1,w
  6622  1502  00F7               	movwf	??_Lcd_Write_String
  6623  1503  1803               	skipnc
  6624  1504  0AF7               	incf	??_Lcd_Write_String,f
  6625  1505  1BFA               	btfsc	Lcd_Write_String@i,7
  6626  1506  03F7               	decf	??_Lcd_Write_String,f
  6627  1507  0877               	movf	??_Lcd_Write_String,w
  6628  1508  00F9               	movwf	??_Lcd_Write_String+2
  6629  1509  0879               	movf	??_Lcd_Write_String+2,w
  6630  150A  1283               	bcf	3,5	;RP0=0, select bank0
  6631  150B  1303               	bcf	3,6	;RP1=0, select bank0
  6632  150C  00FF               	movwf	127
  6633  150D  0878               	movf	??_Lcd_Write_String+1,w
  6634  150E  0084               	movwf	4
  6635  150F  160A  118A  2000  160A  118A  	fcall	stringtab
  6636  1514  160A  118A  24AA  160A  118A  	fcall	_Lcd_Write_Char
  6637  1519  3001               	movlw	1
  6638  151A  07FA               	addwf	Lcd_Write_String@i,f
  6639  151B  1803               	skipnc
  6640  151C  0AFB               	incf	Lcd_Write_String@i+1,f
  6641  151D  3000               	movlw	0
  6642  151E  07FB               	addwf	Lcd_Write_String@i+1,f
  6643  151F  2CE5               	goto	l2285
  6644  1520                     __end_of_Lcd_Write_String:	
  6645                           
  6646                           	psect	text23
  6647  14AA                     __ptext23:	
  6648 ;; *************** function _Lcd_Write_Char *****************
  6649 ;; Defined at:
  6650 ;;		line 81 in file "lcd.h"
  6651 ;; Parameters:    Size  Location     Type
  6652 ;;  a               1    wreg     unsigned char 
  6653 ;; Auto vars:     Size  Location     Type
  6654 ;;  a               1    4[COMMON] unsigned char 
  6655 ;;  y               1    3[COMMON] unsigned char 
  6656 ;;  temp            1    2[COMMON] unsigned char 
  6657 ;; Return value:  Size  Location     Type
  6658 ;;                  1    wreg      void 
  6659 ;; Registers used:
  6660 ;;		wreg, status,2, status,0, pclath, cstack
  6661 ;; Tracked objects:
  6662 ;;		On entry : 0/0
  6663 ;;		On exit  : 0/0
  6664 ;;		Unchanged: 0/0
  6665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6666 ;;      Params:         0       0       0       0       0
  6667 ;;      Locals:         3       0       0       0       0
  6668 ;;      Temps:          1       0       0       0       0
  6669 ;;      Totals:         4       0       0       0       0
  6670 ;;Total ram usage:        4 bytes
  6671 ;; Hardware stack levels used:    1
  6672 ;; Hardware stack levels required when called:    1
  6673 ;; This function calls:
  6674 ;;		_Lcd_Port
  6675 ;; This function is called by:
  6676 ;;		_Lcd_Write_String
  6677 ;; This function uses a non-reentrant model
  6678 ;;
  6679                           
  6680                           
  6681                           ;psect for function _Lcd_Write_Char
  6682  14AA                     _Lcd_Write_Char:	
  6683                           
  6684                           ;incstack = 0
  6685                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  6686                           ;Lcd_Write_Char@a stored from wreg
  6687  14AA  00F4               	movwf	Lcd_Write_Char@a
  6688                           
  6689                           ;lcd.h: 83: char temp,y;
  6690                           ;lcd.h: 84: temp = a&0x0F;
  6691  14AB  0874               	movf	Lcd_Write_Char@a,w
  6692  14AC  390F               	andlw	15
  6693  14AD  00F1               	movwf	??_Lcd_Write_Char
  6694  14AE  0871               	movf	??_Lcd_Write_Char,w
  6695  14AF  00F2               	movwf	Lcd_Write_Char@temp
  6696                           
  6697                           ;lcd.h: 85: y = a&0xF0;
  6698  14B0  0874               	movf	Lcd_Write_Char@a,w
  6699  14B1  39F0               	andlw	240
  6700  14B2  00F1               	movwf	??_Lcd_Write_Char
  6701  14B3  0871               	movf	??_Lcd_Write_Char,w
  6702  14B4  00F3               	movwf	Lcd_Write_Char@y
  6703                           
  6704                           ;lcd.h: 86: RD2 = 1;
  6705  14B5  1283               	bcf	3,5	;RP0=0, select bank0
  6706  14B6  1303               	bcf	3,6	;RP1=0, select bank0
  6707  14B7  1508               	bsf	8,2	;volatile
  6708                           
  6709                           ;lcd.h: 87: Lcd_Port(y>>4);
  6710  14B8  0873               	movf	Lcd_Write_Char@y,w
  6711  14B9  00F1               	movwf	??_Lcd_Write_Char
  6712  14BA  3004               	movlw	4
  6713  14BB                     u2715:	
  6714  14BB  1003               	clrc
  6715  14BC  0CF1               	rrf	??_Lcd_Write_Char,f
  6716  14BD  3EFF               	addlw	-1
  6717  14BE  1D03               	skipz
  6718  14BF  2CBB               	goto	u2715
  6719  14C0  0871               	movf	??_Lcd_Write_Char,w
  6720  14C1  160A  118A  23F3  160A  118A  	fcall	_Lcd_Port
  6721                           
  6722                           ;lcd.h: 88: RD3 = 1;
  6723  14C6  1283               	bcf	3,5	;RP0=0, select bank0
  6724  14C7  1303               	bcf	3,6	;RP1=0, select bank0
  6725  14C8  1588               	bsf	8,3	;volatile
  6726                           
  6727                           ;lcd.h: 89: _delay((unsigned long)((40)*(8000000/4000000.0)));
  6728  14C9  301A               	movlw	26
  6729  14CA  00F1               	movwf	??_Lcd_Write_Char
  6730  14CB                     u3957:	
  6731  14CB  0BF1               	decfsz	??_Lcd_Write_Char,f
  6732  14CC  2CCB               	goto	u3957
  6733  14CD  0000               	nop
  6734                           
  6735                           ;lcd.h: 90: RD3 = 0;
  6736  14CE  1283               	bcf	3,5	;RP0=0, select bank0
  6737  14CF  1303               	bcf	3,6	;RP1=0, select bank0
  6738  14D0  1188               	bcf	8,3	;volatile
  6739                           
  6740                           ;lcd.h: 91: Lcd_Port(temp);
  6741  14D1  0872               	movf	Lcd_Write_Char@temp,w
  6742  14D2  160A  118A  23F3  160A  118A  	fcall	_Lcd_Port
  6743                           
  6744                           ;lcd.h: 92: RD3 = 1;
  6745  14D7  1283               	bcf	3,5	;RP0=0, select bank0
  6746  14D8  1303               	bcf	3,6	;RP1=0, select bank0
  6747  14D9  1588               	bsf	8,3	;volatile
  6748                           
  6749                           ;lcd.h: 93: _delay((unsigned long)((40)*(8000000/4000000.0)));
  6750  14DA  301A               	movlw	26
  6751  14DB  00F1               	movwf	??_Lcd_Write_Char
  6752  14DC                     u3967:	
  6753  14DC  0BF1               	decfsz	??_Lcd_Write_Char,f
  6754  14DD  2CDC               	goto	u3967
  6755  14DE  0000               	nop
  6756                           
  6757                           ;lcd.h: 94: RD3 = 0;
  6758  14DF  1283               	bcf	3,5	;RP0=0, select bank0
  6759  14E0  1303               	bcf	3,6	;RP1=0, select bank0
  6760  14E1  1188               	bcf	8,3	;volatile
  6761  14E2  0008               	return
  6762  14E3                     __end_of_Lcd_Write_Char:	
  6763                           
  6764                           	psect	text24
  6765  13C1                     __ptext24:	
  6766 ;; *************** function _Lcd_Shift_Left *****************
  6767 ;; Defined at:
  6768 ;;		line 110 in file "lcd.h"
  6769 ;; Parameters:    Size  Location     Type
  6770 ;;		None
  6771 ;; Auto vars:     Size  Location     Type
  6772 ;;		None
  6773 ;; Return value:  Size  Location     Type
  6774 ;;                  1    wreg      void 
  6775 ;; Registers used:
  6776 ;;		wreg, status,2, status,0, pclath, cstack
  6777 ;; Tracked objects:
  6778 ;;		On entry : 0/0
  6779 ;;		On exit  : 0/0
  6780 ;;		Unchanged: 0/0
  6781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6782 ;;      Params:         0       0       0       0       0
  6783 ;;      Locals:         0       0       0       0       0
  6784 ;;      Temps:          0       0       0       0       0
  6785 ;;      Totals:         0       0       0       0       0
  6786 ;;Total ram usage:        0 bytes
  6787 ;; Hardware stack levels used:    1
  6788 ;; Hardware stack levels required when called:    2
  6789 ;; This function calls:
  6790 ;;		_Lcd_Cmd
  6791 ;; This function is called by:
  6792 ;;		_main
  6793 ;; This function uses a non-reentrant model
  6794 ;;
  6795                           
  6796                           
  6797                           ;psect for function _Lcd_Shift_Left
  6798  13C1                     _Lcd_Shift_Left:	
  6799                           
  6800                           ;lcd.h: 112: Lcd_Cmd(0x01);
  6801                           
  6802                           ;incstack = 0
  6803                           ; Regs used in _Lcd_Shift_Left: [wreg+status,2+status,0+pclath+cstack]
  6804  13C1  3001               	movlw	1
  6805  13C2  120A  118A  2004  160A  118A  	fcall	_Lcd_Cmd
  6806                           
  6807                           ;lcd.h: 113: Lcd_Cmd(0x08);
  6808  13C7  3008               	movlw	8
  6809  13C8  120A  118A  2004   	fcall	_Lcd_Cmd
  6810  13CB  0008               	return
  6811  13CC                     __end_of_Lcd_Shift_Left:	
  6812                           
  6813                           	psect	text25
  6814  1520                     __ptext25:	
  6815 ;; *************** function _Lcd_Set_Cursor *****************
  6816 ;; Defined at:
  6817 ;;		line 41 in file "lcd.h"
  6818 ;; Parameters:    Size  Location     Type
  6819 ;;  a               1    wreg     unsigned char 
  6820 ;;  b               1    4[COMMON] unsigned char 
  6821 ;; Auto vars:     Size  Location     Type
  6822 ;;  a               1    7[COMMON] unsigned char 
  6823 ;;  temp            1   10[COMMON] unsigned char 
  6824 ;;  y               1    9[COMMON] unsigned char 
  6825 ;;  z               1    8[COMMON] unsigned char 
  6826 ;; Return value:  Size  Location     Type
  6827 ;;                  1    wreg      void 
  6828 ;; Registers used:
  6829 ;;		wreg, status,2, status,0, pclath, cstack
  6830 ;; Tracked objects:
  6831 ;;		On entry : 0/0
  6832 ;;		On exit  : 0/0
  6833 ;;		Unchanged: 0/0
  6834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6835 ;;      Params:         1       0       0       0       0
  6836 ;;      Locals:         4       0       0       0       0
  6837 ;;      Temps:          2       0       0       0       0
  6838 ;;      Totals:         7       0       0       0       0
  6839 ;;Total ram usage:        7 bytes
  6840 ;; Hardware stack levels used:    1
  6841 ;; Hardware stack levels required when called:    2
  6842 ;; This function calls:
  6843 ;;		_Lcd_Cmd
  6844 ;; This function is called by:
  6845 ;;		_main
  6846 ;; This function uses a non-reentrant model
  6847 ;;
  6848                           
  6849                           
  6850                           ;psect for function _Lcd_Set_Cursor
  6851  1520                     _Lcd_Set_Cursor:	
  6852                           
  6853                           ;incstack = 0
  6854                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  6855                           ;Lcd_Set_Cursor@a stored from wreg
  6856  1520  00F7               	movwf	Lcd_Set_Cursor@a
  6857                           
  6858                           ;lcd.h: 43: char temp,z,y;
  6859                           ;lcd.h: 44: if(a == 1)
  6860  1521  0377               	decf	Lcd_Set_Cursor@a,w
  6861  1522  1D03               	btfss	3,2
  6862  1523  2D45               	goto	l2259
  6863                           
  6864                           ;lcd.h: 45: {
  6865                           ;lcd.h: 46: temp = 0x80 + b - 1;
  6866  1524  0874               	movf	Lcd_Set_Cursor@b,w
  6867  1525  3E7F               	addlw	127
  6868  1526  00F5               	movwf	??_Lcd_Set_Cursor
  6869  1527  0875               	movf	??_Lcd_Set_Cursor,w
  6870  1528  00FA               	movwf	Lcd_Set_Cursor@temp
  6871                           
  6872                           ;lcd.h: 47: z = temp>>4;
  6873  1529  087A               	movf	Lcd_Set_Cursor@temp,w
  6874  152A  00F5               	movwf	??_Lcd_Set_Cursor
  6875  152B  3004               	movlw	4
  6876  152C                     u3435:	
  6877  152C  1003               	clrc
  6878  152D  0CF5               	rrf	??_Lcd_Set_Cursor,f
  6879  152E  3EFF               	addlw	-1
  6880  152F  1D03               	skipz
  6881  1530  2D2C               	goto	u3435
  6882  1531  0875               	movf	??_Lcd_Set_Cursor,w
  6883  1532  00F6               	movwf	??_Lcd_Set_Cursor+1
  6884  1533  0876               	movf	??_Lcd_Set_Cursor+1,w
  6885  1534  00F8               	movwf	Lcd_Set_Cursor@z
  6886                           
  6887                           ;lcd.h: 48: y = temp & 0x0F;
  6888  1535  087A               	movf	Lcd_Set_Cursor@temp,w
  6889  1536  390F               	andlw	15
  6890  1537  00F5               	movwf	??_Lcd_Set_Cursor
  6891  1538  0875               	movf	??_Lcd_Set_Cursor,w
  6892  1539  00F9               	movwf	Lcd_Set_Cursor@y
  6893                           
  6894                           ;lcd.h: 49: Lcd_Cmd(z);
  6895  153A  0878               	movf	Lcd_Set_Cursor@z,w
  6896  153B  120A  118A  2004  160A  118A  	fcall	_Lcd_Cmd
  6897                           
  6898                           ;lcd.h: 50: Lcd_Cmd(y);
  6899  1540  0879               	movf	Lcd_Set_Cursor@y,w
  6900  1541  120A  118A  2004   	fcall	_Lcd_Cmd
  6901                           
  6902                           ;lcd.h: 51: }
  6903  1544  0008               	return
  6904  1545                     l2259:	
  6905                           
  6906                           ;lcd.h: 52: else if(a == 2)
  6907  1545  3002               	movlw	2
  6908  1546  0677               	xorwf	Lcd_Set_Cursor@a,w
  6909  1547  1D03               	btfss	3,2
  6910  1548  0008               	return
  6911                           
  6912                           ;lcd.h: 53: {
  6913                           ;lcd.h: 54: temp = 0xC0 + b - 1;
  6914  1549  0874               	movf	Lcd_Set_Cursor@b,w
  6915  154A  3EBF               	addlw	191
  6916  154B  00F5               	movwf	??_Lcd_Set_Cursor
  6917  154C  0875               	movf	??_Lcd_Set_Cursor,w
  6918  154D  00FA               	movwf	Lcd_Set_Cursor@temp
  6919                           
  6920                           ;lcd.h: 55: z = temp>>4;
  6921  154E  087A               	movf	Lcd_Set_Cursor@temp,w
  6922  154F  00F5               	movwf	??_Lcd_Set_Cursor
  6923  1550  3004               	movlw	4
  6924  1551                     u3455:	
  6925  1551  1003               	clrc
  6926  1552  0CF5               	rrf	??_Lcd_Set_Cursor,f
  6927  1553  3EFF               	addlw	-1
  6928  1554  1D03               	skipz
  6929  1555  2D51               	goto	u3455
  6930  1556  0875               	movf	??_Lcd_Set_Cursor,w
  6931  1557  00F6               	movwf	??_Lcd_Set_Cursor+1
  6932  1558  0876               	movf	??_Lcd_Set_Cursor+1,w
  6933  1559  00F8               	movwf	Lcd_Set_Cursor@z
  6934                           
  6935                           ;lcd.h: 56: y = temp & 0x0F;
  6936  155A  087A               	movf	Lcd_Set_Cursor@temp,w
  6937  155B  390F               	andlw	15
  6938  155C  00F5               	movwf	??_Lcd_Set_Cursor
  6939  155D  0875               	movf	??_Lcd_Set_Cursor,w
  6940  155E  00F9               	movwf	Lcd_Set_Cursor@y
  6941                           
  6942                           ;lcd.h: 57: Lcd_Cmd(z);
  6943  155F  0878               	movf	Lcd_Set_Cursor@z,w
  6944  1560  120A  118A  2004  160A  118A  	fcall	_Lcd_Cmd
  6945                           
  6946                           ;lcd.h: 58: Lcd_Cmd(y);
  6947  1565  0879               	movf	Lcd_Set_Cursor@y,w
  6948  1566  120A  118A  2004   	fcall	_Lcd_Cmd
  6949  1569  0008               	return
  6950  156A                     __end_of_Lcd_Set_Cursor:	
  6951                           
  6952                           	psect	text26
  6953  1601                     __ptext26:	
  6954 ;; *************** function _Lcd_Init *****************
  6955 ;; Defined at:
  6956 ;;		line 62 in file "lcd.h"
  6957 ;; Parameters:    Size  Location     Type
  6958 ;;		None
  6959 ;; Auto vars:     Size  Location     Type
  6960 ;;		None
  6961 ;; Return value:  Size  Location     Type
  6962 ;;                  1    wreg      void 
  6963 ;; Registers used:
  6964 ;;		wreg, status,2, status,0, pclath, cstack
  6965 ;; Tracked objects:
  6966 ;;		On entry : 0/0
  6967 ;;		On exit  : 0/0
  6968 ;;		Unchanged: 0/0
  6969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6970 ;;      Params:         0       0       0       0       0
  6971 ;;      Locals:         0       0       0       0       0
  6972 ;;      Temps:          2       0       0       0       0
  6973 ;;      Totals:         2       0       0       0       0
  6974 ;;Total ram usage:        2 bytes
  6975 ;; Hardware stack levels used:    1
  6976 ;; Hardware stack levels required when called:    2
  6977 ;; This function calls:
  6978 ;;		_Lcd_Cmd
  6979 ;;		_Lcd_Port
  6980 ;; This function is called by:
  6981 ;;		_main
  6982 ;; This function uses a non-reentrant model
  6983 ;;
  6984                           
  6985                           
  6986                           ;psect for function _Lcd_Init
  6987  1601                     _Lcd_Init:	
  6988                           
  6989                           ;lcd.h: 64: Lcd_Port(0x00);
  6990                           
  6991                           ;incstack = 0
  6992                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  6993  1601  3000               	movlw	0
  6994  1602  160A  118A  23F3  160A  118A  	fcall	_Lcd_Port
  6995                           
  6996                           ;lcd.h: 65: _delay((unsigned long)((20)*(8000000/4000.0)));
  6997  1607  3034               	movlw	52
  6998  1608  00F5               	movwf	??_Lcd_Init+1
  6999  1609  30F1               	movlw	241
  7000  160A  00F4               	movwf	??_Lcd_Init
  7001  160B                     u3977:	
  7002  160B  0BF4               	decfsz	??_Lcd_Init,f
  7003  160C  2E0B               	goto	u3977
  7004  160D  0BF5               	decfsz	??_Lcd_Init+1,f
  7005  160E  2E0B               	goto	u3977
  7006  160F  2E10               	nop2
  7007                           
  7008                           ;lcd.h: 66: Lcd_Cmd(0x03);
  7009  1610  3003               	movlw	3
  7010  1611  120A  118A  2004  160A  118A  	fcall	_Lcd_Cmd
  7011                           
  7012                           ;lcd.h: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  7013  1616  300D               	movlw	13
  7014  1617  00F5               	movwf	??_Lcd_Init+1
  7015  1618  30FB               	movlw	251
  7016  1619  00F4               	movwf	??_Lcd_Init
  7017  161A                     u3987:	
  7018  161A  0BF4               	decfsz	??_Lcd_Init,f
  7019  161B  2E1A               	goto	u3987
  7020  161C  0BF5               	decfsz	??_Lcd_Init+1,f
  7021  161D  2E1A               	goto	u3987
  7022  161E  2E1F               	nop2
  7023                           
  7024                           ;lcd.h: 68: Lcd_Cmd(0x03);
  7025  161F  3003               	movlw	3
  7026  1620  120A  118A  2004  160A  118A  	fcall	_Lcd_Cmd
  7027                           
  7028                           ;lcd.h: 69: _delay((unsigned long)((11)*(8000000/4000.0)));
  7029  1625  301D               	movlw	29
  7030  1626  00F5               	movwf	??_Lcd_Init+1
  7031  1627  3091               	movlw	145
  7032  1628  00F4               	movwf	??_Lcd_Init
  7033  1629                     u3997:	
  7034  1629  0BF4               	decfsz	??_Lcd_Init,f
  7035  162A  2E29               	goto	u3997
  7036  162B  0BF5               	decfsz	??_Lcd_Init+1,f
  7037  162C  2E29               	goto	u3997
  7038                           
  7039                           ;lcd.h: 70: Lcd_Cmd(0x03);
  7040  162D  3003               	movlw	3
  7041  162E  120A  118A  2004  160A  118A  	fcall	_Lcd_Cmd
  7042                           
  7043                           ;lcd.h: 72: Lcd_Cmd(0x02);
  7044  1633  3002               	movlw	2
  7045  1634  120A  118A  2004  160A  118A  	fcall	_Lcd_Cmd
  7046                           
  7047                           ;lcd.h: 73: Lcd_Cmd(0x02);
  7048  1639  3002               	movlw	2
  7049  163A  120A  118A  2004  160A  118A  	fcall	_Lcd_Cmd
  7050                           
  7051                           ;lcd.h: 74: Lcd_Cmd(0x08);
  7052  163F  3008               	movlw	8
  7053  1640  120A  118A  2004  160A  118A  	fcall	_Lcd_Cmd
  7054                           
  7055                           ;lcd.h: 75: Lcd_Cmd(0x00);
  7056  1645  3000               	movlw	0
  7057  1646  120A  118A  2004  160A  118A  	fcall	_Lcd_Cmd
  7058                           
  7059                           ;lcd.h: 76: Lcd_Cmd(0x0C);
  7060  164B  300C               	movlw	12
  7061  164C  120A  118A  2004  160A  118A  	fcall	_Lcd_Cmd
  7062                           
  7063                           ;lcd.h: 77: Lcd_Cmd(0x00);
  7064  1651  3000               	movlw	0
  7065  1652  120A  118A  2004  160A  118A  	fcall	_Lcd_Cmd
  7066                           
  7067                           ;lcd.h: 78: Lcd_Cmd(0x06);
  7068  1657  3006               	movlw	6
  7069  1658  120A  118A  2004   	fcall	_Lcd_Cmd
  7070  165B  0008               	return
  7071  165C                     __end_of_Lcd_Init:	
  7072                           
  7073                           	psect	text27
  7074  13B6                     __ptext27:	
  7075 ;; *************** function _Lcd_Clear *****************
  7076 ;; Defined at:
  7077 ;;		line 35 in file "lcd.h"
  7078 ;; Parameters:    Size  Location     Type
  7079 ;;		None
  7080 ;; Auto vars:     Size  Location     Type
  7081 ;;		None
  7082 ;; Return value:  Size  Location     Type
  7083 ;;                  2   52[None  ] int 
  7084 ;; Registers used:
  7085 ;;		wreg, status,2, status,0, pclath, cstack
  7086 ;; Tracked objects:
  7087 ;;		On entry : 0/0
  7088 ;;		On exit  : 0/0
  7089 ;;		Unchanged: 0/0
  7090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7091 ;;      Params:         0       0       0       0       0
  7092 ;;      Locals:         0       0       0       0       0
  7093 ;;      Temps:          0       0       0       0       0
  7094 ;;      Totals:         0       0       0       0       0
  7095 ;;Total ram usage:        0 bytes
  7096 ;; Hardware stack levels used:    1
  7097 ;; Hardware stack levels required when called:    2
  7098 ;; This function calls:
  7099 ;;		_Lcd_Cmd
  7100 ;; This function is called by:
  7101 ;;		_main
  7102 ;; This function uses a non-reentrant model
  7103 ;;
  7104                           
  7105                           
  7106                           ;psect for function _Lcd_Clear
  7107  13B6                     _Lcd_Clear:	
  7108                           
  7109                           ;lcd.h: 37: Lcd_Cmd(0);
  7110                           
  7111                           ;incstack = 0
  7112                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  7113  13B6  3000               	movlw	0
  7114  13B7  120A  118A  2004  160A  118A  	fcall	_Lcd_Cmd
  7115                           
  7116                           ;lcd.h: 38: Lcd_Cmd(1);
  7117  13BC  3001               	movlw	1
  7118  13BD  120A  118A  2004   	fcall	_Lcd_Cmd
  7119  13C0  0008               	return
  7120  13C1                     __end_of_Lcd_Clear:	
  7121                           
  7122                           	psect	text28
  7123  0004                     __ptext28:	
  7124 ;; *************** function _Lcd_Cmd *****************
  7125 ;; Defined at:
  7126 ;;		line 26 in file "lcd.h"
  7127 ;; Parameters:    Size  Location     Type
  7128 ;;  a               1    wreg     unsigned char 
  7129 ;; Auto vars:     Size  Location     Type
  7130 ;;  a               1    3[COMMON] unsigned char 
  7131 ;; Return value:  Size  Location     Type
  7132 ;;                  1    wreg      void 
  7133 ;; Registers used:
  7134 ;;		wreg, status,2, status,0, pclath, cstack
  7135 ;; Tracked objects:
  7136 ;;		On entry : 0/0
  7137 ;;		On exit  : 0/0
  7138 ;;		Unchanged: 0/0
  7139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7140 ;;      Params:         0       0       0       0       0
  7141 ;;      Locals:         1       0       0       0       0
  7142 ;;      Temps:          2       0       0       0       0
  7143 ;;      Totals:         3       0       0       0       0
  7144 ;;Total ram usage:        3 bytes
  7145 ;; Hardware stack levels used:    1
  7146 ;; Hardware stack levels required when called:    1
  7147 ;; This function calls:
  7148 ;;		_Lcd_Port
  7149 ;; This function is called by:
  7150 ;;		_Lcd_Clear
  7151 ;;		_Lcd_Set_Cursor
  7152 ;;		_Lcd_Init
  7153 ;;		_Lcd_Shift_Left
  7154 ;;		_Lcd_Shift_Right
  7155 ;; This function uses a non-reentrant model
  7156 ;;
  7157                           
  7158                           
  7159                           ;psect for function _Lcd_Cmd
  7160  0004                     _Lcd_Cmd:	
  7161                           
  7162                           ;incstack = 0
  7163                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  7164                           ;Lcd_Cmd@a stored from wreg
  7165  0004  00F3               	movwf	Lcd_Cmd@a
  7166                           
  7167                           ;lcd.h: 28: RD2 = 0;
  7168  0005  1283               	bcf	3,5	;RP0=0, select bank0
  7169  0006  1303               	bcf	3,6	;RP1=0, select bank0
  7170  0007  1108               	bcf	8,2	;volatile
  7171                           
  7172                           ;lcd.h: 29: Lcd_Port(a);
  7173  0008  0873               	movf	Lcd_Cmd@a,w
  7174  0009  160A  118A  23F3  120A  118A  	fcall	_Lcd_Port
  7175                           
  7176                           ;lcd.h: 30: RD3 = 1;
  7177  000E  1283               	bcf	3,5	;RP0=0, select bank0
  7178  000F  1303               	bcf	3,6	;RP1=0, select bank0
  7179  0010  1588               	bsf	8,3	;volatile
  7180                           
  7181                           ;lcd.h: 31: _delay((unsigned long)((4)*(8000000/4000.0)));
  7182  0011  300B               	movlw	11
  7183  0012  00F2               	movwf	??_Lcd_Cmd+1
  7184  0013  3062               	movlw	98
  7185  0014  00F1               	movwf	??_Lcd_Cmd
  7186  0015                     u4007:	
  7187  0015  0BF1               	decfsz	??_Lcd_Cmd,f
  7188  0016  2815               	goto	u4007
  7189  0017  0BF2               	decfsz	??_Lcd_Cmd+1,f
  7190  0018  2815               	goto	u4007
  7191  0019  0000               	nop
  7192                           
  7193                           ;lcd.h: 32: RD3 = 0;
  7194  001A  1283               	bcf	3,5	;RP0=0, select bank0
  7195  001B  1303               	bcf	3,6	;RP1=0, select bank0
  7196  001C  1188               	bcf	8,3	;volatile
  7197  001D  0008               	return
  7198  001E                     __end_of_Lcd_Cmd:	
  7199                           
  7200                           	psect	text29
  7201  13F3                     __ptext29:	
  7202 ;; *************** function _Lcd_Port *****************
  7203 ;; Defined at:
  7204 ;;		line 4 in file "lcd.h"
  7205 ;; Parameters:    Size  Location     Type
  7206 ;;  a               1    wreg     unsigned char 
  7207 ;; Auto vars:     Size  Location     Type
  7208 ;;  a               1    0[COMMON] unsigned char 
  7209 ;; Return value:  Size  Location     Type
  7210 ;;                  1    wreg      void 
  7211 ;; Registers used:
  7212 ;;		wreg
  7213 ;; Tracked objects:
  7214 ;;		On entry : 0/0
  7215 ;;		On exit  : 0/0
  7216 ;;		Unchanged: 0/0
  7217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7218 ;;      Params:         0       0       0       0       0
  7219 ;;      Locals:         1       0       0       0       0
  7220 ;;      Temps:          0       0       0       0       0
  7221 ;;      Totals:         1       0       0       0       0
  7222 ;;Total ram usage:        1 bytes
  7223 ;; Hardware stack levels used:    1
  7224 ;; This function calls:
  7225 ;;		Nothing
  7226 ;; This function is called by:
  7227 ;;		_Lcd_Cmd
  7228 ;;		_Lcd_Init
  7229 ;;		_Lcd_Write_Char
  7230 ;; This function uses a non-reentrant model
  7231 ;;
  7232                           
  7233                           
  7234                           ;psect for function _Lcd_Port
  7235  13F3                     _Lcd_Port:	
  7236                           
  7237                           ;incstack = 0
  7238                           ; Regs used in _Lcd_Port: [wreg]
  7239                           ;Lcd_Port@a stored from wreg
  7240  13F3  00F0               	movwf	Lcd_Port@a
  7241                           
  7242                           ;lcd.h: 6: if(a & 1)
  7243  13F4  1C70               	btfss	Lcd_Port@a,0
  7244  13F5  2BFA               	goto	l39
  7245                           
  7246                           ;lcd.h: 7: RD4 = 1;
  7247  13F6  1283               	bcf	3,5	;RP0=0, select bank0
  7248  13F7  1303               	bcf	3,6	;RP1=0, select bank0
  7249  13F8  1608               	bsf	8,4	;volatile
  7250  13F9  2BFD               	goto	l40
  7251  13FA                     l39:	
  7252                           
  7253                           ;lcd.h: 8: else
  7254                           ;lcd.h: 9: RD4 = 0;
  7255  13FA  1283               	bcf	3,5	;RP0=0, select bank0
  7256  13FB  1303               	bcf	3,6	;RP1=0, select bank0
  7257  13FC  1208               	bcf	8,4	;volatile
  7258  13FD                     l40:	
  7259                           
  7260                           ;lcd.h: 11: if(a & 2)
  7261  13FD  1CF0               	btfss	Lcd_Port@a,1
  7262  13FE  2C01               	goto	l41
  7263                           
  7264                           ;lcd.h: 12: RD5 = 1;
  7265  13FF  1688               	bsf	8,5	;volatile
  7266  1400  2C02               	goto	l42
  7267  1401                     l41:	
  7268                           
  7269                           ;lcd.h: 13: else
  7270                           ;lcd.h: 14: RD5 = 0;
  7271  1401  1288               	bcf	8,5	;volatile
  7272  1402                     l42:	
  7273                           
  7274                           ;lcd.h: 16: if(a & 4)
  7275  1402  1D70               	btfss	Lcd_Port@a,2
  7276  1403  2C06               	goto	l43
  7277                           
  7278                           ;lcd.h: 17: RD6 = 1;
  7279  1404  1708               	bsf	8,6	;volatile
  7280  1405  2C07               	goto	l44
  7281  1406                     l43:	
  7282                           
  7283                           ;lcd.h: 18: else
  7284                           ;lcd.h: 19: RD6 = 0;
  7285  1406  1308               	bcf	8,6	;volatile
  7286  1407                     l44:	
  7287                           
  7288                           ;lcd.h: 21: if(a & 8)
  7289  1407  1DF0               	btfss	Lcd_Port@a,3
  7290  1408  2C0B               	goto	l45
  7291                           
  7292                           ;lcd.h: 22: RD7 = 1;
  7293  1409  1788               	bsf	8,7	;volatile
  7294  140A  0008               	return
  7295  140B                     l45:	
  7296                           
  7297                           ;lcd.h: 23: else
  7298                           ;lcd.h: 24: RD7 = 0;
  7299  140B  1388               	bcf	8,7	;volatile
  7300  140C  0008               	return
  7301  140D                     __end_of_Lcd_Port:	
  7302                           
  7303                           	psect	text30
  7304  147A                     __ptext30:	
  7305 ;; *************** function _ADC_Read *****************
  7306 ;; Defined at:
  7307 ;;		line 32 in file "main.c"
  7308 ;; Parameters:    Size  Location     Type
  7309 ;;  channel         1    wreg     unsigned char 
  7310 ;; Auto vars:     Size  Location     Type
  7311 ;;  channel         1    4[COMMON] unsigned char 
  7312 ;; Return value:  Size  Location     Type
  7313 ;;                  2    0[COMMON] unsigned int 
  7314 ;; Registers used:
  7315 ;;		wreg, status,2, status,0
  7316 ;; Tracked objects:
  7317 ;;		On entry : 0/0
  7318 ;;		On exit  : 0/0
  7319 ;;		Unchanged: 0/0
  7320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7321 ;;      Params:         2       0       0       0       0
  7322 ;;      Locals:         1       0       0       0       0
  7323 ;;      Temps:          2       0       0       0       0
  7324 ;;      Totals:         5       0       0       0       0
  7325 ;;Total ram usage:        5 bytes
  7326 ;; Hardware stack levels used:    1
  7327 ;; This function calls:
  7328 ;;		Nothing
  7329 ;; This function is called by:
  7330 ;;		_main
  7331 ;; This function uses a non-reentrant model
  7332 ;;
  7333                           
  7334                           
  7335                           ;psect for function _ADC_Read
  7336  147A                     _ADC_Read:	
  7337                           
  7338                           ;incstack = 0
  7339                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  7340                           ;ADC_Read@channel stored from wreg
  7341  147A  00F4               	movwf	ADC_Read@channel
  7342                           
  7343                           ;main.c: 34: if(channel > 7)
  7344  147B  3008               	movlw	8
  7345  147C  0274               	subwf	ADC_Read@channel,w
  7346  147D  1C03               	skipc
  7347  147E  2C82               	goto	l2297
  7348                           
  7349                           ;main.c: 35: return 0;
  7350  147F  01F0               	clrf	?_ADC_Read
  7351  1480  01F1               	clrf	?_ADC_Read+1
  7352  1481  0008               	return
  7353  1482                     l2297:	
  7354                           
  7355                           ;main.c: 37: ADCON0 &= 0xC5;
  7356  1482  30C5               	movlw	197
  7357  1483  00F2               	movwf	??_ADC_Read
  7358  1484  0872               	movf	??_ADC_Read,w
  7359  1485  1283               	bcf	3,5	;RP0=0, select bank0
  7360  1486  1303               	bcf	3,6	;RP1=0, select bank0
  7361  1487  059F               	andwf	31,f	;volatile
  7362                           
  7363                           ;main.c: 38: ADCON0 |= channel<<3;
  7364  1488  0874               	movf	ADC_Read@channel,w
  7365  1489  00F2               	movwf	??_ADC_Read
  7366  148A  3002               	movlw	2
  7367  148B                     u3505:	
  7368  148B  1003               	clrc
  7369  148C  0DF2               	rlf	??_ADC_Read,f
  7370  148D  3EFF               	addlw	-1
  7371  148E  1D03               	skipz
  7372  148F  2C8B               	goto	u3505
  7373  1490  1003               	clrc
  7374  1491  0D72               	rlf	??_ADC_Read,w
  7375  1492  00F3               	movwf	??_ADC_Read+1
  7376  1493  0873               	movf	??_ADC_Read+1,w
  7377  1494  049F               	iorwf	31,f	;volatile
  7378                           
  7379                           ;main.c: 39: _delay((unsigned long)((2)*(8000000/4000.0)));
  7380  1495  3006               	movlw	6
  7381  1496  00F3               	movwf	??_ADC_Read+1
  7382  1497  3030               	movlw	48
  7383  1498  00F2               	movwf	??_ADC_Read
  7384  1499                     u4017:	
  7385  1499  0BF2               	decfsz	??_ADC_Read,f
  7386  149A  2C99               	goto	u4017
  7387  149B  0BF3               	decfsz	??_ADC_Read+1,f
  7388  149C  2C99               	goto	u4017
  7389  149D  0000               	nop
  7390                           
  7391                           ;main.c: 40: GO_nDONE = 1;
  7392  149E  1283               	bcf	3,5	;RP0=0, select bank0
  7393  149F  1303               	bcf	3,6	;RP1=0, select bank0
  7394  14A0  151F               	bsf	31,2	;volatile
  7395  14A1                     l85:	
  7396                           ;main.c: 41: while(GO_nDONE);
  7397                           
  7398  14A1  191F               	btfsc	31,2	;volatile
  7399  14A2  2CA1               	goto	l85
  7400                           
  7401                           ;main.c: 42: return ((ADRESH<<8)+ADRESL);
  7402  14A3  081E               	movf	30,w	;volatile
  7403  14A4  00F1               	movwf	?_ADC_Read+1
  7404  14A5  1683               	bsf	3,5	;RP0=1, select bank1
  7405  14A6  1303               	bcf	3,6	;RP1=0, select bank1
  7406  14A7  081E               	movf	30,w	;volatile
  7407  14A8  00F0               	movwf	?_ADC_Read
  7408  14A9  0008               	return
  7409  14AA                     __end_of_ADC_Read:	
  7410                           
  7411                           	psect	text31
  7412  13AD                     __ptext31:	
  7413 ;; *************** function _ADC_Init *****************
  7414 ;; Defined at:
  7415 ;;		line 26 in file "main.c"
  7416 ;; Parameters:    Size  Location     Type
  7417 ;;		None
  7418 ;; Auto vars:     Size  Location     Type
  7419 ;;		None
  7420 ;; Return value:  Size  Location     Type
  7421 ;;                  1    wreg      void 
  7422 ;; Registers used:
  7423 ;;		wreg
  7424 ;; Tracked objects:
  7425 ;;		On entry : 0/0
  7426 ;;		On exit  : 0/0
  7427 ;;		Unchanged: 0/0
  7428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7429 ;;      Params:         0       0       0       0       0
  7430 ;;      Locals:         0       0       0       0       0
  7431 ;;      Temps:          0       0       0       0       0
  7432 ;;      Totals:         0       0       0       0       0
  7433 ;;Total ram usage:        0 bytes
  7434 ;; Hardware stack levels used:    1
  7435 ;; This function calls:
  7436 ;;		Nothing
  7437 ;; This function is called by:
  7438 ;;		_main
  7439 ;; This function uses a non-reentrant model
  7440 ;;
  7441                           
  7442                           
  7443                           ;psect for function _ADC_Init
  7444  13AD                     _ADC_Init:	
  7445                           
  7446                           ;main.c: 28: ADCON0 = 0x81;
  7447                           
  7448                           ;incstack = 0
  7449                           ; Regs used in _ADC_Init: [wreg]
  7450  13AD  3081               	movlw	129
  7451  13AE  1283               	bcf	3,5	;RP0=0, select bank0
  7452  13AF  1303               	bcf	3,6	;RP1=0, select bank0
  7453  13B0  009F               	movwf	31	;volatile
  7454                           
  7455                           ;main.c: 29: ADCON1 = 0x80;
  7456  13B1  3080               	movlw	128
  7457  13B2  1683               	bsf	3,5	;RP0=1, select bank1
  7458  13B3  1303               	bcf	3,6	;RP1=0, select bank1
  7459  13B4  009F               	movwf	31	;volatile
  7460  13B5  0008               	return
  7461  13B6                     __end_of_ADC_Init:	
  7462  007E                     btemp	set	126	;btemp
  7463  007E                     wtemp0	set	126


Data Sizes:
    Strings     39
    Constant    118
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     71      71
    BANK1            80     46      46
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 7
		 -> STR_4(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 16
		 -> main@ad_tratado_lcd(BANK1[16]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 16
		 -> main@ad_tratado_lcd(BANK1[16]), STR_3(CODE[12]), STR_2(CODE[10]), STR_1(CODE[10]), 


Critical Paths under _main in COMMON

    _sprintf->___lldiv
    _sprintf->___lltoft
    _sprintf->__div_to_l_
    _scale->___bmul
    _fround->___bmul
    ___ftmul->___bmul
    ___bmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___ftsub->___lltoft
    ___lwtoft->___ftpack
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Shift_Left->_Lcd_Cmd
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___bmul
    ___bmul->___awdiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _main in BANK1

    _main->_sprintf

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    26      0   40088
                                             68 BANK0      3     3      0
                                             23 BANK1     23    23      0
                           _ADC_Init
                           _ADC_Read
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Shift_Left
                   _Lcd_Write_String
                            ___ftmul
                           ___lwtoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             40    36      4   32971
                                             58 BANK0     10     6      4
                                              0 BANK1     23    23      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                9     6      3    7236
                                             23 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              16    13      3    7038
                                             23 BANK0     16    13      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    3623
                                              7 BANK0     16    10      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                             ___bmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     560
                                             12 COMMON     1     1      0
                                              4 BANK0      3     2      1
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1250
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1360
                                              7 COMMON     5     1      4
                                              0 BANK0      4     4      0
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         16    10      6     409
                                              0 COMMON    10     4      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          20    14      6     552
                                              0 COMMON    14     8      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1276
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             6     2      4    1829
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     477
                                              0 COMMON    10     2      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     374
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     411
                                             32 BANK0     14    10      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    2932
                                             52 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    2759
                                             39 BANK0     13     7      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3      98
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                              12     6      6     560
                                              0 COMMON    12     6      6
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             4     1      3    1782
                                              8 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1707
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     480
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Left                                       0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     592
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             5     3      2      44
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _ADC_Read
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Left
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___bmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___lwtoft
     ___ftpack
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___bmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___bmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___bmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     47      47       5       88.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     2E      2E       7       57.5%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Jan 02 23:21:43 2018

                        pc 0002             ___bmul@product 0025                __CFG_CP$OFF 0000  
                       l40 13FD                         l41 1401                         l42 1402  
                       l43 1406                         l44 1407                         l45 140B  
                       l39 13FA                         l85 14A1               ___awdiv@sign 0021  
                       fsr 0004        ___wmul@multiplicand 0072               ___ftadd@exp1 0053  
             ___ftadd@exp2 0052               ___ftadd@sign 0051                        l143 0242  
                      l440 0D59                        l432 0D10                        l184 078B  
                      l169 0568                        l274 1438                        l186 07D3  
                      l460 0862                        l452 0845                        l509 08AD  
                      l519 0932                        l560 17E6                        l459 085A  
                      l483 0AB9                        _RD2 0042                        _RD3 0043  
                      _RD4 0044                        _RD5 0045                        _RD6 0046  
                      _RD7 0047               __CFG_CPD$OFF 0000                        fsr0 0004  
                      indf 0000               ___awmod@sign 0076               __CFG_FOSC$HS 0000  
              _sprintf$576 00A0               __CFG_LVP$OFF 0000                       l2003 0895  
                     l2103 1430                       l2201 1734                       l2025 08EE  
                     l2017 08CE                       l2123 1705                       l2043 0927  
                     l2035 090A                       l2213 1769                       l2061 0C73  
                     l2045 0935                       l2037 091A                       l2119 16DE  
                     l2223 15BD                       l2071 0CBA                       l2055 0C54  
                     l2209 175C                       l2225 15CD                       l2233 15F8  
                     l2241 1453                       l2147 1416                       l2243 1465  
                     l2331 023C                       l2315 01DE                       l2157 178C  
                     l2229 15EB                       l2413 04F1                       l2183 17DB  
                     l2175 17BE                       l2095 0D4E                       l2087 0D31  
                     l1801 0A6A                       l2185 17E9                       l2177 17CE  
                     l2097 0D5C                       l2089 0D41                       l1705 1673  
                     l2425 0547                       l2409 0482                       l2345 0272  
                     l2337 0244                       l2329 01F9                       l2259 1545  
                     l1643 081E                       l1811 0A90                       l1731 16B2  
                     l1723 169F                       l1715 167B                       l2443 05EE  
                     l2419 04F7                       l2371 031B                       l2355 02B1  
                     l2339 025A                       l2285 14E5                       l1653 084A  
                     l1645 082A                       l1821 0AB5                       l1813 0A94  
                     l2189 17F7                       l1717 1689                       l2437 05D5  
                     l1655 0854                       l1647 082F                       l1639 0817  
                     l1807 0A7F                       l2199 1724                       l1727 16AA  
                     l1743 1574                       l2471 075B                       l2383 03A5  
                     l2297 1482                       l1825 0ACB                       l1809 0A8B  
                     l1761 159D                       l2457 063B                       l2449 0608  
                     l2545 0B8E                       l2537 0B6C                       l1819 0AA9  
                     l1755 1581                       l1747 157B                       l1683 13D6  
                     l2395 0429                       l2387 03EB                       l2379 0388  
                     l1829 0ADD                       l1757 158F                       l1765 15A8  
                     l1941 0186                       l1933 00FC                       l2477 0774  
                     l2549 0BA4                       l1839 0B00                       l1783 0A41  
                     l1679 13D0                       l1871 09BB                       l1855 096C  
                     l2487 07B1                       l2399 0440                       l2479 0779  
                     l2495 01C3                       l1769 15B0                       l1849 0956  
                     l2497 07F7                       l1779 0A3A                       l1699 1668  
                     l1883 09E3                       l1867 09AB                       l1963 0E97  
                     l1789 0A50                       l1981 0FE1                       l1957 0E29  
                     l1879 09D3                       l1975 0F73                       l1967 0EB6  
                     l1993 080D                       STR_1 109C                       STR_2 1092  
                     STR_3 1086                       STR_4 10A6                       u2005 083E  
                     u2025 084D                       u2205 1696                       u3111 16D1  
                     u3015 0D32                       u2215 16A0                       u3112 16D2  
                     u2065 0869                       u3113 16D7                       u2305 159E  
                     u3114 16D8                       u3131 16F8                       u3132 16F9  
                     u3133 16FE                       u3045 0D50                       u3134 16FF  
                     u4007 0015                       u3215 17BF                       u2175 167E  
                     u4017 1499                       u2425 0A6B                       u3305 1736  
                     u2515 0AAA                       u3315 174B                       u3075 1439  
                     u2195 168A                       u2275 1584                       u3245 17DD  
                     u3325 175D                       u3405 1458                       u3085 1440  
                     u2605 098A                       u2455 0A80                       u2295 1595  
                     u3505 148B                       u3185 1793                       u3435 152C  
                     u2715 14BB                       u3355 15C1                       u2635 09BC  
                     u2485 0A95                       u3285 1728                       u2645 09C4  
                     u3455 1551                       u3375 15DB                       u3385 15EC  
                     u3705 04FC                       u2835 08D0                       u2595 0978  
                     u3715 0539                       u3635 03B0                       u2925 0929  
                     u2845 08E1                       u2685 09E4                       u3805 0721  
                     u3645 03F6                       u2855 08EF                       u2695 09EC  
                     u1985 0823                       u3745 0577                       u3675 0427  
                     u3595 02CB                       u2965 0CBC                       u3765 05F7  
                     u3917 0B5A                       u2975 0CEB                       u2895 090B  
                     u3855 07A4                       u3775 0604                       u3927 0B74  
                     u3865 07CA                       u3937 0BBC                       u3795 06AF  
                     u3947 0C2C                       u3957 14CB                       u3967 14DC  
                     u3977 160B                       u3987 161A                       u3997 1629  
              main@leitura 00CA               __CFG_WRT$OFF 0000          ?_Lcd_Write_String 0075  
                     _main 0B1A               ___ftpack@arg 0070               ___ftpack@exp 0073  
                     btemp 007E           __end_of_ADC_Init 13B6           __end_of_ADC_Read 14AA  
            __CFG_BOREN$ON 0000                       start 0000         ??_Lcd_Write_String 0077  
          __end_of_Lcd_Cmd 001E          ___bmul@multiplier 0026               ___ftmul@cntr 0035  
             ___ftmul@sign 0036               ___fttol@exp1 004D               ___fttol@lval 0049  
                    ?_main 0070            __end_of___awdiv 16B7            __end_of___ftadd 0B1A  
            __CFG_WDTE$OFF 0000            __end_of___awmod 15B5            __end_of___ftneg 13AD  
          __end_of___lldiv 1772            __end_of___ftmul 0A11            ___awdiv@divisor 0077  
          __end_of___llmod 1601            __end_of___ftsub 142E            __end_of___fttol 1800  
          ___awdiv@counter 0020                      _PORTB 0006    __size_of_Lcd_Set_Cursor 004A  
                    _TRISA 0085                      _TRISB 0086                      _TRISC 0087  
                    _TRISD 0088               ___lltoft@exp 007D    __size_of_Lcd_Shift_Left 000B  
          __end_of_dpowers 1038                      _scale 0D65            __end_of_isdigit 080F  
            ___ftpack@sign 0074                      main@a 00CC         main@ad_tratado_lcd 00B7  
                    pclath 000A                      status 0003                      wtemp0 007E  
          __end_of_sprintf 07FC           __end_of_Lcd_Init 165C           __end_of_Lcd_Port 140D  
          __initialization 07FC               __end_of_main 0C33                     ??_main 0064  
            ___fttol@sign1 0048         __size_of_Lcd_Clear 000B       __size_of__tdiv_to_l_ 00C3  
                   _ADCON0 001F                     _ADCON1 009F           ___llmod@dividend 0074  
                   ?_scale 0037                     _ADRESH 001E                     _ADRESL 009E  
         ___awdiv@dividend 0079           __end_of___ftpack 087B           __end_of___lltoft 147A  
         __end_of___lwtoft 13F3                  ??_Lcd_Cmd 0071    __size_of_Lcd_Write_Char 0039  
           __CFG_PWRTE$OFF 0000           __end_of__powers_ 105F                     ___bmul 13CC  
                   ___ftge 16B7                     ___wmul 142E                  ??___awdiv 007B  
                ??___ftadd 004D                  ??___awmod 0074                  ??___ftneg 0073  
                ??___lldiv 0078                  ??___ftmul 002D                  ??___llmod 0078  
                ??___ftsub 007E                  ??___fttol 0044            ADC_Read@channel 0074  
                   _fround 001E           ___awdiv@quotient 0022            ___awmod@divisor 0070  
          ___awmod@counter 0075      ___ftmul@f3_as_product 0032                  ??_isdigit 0070  
                ?_ADC_Init 0070                  ?_ADC_Read 0070                  ??_sprintf 005E  
          Lcd_Set_Cursor@a 0077            Lcd_Set_Cursor@b 0074            Lcd_Set_Cursor@y 0079  
          Lcd_Set_Cursor@z 0078    __end_of__initialization 07FC                 ___ftadd@f1 0047  
               ___ftadd@f2 004A                 ___ftge@ff1 0070                 ___ftge@ff2 0073  
        __end_of_Lcd_Clear 13C1                 ___ftneg@f1 0070        ___bmul@multiplicand 0024  
               ___ftmul@f1 0027                 ___ftmul@f2 002A                 ___ftsub@f1 0057  
               ___ftsub@f2 0054                 ___fttol@f1 0040             __pcstackCOMMON 0070  
               ___lltoft@c 0078              __end_of_scale 1000                 ___lwtoft@c 0078  
           _Lcd_Set_Cursor 1520                 __div_to_l_ 0C33                 ??_ADC_Init 0070  
               ??_ADC_Read 0072             _Lcd_Shift_Left 13C1                  ?_Lcd_Init 0070  
                ?_Lcd_Port 0070            __div_to_l_@exp1 0025            __div_to_l_@cntr 0024  
                  ??_scale 003A            __div_to_l_@quot 0020              __div_to_l_@f1 0070  
            __div_to_l_@f2 0073                 __pmaintext 0B1A                    ?___bmul 0024  
                  ?___ftge 0070                    ?___wmul 0070                    ?_fround 0037  
__size_of_Lcd_Write_String 003D                  ?___ftpack 0070     __end_of_Lcd_Set_Cursor 156A  
                ?___lltoft 0078                  ?___lwtoft 0078     __end_of_Lcd_Shift_Left 13CC  
               ??_Lcd_Init 0074                 ??_Lcd_Port 0070                 __stringtab 1000  
           _Lcd_Write_Char 14AA                    _Lcd_Cmd 0004          __end_of__npowers_ 1086  
          __size_of___bmul 0013            __size_of___ftge 005D                    ___awdiv 165C  
                  ___ftadd 0A11                    ___awmod 156A                    ___ftneg 13A5  
                  ___lldiv 1714            __size_of___wmul 0021                    ___ftmul 093E  
                  ___llmod 15B5                    ___ftsub 140D                    ___fttol 1772  
               _fround$573 0043                 _fround$574 0040                 ??___ftpack 0075  
          __size_of_fround 019A            ?_Lcd_Set_Cursor 0074                 ??___lltoft 007C  
                  __ptext1 01B8                    __ptext2 0D65                    __ptext3 0801  
                  __ptext4 001E                    __ptext5 093E                    __ptext6 13CC  
                  __ptext7 156A                    __ptext8 165C                    __ptext9 087B  
               ??___lwtoft 007B                ?__div_to_l_ 0070                    _dpowers 1010  
                  _isdigit 0801            ?_Lcd_Shift_Left 0070           ___awmod@dividend 0072  
                  _sprintf 01B8     __end_of_Lcd_Write_Char 14E3       end_of_initialization 07FC  
          ___lldiv@divisor 0070            ___lldiv@counter 007D                  Lcd_Port@a 0070  
           __tdiv_to_l_@f1 0070             __tdiv_to_l_@f2 0073              ??__tdiv_to_l_ 0076  
        __size_of_ADC_Init 0009          __size_of_ADC_Read 0030            ?_Lcd_Write_Char 0070  
        Lcd_Write_String@a 0075          Lcd_Write_String@i 007A        __size_of__div_to_l_ 0132  
              ___ftmul@exp 0031                  _Lcd_Clear 13B6             __end_of___bmul 13DF  
           __end_of___ftge 1714             __end_of___wmul 144F           _Lcd_Write_String 14E3  
           __end_of_fround 01B8        start_initialization 07FC        __end_of__tdiv_to_l_ 093E  
        __size_of_Lcd_Init 005B          __size_of_Lcd_Port 001A            ___llmod@divisor 0070  
          ___llmod@counter 0079                 ?_Lcd_Clear 0070                   ??___bmul 007C  
                 ??___ftge 0076                   ??___wmul 0074            Lcd_Write_Char@a 0074  
          Lcd_Write_Char@y 0073                   ??_fround 003A              sprintf@tmpval 00AC  
               fround@prec 0046          __size_of___ftpack 006C          __size_of___lltoft 002B  
                ___latbits 0002          __size_of___lwtoft 0014              __pcstackBANK0 0020  
            __pcstackBANK1 00A0                   ?_Lcd_Cmd 0070                sprintf@flag 00A4  
              sprintf@fval 00B3                sprintf@prec 00B1           ??_Lcd_Set_Cursor 0075  
                 ?___awdiv 0077                   ?___ftadd 0047                   ?___awmod 0070  
                 ?___ftneg 0070                   ?___lldiv 0070                   ?___ftmul 0027  
                 ?___llmod 0070                   ?___ftsub 0054                  __npowers_ 105F  
                 ?___fttol 0040           ??_Lcd_Shift_Left 0074                  __pstrings 1000  
              __tdiv_to_l_ 087B          main@AD_convertido 00C7               ??__div_to_l_ 0076  
                 ?_isdigit 0070                   _ADC_Init 13AD                   _ADC_Read 147A  
                _scale$575 003C                   ?_sprintf 005A             __size_of_scale 029B  
           ___wmul@product 0074                   Lcd_Cmd@a 0073         __end_of__div_to_l_ 0D65  
                 _GO_nDONE 00FA                ??_Lcd_Clear 0074                __stringbase 100F  
        ___wmul@multiplier 0070           ??_Lcd_Write_Char 0071                   _Lcd_Init 1601  
                 _Lcd_Port 13F3   __end_of_Lcd_Write_String 1520           __size_of_Lcd_Cmd 001A  
         __size_of___awdiv 005B           __size_of___ftadd 0109           __size_of___awmod 004B  
         __size_of___ftneg 0008           __size_of___lldiv 005E           __size_of___ftmul 00D3  
         __size_of___llmod 004C           __size_of___ftsub 0021           __size_of___fttol 008E  
                 ___ftpack 080F         __end_of__stringtab 1010                   ___lltoft 144F  
              _isdigit$346 0070                   ___lwtoft 13DF                 sprintf@exp 00AA  
               sprintf@val 00A6           __size_of_isdigit 000E                   __ptext10 0C33  
                 __ptext11 142E                   __ptext20 13DF                   __ptext12 144F  
                 __ptext21 080F                   __ptext13 15B5                   __ptext30 147A  
                 __ptext22 14E3                   __ptext14 1714                   __ptext31 13AD  
                 __ptext23 14AA                   __ptext15 1772                   __ptext24 13C1  
                 __ptext16 140D                   __ptext25 1520                   __ptext17 0A11  
                 __ptext26 1601                   __ptext18 13A5                   __ptext27 13B6  
                 __ptext19 16B7                   __ptext28 0004                   __ptext29 13F3  
                 __powers_ 1038           __size_of_sprintf 0644              __size_of_main 0119  
                 isdigit@c 0071                   scale@scl 003F         Lcd_Write_Char@temp 0072  
                sprintf@ap 00A3           __tdiv_to_l_@exp1 0025           __tdiv_to_l_@cntr 0024  
                sprintf@sp 00B0           __tdiv_to_l_@quot 0020           ___lldiv@dividend 0074  
                stringcode 100A         Lcd_Set_Cursor@temp 007A               ?__tdiv_to_l_ 0070  
                 sprintf@c 00B6                   sprintf@f 005A           ___lldiv@quotient 0079  
                 stringdir 100A                   stringtab 1000  
